REM *** Include File: modules\dataServer.dba ***
REM Created: 7/4/2010 10:52:18 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

dataServerSetup:

   #constant DATA_PATH "server/data/"
   #constant DATA_ID_PATH "server/data/id/"
   #constant DATA_ACCOUNT_PATH "server/data/account/"
   #constant DATA_AVATAR_PATH "server/data/avatar/"

   REM CALCULATE OUR CRITICAL FILE PATHS
   global dataguidfilename as string
   global dataserveridfilename as string
   dataserveridfilename = DATA_ID_PATH + "serverid.txt"

   REM PARTITION OUR BITS
   #constant DATA_GUID_BITS_TOTAL 30
   #constant DATA_GUID_BITS_SERVERS 4
   #constant DATA_GUID_BITS_AFTER_SERVER 26
   #constant DATA_GUID_BITS_DOMAINS 4
   #constant DATA_GUID_BITS_AFTER_DOMAIN 22
   rem this gives us over 4 million different objects per domain per server
   
   REM ASSIGN OUR DOMAINS
   #constant DATA_DOMAIN_CLIENT 0
   #constant DATA_DOMAIN_ACCOUNT 1
   #constant DATA_DOMAIN_AVATAR 2
   #constant DATA_DOMAIN_NPC 3
   #constant DATA_DOMAIN_PROP 4
   
   #constant DATA_DOMAIN_MAX 4
  
   REM SETUP OUR DOMAIN COUNTERS
   REM AND SET THE MAX DOMAIN GUID
   global dim dataNextGUID((2^DATA_GUID_BITS_DOMAINS)) as integer
   global dataMaxGUID as integer
   dataMaxGUID = (2^DATA_GUID_BITS_AFTER_DOMAIN)-1
   
   REM GET OUR SERVER ID
   global dataServerID as integer
   dataServerID = 1
   dataServerID = dataServerLoadServerID()
   debugWrite(DEBUGINFO,"SERVER ID FOUND : " + str$(dataServerID))
   
   REM LOAD OUR DOMAIN IDS
   for i = 1 to DATA_DOMAIN_MAX
      dataNextGUID(i) = dataServerLoadNextGUID(i)
   next
   
return

function dataServerGetLibraryRPGID(path$ as string, createFlag as boolean)

   REM PERFORM A REVERSE-LOOKUP ON THE LIBRARY TABLE
   
   retval$ = dataSharedGetField(DATA_TABLE_LIBRARY + DATA_REVERSE_SUFFIX, path$, DATA_KEY_UNDEFINED, DATA_NO_CREATE)
   
   if retval$ = DATA_KEY_UNDEFINED AND createFlag = DATA_CREATE
      REM WE HAVE A NEW ASSET IT - REGISTER IT
      retval = dataServerGetNextPropID()
      dataSharedUpdateField(DATA_TABLE_LIBRARY, str$(retval), path$)
      REM REVERSE LOOKUP WILL BE UPDATED AUTOMATICALLY AS WELL
   else
      retval = intval(retval$)
   endif
   
endfunction retval


function dataServerCreateAccount(myTable as integer, accountName$ as string, password$ as string)

   local retval as integer
   retval = DATA_FUNCTION_FAIL
   lowerAccountName$ = fast lower$(accountName$)
   test$ = keyboardSharedSanitizeFilename(lowerAccountName$)
   if test$ = lowerAccountName$
      REM PASSED TEST  1 - NO INVALID CHARACTERS FOUND
      filename$ = DATA_ACCOUNT_PATH + lowerAccountName$
      if fast len(lowerAccountName$) > 5 and fast len(password$) > 5
         REM PASSED TEST 2 - BOTH MORE THAN 5 CHARACTERS
         if file exist(filename$) = 0
            REM PASSED TEST 3 - ACCOUNT DOES NOT ALREADY EXIST
            retval = DATA_FUNCTION_OK
            myaccountid = dataServerGetNextAccountID()
            
            REM UPDATE TABLE
            dataSharedUpdateFieldFast(myTable,"accountname",accountName$)
            dataSharedUpdateFieldFast(myTable,"password",password$)
            dataSharedUpdateFieldFast(myTable,"accountid",str$(myaccountid))
            REM AND SAVE TABLE
            dataSharedSaveTable(myTable, filename$)
            debugWrite(DEBUGINFO,"Account created successfuly: " + accountName$)
            
         else
            debugWrite(DEBUGWARN,"Account already exists: " + lowerAccountName$)
         endif
      else
         debugWrite(DEBUGWARN,"Account or password less than 6 characters: " + lowerAccountName$)
      endif
   else
      debugWrite(DEBUGWARN,"Account name contains invalid characters: " + lowerAccountName$)
   endif   
   
endfunction retval

function dataServerAvatarFree(tableName$ as string)
   
   REM SEARCHES A TABLE FOR AN AVAILABLE
   REM AVATARX ATTRIBUTE UP TO PRESET MAX
   REM USED EXCLUSIVELY FOR ACOUNT TABLES
   
   local ctr as integer
   local found as boolean
   ctr = 0
   found = 0
   
   while ctr < PLAYER_AVATARS_PER_ACCOUNT_DEFAULT AND found = 0
      inc ctr
      if dataSharedGetField(tableName$, "avatar"+str$(ctr),DATA_KEY_UNDEFINED,DATA_NO_CREATE) = DATA_KEY_UNDEFINED then found = 1
   endwhile
   
   if found = 0 then ctr = DATA_FUNCTION_FAIL

endfunction ctr


function dataServerCreateAvatar(client as integer, accountName$ as string, avatarName$ as string, class as integer, powersource as integer)
   
   local retval as integer
   retval = DATA_FUNCTION_FAIL
   lowerAccountName$ = fast lower$(accountName$)
   lowerAvatarName$ = fast lower$(avatarName$)
   test1a$ = keyboardSharedSanitizeFilename(lowerAccountName$)
   test1b$ = keyboardSharedSanitizeFilename(lowerAvatarName$)
   if test1a$ = lowerAccountName$ AND test1b$ = lowerAvatarName$
      REM PASSED TEST  1 - NO INVALID CHARACTERS FOUND
      accountFilename$ = DATA_ACCOUNT_PATH + lowerAccountName$
      if fast len(lowerAccountName$) > 5 AND fast len(lowerAvatarName$) > 5
         REM PASSED TEST 2 - AvatarName AND AccountName MORE THAN 5 CHARACTERS
         if file exist(accountFilename$) = 1
            REM PASSED TEST 3 - ACCOUNT DOES EXIST
            avatarFilename$ = DATA_AVATAR_PATH + lowerAvatarName$
            if file exist(avatarFilename$) = 0
               REM PASSED TEST 4 - AVATAR DOES NOT ALREADY EXIST
               myAvatarSlot=dataServerAvatarFree(str$(client))
               if myAvatarSlot <> DATA_FUNCTION_FAIL
                  REM PASSED TEST 5 - ACCOUNT HAS AN AVAILABLE AVATAR SLOT

               
                  REM GET A NEW UNIQUE AVATAR ID, AND A NEW TABLE ID
                  myavatarid = dataServerGetNextAvatarID()
                  myTable = dataSharedMakeTable(avatarFilename$, 0, DATA_NO_REVERSE)
                  
                  REM ASSOCIATE THE SELECTED AVATAR TABLE ID WITH THE ACCOUNT TABLE
                  dataSharedUpdateFieldFast(client,"currentavatartid",str$(myTable))
                  
                  REM UPDATE THE RPGID IN THE ACCOUNT TABLE TO THE AVATARID
                  REM THIS IS A CONVENIENCE FIELD
                  dataSharedUpdateFieldFast(client,"rpgid",str$(myavatarid))
                  
                  REM UPDATE THE CTABLE
                  dataSharedUpdateFieldFast(NET_SERVER_CTABLEID, str$(myavatarid), str$(client))
                  
                  REM PUT THE AVATAR IN THE OPEN ACCOUNT SLOT
                  REM WE USE CASE-SENSITIVE VALUE IN THE ACCOUNT
                  REM TABLE BECAUSE THE ACOUNT VALUE IS USED FOR
                  REM DISPLAY AND FOR SENDING THE AVATAR LIST
                  dataSharedUpdateFieldFast(client,"avatar"+str$(myAvatarSlot),avatarName$)
                  
                  REM UPDATE AVATAR TABLE
                  dataSharedUpdateFieldFast(myTable,"accountname",accountName$)
                  dataSharedUpdateFieldFast(myTable,"avatarid",str$(myavatarid))
                  dataSharedUpdateFieldFast(myTable,"avatarname",avatarName$)
                  dataSharedUpdateFieldFast(myTable,"class",str$(class))
                  dataSharedUpdateFieldFast(myTable,"powersource",str$(powersource))
                  
                  REM SAVE THE NEW AVATAR TABLE
                  dataSharedSaveTable(myTable, avatarFilename$)
                  
                  REM SAVE THE UPDATES TO THE ACCOUNT TABLE
                  dataSharedSaveTable(client, DATA_ACCOUNT_PATH + lowerAccountName$)
                  
                  REM RETURN THE AVATAR TABLE ID 
                  retval = myTable
                  debugWrite(DEBUGINFO,"Avatar create success: " + lowerAvatarName$ + " for " + lowerAccountName$)
                  
               else
                  debugWrite(DEBUGWARN,"Avatar Creation failed: Account has no open avatar slots: " + lowerAccountName$)
               endif
            else
               debugWrite(DEBUGWARN,"Avatar Creation failed: Avatar already exists: " + avatarFilename$)
            endif
         else
            debugWrite(DEBUGWARN,"Avatar Creation failed: Account does not exist for avatar creation: " + lowerAccountName$)
         endif
      else
         debugWrite(DEBUGWARN,"Avatar Creation failed: Avatar name less than 6 characters: " + lowerAvatarName$)
      endif
   else
      debugWrite(DEBUGWARN,"Avatar Creation failed: Avatar name contains invalid characters: " + lowerAvatarName$)
   endif
   
endfunction retval
   

function dataServerLoadServerID()

   local retval as integer
   retval = dataServerID

   if file exist(dataserveridfilename) = 0
      debugWrite(DEBUGWARN, "NO SERVER ID FILE FOUND, CREATING NEW")
      open to write SYSTEM_FILE_DATA_SERVERID, dataserveridfilename
      write string SYSTEM_FILE_DATA_SERVERID, str$(dataServerID)
      close file SYSTEM_FILE_DATA_SERVERID
   else
      open to read SYSTEM_FILE_DATA_SERVERID, dataserveridfilename
      read string SYSTEM_FILE_DATA_SERVERID, dat$
      retval = intval(dat$)
      close file SYSTEM_FILE_DATA_SERVERID
   endif

endfunction retval

function dataServerLoadNextGUID(domainID as integer)
   
   local retval as integer
   retval = dataNextGUID(domainID)
   dataguidfilename = DATA_ID_PATH + "guid_" + str$(domainID) + ".txt"

   if file exist(dataguidfilename) = 0
      debugWrite(DEBUGWARN, "NO GUID FILE FOUND, CREATING NEW")
      open to write SYSTEM_FILE_DATA_GUID, dataguidfilename
      write string SYSTEM_FILE_DATA_GUID, str$(dataNextGUID(domainID))
      close file SYSTEM_FILE_DATA_GUID
   else
      open to read SYSTEM_FILE_DATA_GUID, dataguidfilename
      read string SYSTEM_FILE_DATA_GUID, dat$
      retval = intval(dat$)
      close file SYSTEM_FILE_DATA_GUID
   endif

   if retval > dataMaxGUID
      debugWrite(DEBUGERROR, "MAX GUID REACHED, INCREASE DATA_GUID_BITS_OBJECTS, STOPPING")
      systemSharedGameModeAdd(SYSTEM_MODE_QUITTING)
   endif

endfunction retval

function dataServerSaveNextGUID(domainID as integer)

   dataguidfilename = DATA_ID_PATH + "guid_" + str$(domainID) + ".txt"
     
   if file exist(dataguidfilename) = 1
      delete file dataguidfilename
   endif
   
   open to write SYSTEM_FILE_DATA_GUID, dataguidfilename
   write string SYSTEM_FILE_DATA_GUID, str$(dataNextGUID(domainID))
   close file SYSTEM_FILE_DATA_GUID

endfunction

function dataServerGetNextRPGID(domainID as integer)

   local retval as integer
   
   if domainID < 0 or domainID > (2^DATA_GUID_BITS_DOMAINS)
      debugWrite(DEBUGERROR, "INVALID DOMAIN REQUESTED, STOPPING: " + str$(domainID))
      systemSharedGameModeAdd(SYSTEM_MODE_QUITTING)
   else
      inc dataNextGUID(domainID)
      dataServerSaveNextGUID(domainID)
      retval = (dataServerID << DATA_GUID_BITS_AFTER_SERVER) + (domainID << DATA_GUID_BITS_AFTER_DOMAIN) + dataNextGUID(domainID)
   endif
   
endfunction retval

function dataServerGetNextClientID()
   local retval as integer
   retval = dataServerGetNextRPGID(DATA_DOMAIN_CLIENT)
endfunction retval

function dataServerGetNextAccountID()
   local retval as integer
   retval = dataServerGetNextRPGID(DATA_DOMAIN_ACCOUNT)
endfunction retval

function dataServerGetNextAvatarID()
   local retval as integer
   retval = dataServerGetNextRPGID(DATA_DOMAIN_AVATAR)
endfunction retval

function dataServerGetNextNPCID()
   local retval as integer
   retval = dataServerGetNextRPGID(DATA_DOMAIN_NPC)
endfunction retval

function dataServerGetNextPropID()
   local retval as integer
   retval = dataServerGetNextRPGID(DATA_DOMAIN_PROP)
endfunction retval
