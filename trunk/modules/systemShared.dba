REM *** Include File: modules\systemShared.dba ***
REM Created: 7/4/2010 10:45:51 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

systemSharedSetup:

   global systemGameTitle$ as string
   systemGameTitle$ = "World of OMEN (FROST), Lakehome Games, 2010-2011"
   
   
   #constant SYSTEM_TYPE_FILE     1
   #constant SYSTEM_TYPE_LOOKUP   2
   #constant SYSTEM_TYPE_TICKER   3
   #constant SYSTEM_TYPE_OBJECT   4
   #constant SYSTEM_TYPE_IMAGE    5
   #constant SYSTEM_TYPE_SPRITE   6
   #constant SYSTEM_TYPE_SOUND    7
   #constant SYSTEM_TYPE_MUSIC    8
   #constant SYSTEM_TYPE_VECTOR3  9
   #constant SYSTEM_TYPE_VECTOR4  10
   
   #constant SYSTEM_TYPE_MAX      10
   
   global dim systemNextID(SYSTEM_TYPE_MAX) as integer
   
   #constant SYSTEM_SEARCH_FAST    1
   #constant SYSTEM_SEARCH_REUSE   2
      
   REM RESERVED FILE ID MANAGEMENT
   global SYSTEM_FILE_DATA_SERVERID as integer
   SYSTEM_FILE_DATA_SERVERID = systemSharedGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
   global SYSTEM_FILE_DATA_GUID as integer
   SYSTEM_FILE_DATA_GUID = systemSharedGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
   global SYSTEM_FILE_TABLE as integer
   SYSTEM_FILE_TABLE = systemSharedGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
   global SYSTEM_FILE_DATA as integer
   SYSTEM_FILE_DATA = systemSharedGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
   global SYSTEM_FILE_NET as integer
   SYSTEM_FILE_NET = systemSharedGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
   global SYSTEM_FILE_GUI as integer
   SYSTEM_FILE_GUI = systemSharedGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)


   REM SYSTEM MODES
   global systemMode as integer
   global systemModeLast as integer
   #constant SYSTEM_MODE_CHAT_ACTIVE      %1
   #constant SYSTEM_MODE_QUITTING         %10
   #constant SYSTEM_MODE_NET_TCP          %100
   #constant SYSTEM_MODE_LOGON_COMPLETE   %1000
   #constant SYSTEM_MODE_TERRAIN          %10000
   #constant SYSTEM_MODE_GUI              %100000
   #constant SYSTEM_MODE_GUI_DRAG         %1000000
   #constant SYSTEM_MODE_DROPDOWN         %10000000
   #constant SYSTEM_MODE_CAMERA           %100000000
   #constant SYSTEM_MODE_MOVE             %1000000000
   #constant SYSTEM_MODE_NET_UDP          %10000000000
   #constant SYSTEM_MODE_NET_KEYBOARD     %100000000000
   #constant SYSTEM_MODE_MESSAGE_BOX      %1000000000000
   #constant SYSTEM_MODE_EDIT             %10000000000000
   #constant SYSTEM_MODE_ZONE_TRY         %100000000000000
   #constant SYSTEM_MODE_ZONING           %1000000000000000
   #constant SYSTEM_MODE_ZONE_SERVER      %10000000000000000
   #constant SYSTEM_MODE_METRICS          %100000000000000000
   #constant SYSTEM_MODE_USING_OBJECT     %1000000000000000000
   #constant SYSTEM_MODE_GUI_TRACK        %10000000000000000000
   #constant SYSTEM_MODE_NO_CULL          %100000000000000000000
   #constant SYSTEM_MODE_SHOW_ALL         %1000000000000000000000
   #constant SYSTEM_MODE_AREA_TERRAIN     %10000000000000000000000
   #constant SYSTEM_MODE_AV_SELECT        %100000000000000000000000
   
   REM PLAYER STATUS MODES
   #constant PLAYER_STATUS_NO_KEY         1
   #constant PLAYER_STATUS_OK            99


    #constant SYSTEM_INVALID_ID  -1
    #constant SYSTEM_FUNCTION_FAILED -1
    #constant SYSTEM_FUNCTION_OK 1

    REM SYSTEM UTILITY VECTORS
    global SYSTEM_VECTOR4_LERPCOLORA as integer
    SYSTEM_VECTOR3_LERPCOLORA = systemSharedGetFree(SYSTEM_TYPE_VECTOR4,SYSTEM_SEARCH_FAST)
    global SYSTEM_VECTOR4_LERPCOLORB as integer
    SYSTEM_VECTOR3_LERPCOLORB = systemSharedGetFree(SYSTEM_TYPE_VECTOR4,SYSTEM_SEARCH_FAST)
    global SYSTEM_VECTOR4_LERPCOLORC as integer
    SYSTEM_VECTOR3_LERPCOLORC = systemSharedGetFree(SYSTEM_TYPE_VECTOR4,SYSTEM_SEARCH_FAST)
    global SYSTEM_VECTOR3_GETDIST as integer
    SYSTEM_VECTOR3_GETDIST = systemSharedGetFree(SYSTEM_TYPE_VECTOR3,SYSTEM_SEARCH_FAST)
    global SYSTEM_VECTOR3_LOCLAST as integer
    SYSTEM_VECTOR3_LOCLAST = systemSharedGetFree(SYSTEM_TYPE_VECTOR3,SYSTEM_SEARCH_FAST)
    global SYSTEM_VECTOR3_LOCNOW as integer
    SYSTEM_VECTOR3_LOCNOW = systemSharedGetFree(SYSTEM_TYPE_VECTOR3,SYSTEM_SEARCH_FAST)

   REM GAMETIME VARIABLES

   global systemGameTimeMilliseconds as integer = 0
   global systemGameTimeLastFrameMilliseconds as integer = 0
   global systemGameTimeSeconds# as float = 0.0
   global systemGameTimeLastFrameSeconds# as float = 0.0
   global systemServerTimeDelta as integer = 0
   global systemGameFPS as float

   global SYSTEM_GRAVITY as float
   SYSTEM_GRAVITY = -25.0
   
   encryptSetKey(systemGameTitle$)

return

function systemSharedUpdateGameTime()

   REM THIS CAN ONLY BE CALLED ONCE PER FRAME

   systemGameTimeLastFrameMilliseconds = systemGameTimeMilliseconds
   systemGameTimeLastFrameSeconds# = systemGameTimeSeconds#

   systemGameTimeMilliseconds = hitimer()
   systemGameTimeSeconds# = (systemGameTimeMilliseconds / 1000.0)

   systemGameFPS = ( 1000.0 / (systemGameTimeMilliseconds - systemGameTimeLastFrameMilliseconds) )

endfunction

function systemSharedGetFree(myType as integer, mySearch as integer)

   local retval as integer
   retval = SYSTEM_INVALID_ID

   mySearch=clamp(mySearch, SYSTEM_SEARCH_FAST, SYSTEM_SEARCH_REUSE)

   if myType < 1 or myType > SYSTEM_TYPE_MAX
      debugWrite(DEBUGERROR,"systemSharedGetFree: Invalid Type Specified: " + str$(myType))
      exitfunction SYSTEM_INVALID_ID
   endif

   select mySearch
      case SYSTEM_SEARCH_FAST
         inc systemNextID(myType)
         retval = systemNextID(myType)
         if myType = SYSTEM_TYPE_VECTOR3
            r = make vector3(retval)
         endif
         if myType = SYSTEM_TYPE_VECTOR4
            r = make vector4(retval)
         endif
      endcase
      case SYSTEM_SEARCH_REUSE
         found = 0
         ctr = 0
         while ctr < systemNextID(myType) and found = 0
            inc ctr
            select myType
               case SYSTEM_TYPE_FILE
                  REM WON'T NORMALLY USE THIS FOR FILES
                  if file open(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_LOOKUP
                  if lookup exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_TICKER
                  if ticker exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_OBJECT
                  if object exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_IMAGE
                  if image exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_SPRITE
                  if sprite exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_SOUND
                  if sound exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_MUSIC
                  if music exist(ctr) = 0 then found =1
               endcase
            endselect
         endwhile

         if found = 0
            debugWrite(DEBUGWARN,"systemSharedGetFree Optimization: method Search requested with Fast result")
            inc systemNextID(myType)
            retval = systemNextID(myType)
         else
            retval = ctr
         endif
      endcase
   endselect

endfunction retval

function systemSharedPushFree(myType as integer,amount as integer)

   if myType < 1 or myType > SYSTEM_TYPE_MAX
      debugWrite(DEBUGERROR,"systemSharedPushFree: Invalid Type Specified: " + str$(myType))
      exitfunction
   endif

   inc systemNextID(myType), amount

endfunction

function systemSharedGetRealDateTime(dsep$,dtsep$,tsep$)

   date$ = get date$()
   time$ = get time$()

   month$ = left$(date$,2)
   day$ = mid$(date$,4) + mid$(date$,5)
   year$ = "20" + right$(date$,2)
   date$ = year$+dsep$+month$+dsep$+day$

   hour$ = left$(time$,2)
   minutes$ = mid$(time$,4) + mid$(time$,5)
   seconds$ = right$(time$,2)
   time$ = hour$+tsep$+minutes$+tsep$+seconds$

   datetime$=date$+dtsep$+time$

endfunction datetime$

function systemSharedFrameMoved(rate# as float)

   local moved# as float

   REM rate# is number of game units per second
   moved# = (systemGameTimeSeconds# - systemGameTimeLastFrameSeconds#) * rate#

endfunction moved#

function systemSharedGameModeAdd(mode as integer)
    systemModeLast = systemMode
    systemMode = systemMode || mode
endfunction

function systemSharedGameModeRemove(mode as integer)
    systemModeLast = systemMode
    if systemMode && mode
        systemMode = systemMode - mode
    endif
endfunction

function systemSharedFieldAdd(record$,field$,separator$)
   if systemSharedFieldInRecord(record$,field$,separator$) = 0
      if len(record$) > 0
         record$ = record$ + separator$
      endif
      record$ = record$ + field$
   endif
endfunction record$

function systemSharedFieldRemove(record$,field$,separator$)
   fieldLocation = systemSharedFieldInRecord(record$,field$,separator$)
   if fieldLocation <> 0
      record$ = ""
      for i = 1 to split count()
         if i <> fieldLocation
               if len(record$) > 0
                  record$ = record$ + separator$
               endif
               record$ = record$ + field$
         endif
      next
   endif
endfunction record$

function systemSharedFieldInRecord(record$,field$,separator$)
   local retval = 0
   split string record$, separator$
   ctr = 0 : found = 0
   while ctr < split count() and found = 0
      inc ctr
      if get split word$(ctr) = field$
         found = 1
         retval = ctr
      endif
   endwhile
endfunction retval

function systemSharedLerpColors(clr1 as dword, clr2 as dword, pct as float)

   local clrFinal as dword
   pct = clamp(pct, 0.0, 100.0)
   percent# = pct/100.0

   set vector4 systemVector4A, rgbr(clr1), rgbg(clr1), rgbb(clr1), rgba(clr1)
   set vector4 systemVector4B, rgbr(clr2), rgbg(clr2), rgbb(clr2), rgba(clr2)
   LINEAR INTERPOLATE VECTOR4 systemVector4C, systemVector4A, systemVector4B, percent#
   r = int(clamp(X VECTOR4(systemVector4C),0.0,255.0))
   g = int(clamp(Y VECTOR4(systemVector4C),0.0,255.0))
   b = int(clamp(Z VECTOR4(systemVector4C),0.0,255.0))
   a = int(clamp(W VECTOR4(systemVector4C),0.0,255.0))
   clrFinal = rgb(r,g,b)
   clrFinal = SET ALPHA(clrFinal,a)

endfunction clrFinal

function systemSharedGetDistance3D(x1#,y1#,z1#,x2#,y2#,z2#)

   set vector3 SYSTEM_VECTOR3_GETDIST, (x1# - x2#), (y1# - y2#), (z1# - z2#)
   exitfunction (length vector3(SYSTEM_VECTOR3_GETDIST))

endfunction 0.0

function systemSharedGetAngleDifference(a1 as float, a2 as float)

  rem the angular difference returned
  rem is the degrees you would have to rotate from a1 to reach a2
  a1 = -(wrapvalue(a1+180-a2)-180)

endfunction a1


function systemSharedPadLeft(source$,desiredSize,pad$)

   retval$=source$
   temp$=""
   sizeDifference = desiredSize - len(source$)
   if sizeDifference > 0
      for a = 1 to sizeDifference
         temp$=temp$+pad$
      next a

      retval$ = temp$ + source$

   endif

endfunction retval$

function systemSharedRound$(myFloat as float, places as integer)

   myStr$=str$(myFloat)
   a = instr(myStr$,".")
   if a > 0
      b = min(len(myStr$),a+places)
      retval$ = fast left$(myStr$,b)
   else
      retval$ = myStr$
   endif

endfunction retval$

function systemSharedPercentBetween(i as float, j as float, pct as float)

   local k as float
   pct = clamp(pct, 0.0, 100.0)
   percent# = pct/100.0

   k = abs(i - j) * percent#
   k = min(i,j) + k

endfunction k

