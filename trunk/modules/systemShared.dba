REM *** Include File: modules\systemShared.dba ***
REM Created: 7/4/2010 10:45:51 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

systemSharedSetup:

    #constant SYSTEM_TYPE_FILE     1
    #constant SYSTEM_TYPE_LOOKUP   2
    #constant SYSTEM_TYPE_TICKER   3
    #constant SYSTEM_TYPE_OBJECT   4
    #constant SYSTEM_TYPE_IMAGE    5
    #constant SYSTEM_TYPE_SPRITE   6
    #constant SYSTEM_TYPE_SOUND    7
    #constant SYSTEM_TYPE_MUSIC    8

    #constant SYSTEM_TYPE_MAX      8

    global dim systemNextID(SYSTEM_TYPE_MAX) as integer

    #constant SYSTEM_SEARCH_FAST    1
    #constant SYSTEM_SEARCH_REUSE   2

    global systemNextFileID as integer
    global systemNextFreeLookup as integer
    global systemNextFreeTicker as integer

    REM RESERVED FILE ID MANAGEMENT
    global SYSTEM_FILE_DATA_SERVERID as integer
    SYSTEM_FILE_DATA_SERVERID = systemGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
    global SYSTEM_FILE_DATA_GUID as integer
    SYSTEM_FILE_DATA_GUID = systemGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
    global SYSTEM_FILE_TABLE as integer
    SYSTEM_FILE_TABLE = systemGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
    global SYSTEM_FILE_DATA as integer
    SYSTEM_FILE_DATA = systemGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)
    global SYSTEM_FILE_NET as integer
    SYSTEM_FILE_NET = systemGetFree(SYSTEM_TYPE_FILE,SYSTEM_SEARCH_FAST)

    REM SYSTEM MODES
    global systemMode as integer
    global systemModeLast as integer
    #constant SYSTEM_MODE_CHAT_ACTIVE         %1
    #constant SYSTEM_MODE_QUITTING            %10
    #constant SYSTEM_MODE_NET_TCP             %100



return

function systemGetFree(myType as integer, mySearch as integer)

   local retval as integer
   retval = -1

   mySearch=clamp(mySearch, SYSTEM_SEARCH_FAST, SYSTEM_SEARCH_REUSE)

   if myType < 1 or myType > SYSTEM_TYPE_MAX
      debugWrite(DEBUGERROR,"systemGetFree: Invalid Type Specified: " + str$(myType))
      exitfunction -1
   endif

   select mySearch
      case SYSTEM_SEARCH_FAST
         inc systemNextID(myType)
         retval = systemNextID(myType)
      endcase
      case SYSTEM_SEARCH_REUSE
         found = 0
         ctr = 0
         while ctr < systemNextID(myType) and found = 0
            inc ctr
            select myType
               case SYSTEM_TYPE_FILE
                  REM WON'T NORMALLY USE THIS FOR FILES
                  if file open(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_LOOKUP
                  if lookup exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_TICKER
                  if ticker exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_OBJECT
                  if object exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_IMAGE
                  if image exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_SPRITE
                  if sprite exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_SOUND
                  if sound exist(ctr) = 0 then found = 1
               endcase
               case SYSTEM_TYPE_MUSIC
                  if music exist(ctr) = 0 then found =1
               endcase
            endselect
         endwhile

         if found = 0
            debugWrite(DEBUGWARN,"systemGetFree Optimization: method Search requested with Fast result")
            inc systemNextID(myType)
            retval = systemNextID(myType)
         else
            retval = ctr
         endif
      endcase
   endselect

endfunction retval

function systemPushFree(myType as integer)

   if myType < 1 or myType > SYSTEM_TYPE_MAX
      debugWrite(DEBUGERROR,"systemPushFree: Invalid Type Specified: " + str$(myType))
      exitfunction
   endif

   inc systemNextID(myType)

endfunction

function systemSharedGetRealDateTime(dsep$,dtsep$,tsep$)

   date$ = get date$()
   time$ = get time$()

   month$ = left$(date$,2)
   day$ = mid$(date$,4) + mid$(date$,5)
   year$ = "20" + right$(date$,2)
   date$ = year$+dsep$+month$+dsep$+day$

   hour$ = left$(time$,2)
   minutes$ = mid$(time$,4) + mid$(time$,5)
   seconds$ = right$(time$,2)
   time$ = hour$+tsep$+minutes$+tsep$+seconds$

   datetime$=date$+dtsep$+time$

endfunction datetime$

function systemSharedGameModeAdd(mode as integer)
    systemModeLast = systemMode
    systemMode = systemMode || mode
endfunction

function systemSharedGameModeRemove(mode as integer)
    systemModeLast = systemMode
    if systemMode && mode
        systemMode = systemMode - mode
    endif
endfunction

function systemSharedFieldAdd(record$,field$,separator$)
   if instr(record$,field$) = 0
      if len(record$) > 0
         record$ = record$ + separator$
      endif
      record$ = record$ + field$
   endif
endfunction record$

function systemSharedFieldRemove(record$,field$,separator$)
   record$ = remove all$(record$,field$)
   record$ = replace all$(record$,separator$+separator$,separator$)
endfunction record$

function systemLerpColors(clr1 as dword, clr2 as dword, pct as float)

   local clrFinal as dword
   pct = clamp(pct, 0.0, 100.0)
   percent# = pct/100.0

   set vector4 systemVector4A, rgbr(clr1), rgbg(clr1), rgbb(clr1), rgba(clr1)
   set vector4 systemVector4B, rgbr(clr2), rgbg(clr2), rgbb(clr2), rgba(clr2)
   LINEAR INTERPOLATE VECTOR4 systemVector4C, systemVector4A, systemVector4B, percent#
   r = int(clamp(X VECTOR4(systemVector4C),0.0,255.0))
   g = int(clamp(Y VECTOR4(systemVector4C),0.0,255.0))
   b = int(clamp(Z VECTOR4(systemVector4C),0.0,255.0))
   a = int(clamp(W VECTOR4(systemVector4C),0.0,255.0))
   clrFinal = rgb(r,g,b)
   clrFinal = SET ALPHA(clrFinal,a)

endfunction clrFinal

function systemGetDistance3D(x1#,y1#,z1#,x2#,y2#,z2#)

   set vector3 systemVector3A, (x1# - x2#), (y1# - y2#), (z1# - z2#)
   exitfunction (length vector3(systemVector3A))

endfunction 0.0

function systemGetAngleDifference(a1 as float, a2 as float)

  rem the angular difference returned
  rem is the degrees you would have to rotate from a1 to reach a2
  a1 = -(wrapvalue(a1+180-a2)-180)

endfunction a1


function systemPadLeft(source$,desiredSize,pad$)

   retval$=source$
   temp$=""
   sizeDifference = desiredSize - len(source$)
   if sizeDifference > 0
      for a = 1 to sizeDifference
         temp$=temp$+pad$
      next a

      retval$ = temp$ + source$

   endif

endfunction retval$

function systemRound$(myFloat as float, places as integer)

   myStr$=str$(myFloat)
   a = instr(myStr$,".")
   if a > 0
      b = min(len(myStr$),a+places)
      retval$ = fast left$(myStr$,b)
   else
      retval$ = myStr$
   endif

endfunction retval$

function systemPercentBetween(i as float, j as float, pct as float)

   local k as float
   pct = clamp(pct, 0.0, 100.0)
   percent# = pct/100.0

   k = abs(i - j) * percent#
   k = min(i,j) + k

endfunction k

