REM *** Include File: modules\guiClient.dba ***
REM Created: 7/4/2010 11:11:33 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

guiClientSetup:


   #constant GUI_ACTIVE 1

   #constant GUI_LABEL 1
   #constant GUI_BUTTON 2
   #constant GUI_TEXTFIELD 3
   #constant GUI_SLIDER 4
   #constant GUI_CHILD 5
   #constant GUI_COMBOBOX 6
   #constant GUI_TITLEBAR 7
   #constant GUI_MINIMIZE 8
   #constant GUI_CLOSE 9
   #constant GUI_STRETCH 10
   #constant GUI_PANEL 11
   #constant GUI_POPUP 12
   #constant GUI_NAMETAG 13
   #constant GUI_SLIDER_BUTTON 14
   #constant GUI_PROGRESSBAR_HOLDER 15
   #constant GUI_PROGRESSBAR 16

   #constant GUI_STATE_OFF 1
   #constant GUI_STATE_HOVER 2
   #constant GUI_STATE_PRESS 3
   #constant GUI_STATE_DRAG 4

   global GUI_ACTIVE_WIN
   global GUI_ACTIVE_GADGET

   #constant GUI_PATH "media/gui/"
   #constant GUI_SKIN_PATH "media/gui/skins/"
   #constant GUI_SKILL_PATH "media/gui/skills/"
   #constant GUI_SYSTEM_PATH "media/gui/systems/"
   #constant GUI_GOAL_PATH "media/gui/goals/"
   #constant GUI_MASK_PATH "media/avatar/"
   #constant GUI_AREA_PATH "media/gui/areas/"

   #constant GUI_WINDOW_MAIN "windowMain"
   #constant GUI_WINDOW_MESSAGEBOX "windowMessageBox"
   #constant GUI_CHAT_RECEIVE "labelChatReceive"
   #constant GUI_UNAME "inputLogonAccountName"
   #constant GUI_PWD "inputLogonPassword"
   #constant GUI_CREATE_UNAME "inputCreateAccountName"
   #constant GUI_CREATE_PWD "inputCreateAccountPassword"
   #constant GUI_CHAT_ENTER "inputChatEnter"
   

   global guiWindowskin as integer
   guiWindowskin = guiClientFindImage()
   global guiDrawskin as integer
   guiDrawskin = guiClientFindImage()
   global guiCenterskin as integer
   guiCenterskin = guiClientFindImage()
   global guiBorderskin as integer
   guiBorderskin = guiClientFindImage()
   global guiTempSprite as integer
   guiTempSprite = guiClientFindImage()

   #constant guibmapformat 21
   
   global guiWindowBorderMade as float
   global guiSkinName as string
   global guiSkinIDX as integer
   global guiNextFreeImage as integer

   type gui_skin
      id as integer
      skinfile as string
      winwidth as float
      winheight as float
      borderratio as float
      fontname as string
      fontsize as integer
      fontcoloroff as dword
      fontcolorhover as dword
      fontcolorpress as dword
      coloroff as dword
      colorhover as dword
      colorpress as dword
      close_offsetx as float
      close_offsety as float
      min_offsetx as float
      min_offsety as float
      stretch_offsetx as float
      stretch_offsety as float
      titleheight as float
      centerimage as integer
      windowimage as integer
      buttonimage as integer
      buttonnoborderimage as integer
      closeimage as integer
      comboimage as integer
      minimizeimage as integer
      toggleonimage as integer
      toggleoffimage as integer
      sliderimage as integer
      sliderbuttonimage as integer
      vsliderimage as integer
      vsliderbuttonimage as integer
      progressbarimage as integer
      progressbarholderimage as integer
      stretchimage as integer
      textbarimage as integer
      titlebarimage as integer
      popupimage as integer
      noneimage as integer
      nametagwidth as integer
      nametagheight as integer
   endtype
   global dim guiskins() as gui_skin
   add to queue guiskins()

   type gui_window
      windowid as integer
      closeflag as boolean
      minflag as boolean
      titleflag as boolean
      stretchflag as boolean
      panelflag as boolean
      hiddenflag as boolean
      virtualflag as boolean
      popupflag as boolean
      savemetrics as boolean
      active as boolean
      mousetrap as boolean
      minimizing as boolean
      minimized as boolean
      restoring as boolean
      closing as boolean
      closed as boolean
      killed as boolean
      popupimageid as integer
      popupgadgetid as integer
      popuptext as string
      alpha as integer
      x as float
      y as float
      w as float
      h as float
      skin as gui_skin
      title as string
      guiid as string
   endtype
   global dim guiwindows() as gui_window
   add to queue guiwindows()

   type gui_gadget
      parent as gui_window
      gadgettype as integer
      label as string
      imageid as integer
      baseimageid as integer
      skinwidth as integer
      skinheight as integer
      beginrange as float
      endrange as float
      currentrange as float
      rangex as integer
      rangey as integer
      scrollbar as integer
      progressbar as integer
      mousetrap as boolean
      x as float
      y as float
      w as float
      h as float
      columns as integer
      rows as integer
      columnpos as integer
      rowpos as integer
      guiid as string
      multiline as boolean
      centerme as boolean
      password_field as boolean
      command as string
      radioGroup as integer
      alignTop as boolean
      textLeftBorder as integer
      imageoverride as string
      dragflag as boolean
      stayhiddenflag as boolean
      norebuildflag as boolean
      topPadding as float
      bottomPadding as float
      leftPadding as float
      rightPadding as float
      state as integer
      killed as boolean
      popuptext as string
      objectAttachTID as integer
      displayPercent as float
      gadgetidcontrols as integer
      slidertype as integer
      toggletype as integer
      togglestate as boolean
   endtype
   global dim guigadgets() as gui_gadget
   add to queue guigadgets()
   
    type gui_color
      name as string
      color as dword
   endtype
   global dim guicolors() as gui_color
   add to queue guicolors()


   global guiDragOffsetX as integer
   global guiDragOffsetY as integer
   global guiChatReceived as string
   global guiDragStartX as integer
   global guiDragStartY as integer
   global guiDragSensitivity as integer
   guiDragSensitivity = 5
   global guiButtonPressed as boolean


   REM BUILD THE FRONTDROP
   
      #constant GUI_FADE_TO_BLACK 1
      #constant GUI_FADE_BLACK_OUT 2
      #constant GUI_FADE_FROM_BLACK -1
      #constant GUI_FADE_NONE 0
      global guiPanelFrontDrop as integer
      global guiProgressFrontDrop as integer
      global guiProgressHolderFrontDrop as integer
      global guiFadeState as integer
      global guiProgressState as integer
      global guiFadePercent as float
      guiFadeState = GUI_FADE_NONE
      guiProgressState = 0
      guiFadePercent = 0.0

   guiPanelFrontDrop = guiClientFindImage()
   load image GUI_AREA_PATH + "a000.png", guiPanelFrontDrop, 1
   sprite guiPanelFrontDrop, 0,0,guiPanelFrontDrop
   scale sprite guiPanelFrontDrop, ((screen width()/640.0)*100.0)
   set sprite priority guiPanelFrontDrop,98
   hide sprite guiPanelFrontDrop

   guiProgressHolderFrontDrop = guiClientFindImage()
   load image "media/gui/skins/default/progressholder.png",guiProgressHolderFrontDrop,1
   sprite guiProgressHolderFrontDrop, (screen width() / 2.0) - (image width(guiProgressHolderFrontDrop) / 2.0), screen height() - (image height(guiProgressHolderFrontDrop) * 3.0), guiProgressHolderFrontDrop
   set sprite priority guiProgressHolderFrontDrop, 100
   hide sprite guiProgressHolderFrontDrop

   guiProgressFrontDrop = guiClientFindImage()
   load image "media/gui/skins/default/progressbar.png",guiProgressFrontDrop,1
   sprite guiProgressFrontDrop, (screen width() / 2.0) - (image width(guiProgressHolderFrontDrop) / 2.0), screen height() - (image height(guiProgressFrontDrop) * 3.0), guiProgressFrontDrop
   set sprite priority guiProgressFrontDrop, 99
   hide sprite guiProgressFrontDrop


   REM BUILD THE WINDOW SKIN

   guiSkinName = guiClientGetGUIField("skinname","default")
   guiSkinIDX = guiClientCreateSkin(guiSkinName)

   
   REM BUILD THE SCREEN VIRTUAL WINDOW

   global guiScreenWindowID as integer
   global guiTickerPopup as integer
   guiTickerPopup = systemSharedGetFree(SYSTEM_TYPE_TICKER,SYSTEM_SEARCH_FAST)
   MAKE TICKER guiTickerPopup,  1000

   global guiKeepActiveWindow as boolean
   guiKeepActiveWindow = 0

return


function guiClientFindImage()
   REM INTERFACE TO THE SYSTEM ASSET ID POOL
   local retval as integer
   retval = systemSharedGetFree(SYSTEM_TYPE_IMAGE, SYSTEM_SEARCH_FAST)
endfunction retval

function guiClientGetLanguageField(key as string)
   REM INTERFACE TO UNSTRUCTURED DATA SYSTEM, LANGUAGE TABLE
   local value$ as string
   value$ = dataSharedGetField(DATA_LANGUAGE, key, DATA_KEY_UNDEFINED, DATA_NO_CREATE)
endfunction value$

function guiClientGetGUIField(key as string, default as string)
   REM INTERFACE TO UNSTRUCTURED DATA SYSTEM, GUI TABLE
   local value$ as string
   value$ = dataSharedGetField(DATA_TABLE_GUI, key, default, DATA_CREATE)
endfunction value$

function guiClientSetGUIField(key as string, value as string)
   REM INTERFACE TO UNSTRUCTURED DATA SYSTEM, GUI TABLE
   dataSharedUpdateField(DATA_TABLE_GUI, key, value)
endfunction

function guiClientGetInputField(key as string, default as string)
   REM INTERFACE TO UNSTRUCTURED DATA SYSTEM, GUI TABLE
   local value$ as string
   value$ = dataSharedGetField(DATA_TABLE_INPUT, key, default, DATA_CREATE)
endfunction value$

function guiClientSetInputField(key as string, value as string)
   REM INTERFACE TO UNSTRUCTURED DATA SYSTEM, INPUT TABLE
   dataSharedUpdateField(DATA_TABLE_INPUT, key, value)
endfunction

function guiClientGetGUIDataField(key as string, default as string)
   REM INTERFACE TO UNSTRUCTURED DATA SYSTEM, GUI TABLE
   local value$ as string
   value$ = dataSharedGetField(DATA_TABLE_GUIDATA, key, default, DATA_CREATE)
endfunction value$

function guiClientSetGUIDataField(key as string, value as string)
   REM INTERFACE TO UNSTRUCTURED DATA SYSTEM, INPUT TABLE
   dataSharedUpdateField(DATA_TABLE_GUIDATA, key, value)
endfunction

function guiClientCreateScreenVirtualWindow()
   
   if guiScreenWindowID <> 0
      guiClientKillWindow("windowScreen")
   endif
   
   guiClientBuildWindow(guiSkinName,"windowScreen")
   guiScreenWindowID = array count(guiwindows())
   guiwindows(guiScreenWindowID).virtualflag = 1
   
   REM THE CROSSHAIRS ARE A PART OF THE
   REM SCREEN VIRTUAL WINDOW
   
   guiCrosshairsNW = guiClientGetGadgetID("panelCrosshairsNW")
   scale sprite guigadgets(guiCrosshairsNW).imageid, 25
   hide sprite guigadgets(guiCrosshairsNW).imageid
   
   guiCrosshairsNE = guiClientGetGadgetID("panelCrosshairsNE")
   scale sprite guigadgets(guiCrosshairsNE).imageid, 25
   mirror sprite guigadgets(guiCrosshairsNE).imageid
   hide sprite guigadgets(guiCrosshairsNE).imageid
   
   guiCrosshairsSW = guiClientGetGadgetID("panelCrosshairsSW")
   scale sprite guigadgets(guiCrosshairsSW).imageid, 25
   flip sprite guigadgets(guiCrosshairsSW).imageid
   hide sprite guigadgets(guiCrosshairsSW).imageid
   
   guiCrosshairsSE = guiClientGetGadgetID("panelCrosshairsSE")
   scale sprite guigadgets(guiCrosshairsSE).imageid, 25
   flip sprite guigadgets(guiCrosshairsSE).imageid
   mirror sprite guigadgets(guiCrosshairsSE).imageid
   hide sprite guigadgets(guiCrosshairsSE).imageid

endfunction

function guiClientCreateNameTag(tid as integer)
   
   local textColor as dword
   local colorIDX as integer

   REM NAMETAGS ARE PART OF THE SCREEN VIRTUAL WINDOW
   mydbpid = intval(dataSharedGetFieldFast(tid, "dbpid"))
   if mydbpid = 0 then exitfunction
   if object exist(mydbpid) = 0 then exitfunction
   
   myrank$ = dataSharedGetFieldFast(tid, "rank")
   myavatarname$ = dataSharedGetFieldFast(tid, "avatarname")

   position object idxCrosshair, object position x(mydbpid), object position y(mydbpid) + (object size y(mydbpid,1) * 0.5), object position z(mydbpid)

   `colorIDX = guiGetConColor(idx)
   `textColor = guicolors(colorIDX).color

   mygadget = guiClientCreateTextArea(guiClientGetLanguageField("rankname"+myrank$) + " " + myavatarname$,object screen x(idxCrosshair)-(guiskins(guiSkinIDX).nametagwidth * 0.5),object screen y(idxCrosshair)-(guiskins(guiSkinIDX).nametagheight * 0.25),guiskins(guiSkinIDX).nametagwidth,guiskins(guiSkinIDX).nametagheight,1,guiScreenWindowID,"nameTag_" + myavatarname$,1,1,1,textColor,0.75)
   guigadgets(mygadget).gadgettype = GUI_NAMETAG
   guigadgets(mygadget).objectAttachTID = tid
   
   dataSharedUpdateFieldFast(tid,"gadgetIDNameTag",str$(mygadget))
   
endfunction mygadget

function guiClientDeleteNameTag(tid)
   
   i = intval(dataSharedGetFieldFast(tid,"gadgetIDNameTag"))
   if i > 0 and i <= array count(guigadgets())
      if guigadgets(i).imageid <> 0
         if sprite exist(guigadgets(i).imageid)
            delete sprite guigadgets(i).imageid
         endif
         if image exist(guigadgets(i).imageid)
            delete image guigadgets(i).imageid
         endif
         guigadgets(i).imageid = 0
         guigadgets(i).guiid = ""
         guigadgets(i).killed = 1
      endif
   endif
         
endfunction

function guiClientRebuildFrontDrop(areaID)

      REM REBUILD THE FRONTDROP

      filename$ = GUI_AREA_PATH + systemSharedPadLeft(str$(areaID),3,"0") + ".png"

      if file exist(filename$)
         if image exist(guiPanelFrontDrop)
            delete image guiPanelFrontDrop
         endif
         load image filename$, guiPanelFrontDrop, 1
         sprite guiPanelFrontDrop, 0,0,guiPanelFrontDrop
         scale sprite guiPanelFrontDrop, ((screen width()/640.0)*100.0)
      endif

endfunction

function guiClientGetWindowID(guiid$)

   local ctr as integer
   local found as boolean
   local retval as integer
   ctr = 0
   found = 0
   retval = 0
   while found = 0 and ctr < array count(guiwindows())
      inc ctr
      if lower$(guiwindows(ctr).guiid) = lower$(guiid$)
         found = 1
         retval = ctr
      endif
   endwhile

endfunction retval

function guiClientGetGadgetID(guiid$)

   local ctr as integer
   local found as boolean
   local retval as integer
   ctr = 0
   found = 0
   retval = 0
   while found = 0 and ctr < array count(guigadgets())
      inc ctr
      if guigadgets(ctr).guiid = guiid$
         found = 1
         retval = ctr
      endif
   endwhile

endfunction retval

function guiClientCreateSkin(skinname$ as string)

   local skinid
   local found as boolean
   local ctr as integer

   local SkinOptionFontColorOff as dword
   local SkinOptionFontColorHover as dword
   local SkinOptionFontColorPress as dword
   local SkinOptionColorOff as dword
   local SkinOptionColorHover as dword
   local SkinOptionColorPress as dword
   local SkinOptionWindowBorderRatio as float

   ctr = 0
   found = 0


   while ctr < array count(guiskins()) and found = 0
      inc ctr
      if guiskins(ctr).skinfile = skinname$
         skinid = guiskins(ctr).id
         found = 1
      endif
   endwhile

   if found = 0

      add to queue guiskins()
      guiskins().id = array count(guiskins())
      guiskins().skinfile = skinname$
      guiskins().winwidth = screen width()
      guiskins().winheight = screen height()

      guiskins().centerimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/center.png",guiskins().centerimage,1
      guiskins().windowimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/window.png",guiskins().windowimage,1
      guiskins().buttonimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/button.png",guiskins().buttonimage,1
      guiskins().buttonnoborderimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/button_no_border.png",guiskins().buttonnoborderimage,1
      guiskins().closeimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/close.png",guiskins().closeimage,1
      guiskins().comboimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/combo.png",guiskins().comboimage,1
      guiskins().minimizeimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/min.png",guiskins().minimizeimage,1
      guiskins().toggleonimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/toggleon.png",guiskins().toggleonimage,1
      guiskins().toggleoffimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/toggleoff.png",guiskins().toggleoffimage,1
      guiskins().sliderimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/slider.png",guiskins().sliderimage,1
      guiskins().sliderbuttonimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/slider_button.png",guiskins().sliderbuttonimage,1
      guiskins().vsliderimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/vslider.png",guiskins().vsliderimage,1
      guiskins().vsliderbuttonimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/vslider_button.png",guiskins().vsliderbuttonimage,1
      guiskins().progressbarimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/progressbar.png",guiskins().progressbarimage,1
      guiskins().progressbarholderimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/progressholder.png",guiskins().progressbarholderimage,1
      guiskins().stretchimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/stretch.png",guiskins().stretchimage,1
      guiskins().textbarimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/textbar.png",guiskins().textbarimage,1
      guiskins().titlebarimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/title.png",guiskins().titlebarimage,1
      guiskins().popupimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/popup.png",guiskins().popupimage,1
      guiskins().noneimage = guiClientFindImage() : load image GUI_SKIN_PATH+guiskins().skinfile+"/none.png",guiskins().noneimage,1

      skinid = guiskins().id

      REM SET SOME DEFAULTS

      SkinOptionFontName$="arial"
      SkinOptionFontSize=16
      SkinOptionFontColorOff=4291677645
      SkinOptionFontColorHover=4288387995
      SkinOptionFontColorPress=4294967295
      SkinOptionColorOff=4278190335
      SkinOptionColorHover=4278255615
      SkinOptionColorPress=4278255360
      SkinOptionCloseOffX=64
      SkinOptionCloseOffY=-3
      SkinOptionMinOffX=48
      SkinOptionMinOffY=-3
      SkinOptionStretchOffX=32
      SkinOptionStretchOffY=31
      SkinOptionWindowBorderRatio=0.1
      SkinOptionNametagWidth=192
      SkinOptionNametagHeight=64


      skinFilePath$ = GUI_SKIN_PATH + skinname$ + "/skin.ini"
      if file exist(skinFilePath$)

        open to read SYSTEM_FILE_GUI, skinFilePath$
            while not file end(SYSTEM_FILE_GUI)
                read string SYSTEM_FILE_GUI, dat$
                if instr(dat$,"=") > 0
                   split string dat$, "="
                   nm$ = get split word$(1)
                   vl$ = get split word$(2)
                   select nm$
                        case "SkinOptionFontName" : SkinOptionFontName$=vl$ : endcase
                        case "SkinOptionFontSize" : SkinOptionFontSize=intval(vl$) : endcase
                        case "SkinOptionFontColorOff" : SkinOptionFontColorOff=intval(vl$) : endcase
                        case "SkinOptionFontColorHover" : SkinOptionFontColorHover=intval(vl$) : endcase
                        case "SkinOptionFontColorPress" : SkinOptionFontColorPress=intval(vl$) : endcase
                        case "SkinOptionColorOff" : SkinOptionColorOff=intval(vl$) : endcase
                        case "SkinOptionColorHover" : SkinOptionColorHover=intval(vl$) : endcase
                        case "SkinOptionColorPress" : SkinOptionColorPress=intval(vl$) : endcase
                        case "SkinOptionCloseOffX" : SkinOptionCloseOffX=intval(vl$) : endcase
                        case "SkinOptionCloseOffY" : SkinOptionCloseOffY=intval(vl$) : endcase
                        case "SkinOptionMinOffX" : SkinOptionMinOffX=intval(vl$) : endcase
                        case "SkinOptionMinOffY" : SkinOptionMinOffY=intval(vl$) : endcase
                        case "SkinOptionStretchOffX" : SkinOptionStretchOffX=intval(vl$) : endcase
                        case "SkinOptionStretchOffY" : SkinOptionStretchOffY=intval(vl$) : endcase
                        case "SkinOptionWindowBorderRatio" : SkinOptionWindowBorderRatio=val(vl$) : endcase
                        case "SkinOptionNametagWidth" : SkinOptionNametagWidth = intval(vl$) : endcase
                        case "SkinOptionNametagHeight" : SkinOptionNametagHeight = intval(vl$) : endcase
                   endselect

                endif
            endwhile
        close file SYSTEM_FILE_GUI


      endif

      REM OVERRIDE DEFAULT VALUES WITH VALUES FROM SKIN.INI IF PRESENT
      REM WHERE NOT PRESENT, DEFAULTS WILL BE USED

      guiskins().fontname = SkinOptionFontName$
      guiskins().fontsize = SkinOptionFontSize
      guiskins().fontcoloroff = SkinOptionFontColorOff
      guiskins().fontcolorhover = SkinOptionFontColorHover
      guiskins().fontcolorpress = SkinOptionFontColorPress
      guiskins().coloroff = SkinOptionColorOff
      guiskins().colorhover = SkinOptionColorHover
      guiskins().colorpress = SkinOptionColorPress

      guiskins().close_offsetx = SkinOptionCloseOffX
      guiskins().close_offsety = SkinOptionCloseOffY
      guiskins().min_offsetx = SkinOptionMinOffX
      guiskins().min_offsety = SkinOptionMinOffY
      guiskins().stretch_offsetx = SkinOptionStretchOffX
      guiskins().stretch_offsety = SkinOptionStretchOffY
      guiskins().borderratio = SkinOptionWindowBorderRatio
      guiskins().nametagwidth = SkinOptionNametagWidth
      guiskins().nametagheight = SkinOptionNametagHeight


   endif

endfunction skinid

function guiClientCopyImage(sourceimageid, targetimageid, scale as float)

   if bitmap exist(guiDrawskin) then delete bitmap guiDrawskin
   set bitmap format guibmapformat
   create bitmap guiDrawskin, image width(sourceimageid) * (scale / 100.0), image height(sourceimageid) * (scale / 100.0)
   set current bitmap guiDrawskin
   if scale = 100.0
      paste image sourceimageid, 0,0, 1
      set current bitmap guiDrawskin
      get image targetimageid, 0,0,image width(sourceimageid), image height(sourceimageid), 3
   else
      sprite sourceimageid,0,0,sourceimageid
      scale sprite sourceimageid, scale
      set current bitmap guiDrawskin
      paste sprite sourceimageid,0,0
      set current bitmap guiDrawskin
      get image targetimageid, 0,0,image width(sourceimageid) * (scale / 100.0), image height(sourceimageid) * (scale / 100.0), 3
   endif
   delete bitmap guiDrawskin
   set current bitmap 0

endfunction

function guiClientBuildWindow(skinName$ as string, windowName$ as string)

   debugWrite(DEBUGINFO,"guiBuidWindow " + windowName$)

   mouseChange(MOUSE_CURSOR_WAIT)
   sync

   local mySkin as integer
   local myWindow as integer

   local guicenter as boolean
   local guimultiline as boolean
   local guicolumnpos as float
   local guicolumns as float
   local guicommand as string
   local guihasclose as boolean
   local guihasmin as boolean
   local guihasstretch as boolean
   local guihastitle as boolean
   local guihaspanel as boolean
   local guihaspopup as boolean
   local guiid as string
   local guinorebuildflag as boolean
   local guirowpos as float
   local guirows as float
   local guititle as string
   local guitype as string
   local guipasswordfield as boolean
   local guiimage as string
   local guisavemetrics as boolean
   local guitoppadding as float
   local guirightpadding as float
   local guileftpadding as float
   local guibottompadding as float
   local guiradiogroup as integer
   local guialigntop as boolean
   local guiborderimage as string
   local guislidervertical as boolean
   local guiprogresscolorid as integer
   local guislidercontrols as integer
   local guislidertype as integer
   local guitoggletype as integer
   local guisizeratiooverride as float
   local guinoborder as boolean


   REM GET OR CREATE THE SKIN
   skinName$ = guiClientGetGUIField("skinname", "default")
   mySkin = guiClientCreateSkin(skinName$)

   REM NOW PARSE THE BUILDGUI COMMAND FILE TO BUILD ALL WINDOW COMPONENTS
   guiCommandFilePath$ = GUI_PATH + windowName$ + ".ini"
   if file exist(guiCommandFilePath$)

   areaLinesLoaded = 0.0
   areaLoadLines = 0.0

     open to read SYSTEM_FILE_GUI, guiCommandFilePath$
         while not file end(SYSTEM_FILE_GUI)
             read string SYSTEM_FILE_GUI, dat$
             if instr(dat$,"=") > 0
                `debugWrite(DEBUGINFO,"GUI Build " + dat$)

                split string dat$, " "

                guicenter = 0
                guimultiline = 0
                guicolumnpos = 1
                guicolumns = 1
                guicommand = ""
                guihasclose = 1
                guihasmin = 1
                guihastitle = 1
                guihasstretch = 0
                guihaspanel = 1
                guihaspopup=0
                guiid = ""
                guinorebuildflag=0
                guirowpos = 1
                guirows = 1
                guititle = ""
                guitype = "window"
                guipasswordfield = 0
                guiimage=""
                guisavemetrics = 0
                guitoppadding = 0.0
                guibottompadding = 0.0
                guileftpadding = 0.0
                guirightpadding = 0.0
                guiradiogroup=0
                guialigntop=0
                guiborderimage=""
                guislidervertical = 0
                guiprogresscolorid = 53 `Lime
                guislidercontrols=0
                guislidertype=0
                guitoggletype=0
                guisizeratiooverride=1.0
                guinoborder=0

                for i = 1 to split count()

                  dat$ = get split word$(i)

                  if instr(dat$,"=") > 0

                     nm$ = lower$(left$(dat$,instr(dat$,"=")-1))
                     vl$ = replace$(dat$,nm$+"=","")

                      select nm$
                        case "aligntop" : guialigntop = clamp(intval(vl$),0,1) : endcase
                        case "borderimage" : guiborderimage = GUI_SKIN_PATH + skinName$ +"/" + vl$ : endcase
                        case "center" : guicenter = clamp(intval(vl$),0,1) : endcase
                        case "multiline" : guimultiline = clamp(intval(vl$),0,1) : endcase
                        case "columnpos" : guicolumnpos = val(vl$) : endcase
                        case "columns" : guicolumns = val(vl$) : endcase
                        case "command" : guicommand = vl$ : endcase
                        case "hasclose" : guihasclose = clamp(intval(vl$),0,1) : endcase
                        case "hasmin" : guihasmin = clamp(intval(vl$),0,1) : endcase
                        case "hastitle" : guihastitle = clamp(intval(vl$),0,1) : endcase
                        case "hasstretch" : guihasstretch = clamp(intval(vl$),0,1) : endcase
                        case "haspanel" : guihaspanel = clamp(intval(vl$),0,1) : endcase
                        case "haspopup" : guihaspopup = clamp(intval(vl$),0,1) : endcase
                        case "id" : guiid = vl$ : endcase
                        case "norebuild" : guinorebuildflag = clamp(intval(vl$),0,1) : endcase
                        case "rowpos" : guirowpos = val(vl$) : endcase
                        case "rows" : guirows = val(vl$) : endcase
                        case "title"
                           temp$ = guiClientGetLanguageField(vl$)
                           if temp$ = DATA_KEY_UNDEFINED
                              guititle = vl$
                           else
                              guititle = temp$
                           endif
                        endcase
                        case "type" : guitype = lower$(vl$) : endcase
                        case "passwordfield" : guipasswordfield = clamp(intval(vl$),0,1) : endcase
                        case "image" : guiimage = GUI_PATH + vl$ : endcase
                        case "skinimage" : guiimage = GUI_SKIN_PATH + skinName$ +"/" + vl$ : guinorebuildflag=1 : endcase
                        case "skillimage" : guiimage = GUI_SKILL_PATH + vl$ : guinorebuildflag=1 : endcase
                        case "goalimage" : guiimage = GUI_GOAL_PATH + vl$ : guinorebuildflag=1 : endcase
                        case "systemimage" : guiimage = GUI_SYSTEM_PATH + vl$ : guinorebuildflag=1 : endcase
                        case "savemetrics" : guisavemetrics = clamp(intval(vl$),0,1) : endcase
                        case "toppadding" : guitoppadding = clamp(intval(vl$),-100,100) / 100.0 : endcase
                        case "bottompadding" : guibottompadding = clamp(intval(vl$),-100,100) / 100.0 : endcase
                        case "rightpadding" : guirightpadding = clamp(intval(vl$),-100,100) / 100.0 : endcase
                        case "leftpadding" : guileftpadding = clamp(intval(vl$),-100,100) / 100.0 : endcase
                        case "radiogroup" : guiradiogroup = intval(vl$) : endcase
                        case "slidervertical" : guislidervertical = clamp(intval(vl$),0,1) : endcase
                        case "slidercontrols"
                           guislidercontrols = guiClientGetGadgetID(vl$)
                           debugWrite(DEBUGINFO,"Slider " + guiid + " assigned to control " + vl$ + " (" + str$(guislidercontrols)+")")
                        endcase
                        case "slidertype" : guislidertype = clamp(intval(vl$),0,1) : endcase
                        case "toggletype" : guitoggletype = intval(vl$) : endcase
                        case "sizeratiooverride" : guisizeratiooverride = val(vl$) : endcase
                        case "progresscolorid" : guiprogresscolorid = intval(vl$) : endcase
                        case "noborder" : guinoborder = clamp(intval(vl$),0,1) : endcase
                        case "guidatatitle"
                           temp$ = guiClientGetGUIDataField(vl$,DATA_KEY_UNDEFINED)
                           if temp$ <> DATA_KEY_UNDEFINED then guititle = temp$
                        endcase
                        case "guidatacommand"
                           temp$ = guiClientGetGUIDataField(vl$,DATA_KEY_UNDEFINED)
                           if temp$ <> DATA_KEY_UNDEFINED then guicommand = temp$
                        endcase

                      endselect

                  endif

                next i
                
                REM CALCULATE POSITION AND SIZE VARIABLES BASED ON CONTEXT

                if guitype = "window"
                  myX# = ((screen width() / guicolumns) * (guicolumnpos - 1)) + (screen width() * guileftpadding)
                  myY# = ((screen height() / guirows) * (guirowpos - 1)) + (screen height() * guitoppadding)
                  myW# = (screen width() / guicolumns)
                  myH# = (screen height() / guirows)
                else
                  borderSize# = guiwindows(myWindow).skin.borderratio * min(guiwindows(myWindow).w, guiwindows(myWindow).h) * 1.25
                  centerW# = guiwindows(myWindow).w - (borderSize# * 2.0)
                  centerH# = guiwindows(myWindow).h - (borderSize# * 2.0)
                  myX# = (borderSize# + (centerW# / guicolumns) * (guicolumnpos - 1)) + (centerW# * guileftpadding)
                  myY# = (borderSize# + (centerH# / guirows) * (guirowpos - 1)) + (centerH# * guitoppadding)
                  myW# = (centerW# / guicolumns) -( (centerW# * guirightpadding) + (centerW# * guileftpadding))
                  myH# = (centerH# / guirows) - ( (centerH# * guibottompadding) + (centerH# * guitoppadding))
                endif
               
               REM CHECK IMAGES AND SET TO PARENT WINDOW DEFAULTS IF NEEDED
               
               if guiborderimage = "" or (file exist(guiborderimage + ".png") = 0)
                  myboderimage = guiwindows(myWindow).skin.windowimage
               else
                  myborderimage = guiClientFindImage()
                  load image guiborderimage + ".png", myborderimage, 1
               endif
               if guiimage = "" or (file exist(guiimage + ".png") = 0)
                  mycenterimage = guiwindows(myWindow).skin.centerimage
               else
                  mycenterimage = guiClientFindImage()
                  load image guiimage + ".png", mycenterimage, 1
               endif

                REM NOW CREATE THE WINDOWS AND ITS GADGETS
                
                select guitype
                  case "window"
                     myWindow = guiClientCreateWindow(guititle,myX#,myY#,myW#,myH#,guihastitle,guihasclose,guihasmin,mySkin,guiid,guihasstretch,guisavemetrics,guihaspanel,guihaspopup)
                  endcase

                  case "panel"
                     mygadget = guiClientCreateGadget(guitype, myX#, myY#, myW#, myH#, myWindow, myborderimage, mycenterimage, guiid, 0,0,0,0)
                     guigadgets(mygadget).gadgettype = GUI_PANEL
                  endcase

                  case "label"
                     mygadget = guiClientCreateTextArea(guititle,myX#,myY#,myW#,myH#,guicenter,myWindow,guiid,guimultiline,1,guialigntop,0,guisizeratiooverride)
                     guigadgets(mygadget).gadgettype = GUI_LABEL
                     guigadgets(mygadget).displayPercent = 1.0
                  endcase
                  case "input"
                     mygadget = guiClientCreateTextArea(guititle,myX#,myY#,myW#,myH#,guicenter,myWindow,guiid,guimultiline,0,guialigntop,0,guisizeratiooverride)
                     guigadgets(mygadget).gadgettype = GUI_TEXTFIELD
                     guigadgets(mygadget).displayPercent = 1.0
                  endcase
                  case "button"

                     if guitoggletype = 1
                        imageOverrideID = guiwindows(myWindow).skin.toggleoffimage
                     else
                        imageOverrideID = 0
                     endif

                     mygadget = guiClientCreateButton(guititle,myX#,myY#,myW#,myH#,myWindow,guiid,guicommand,guiimage,"",0,imageOverrideID,guinoborder,guisizeratiooverride)
                     guigadgets(mygadget).gadgettype = GUI_BUTTON
                  endcase

                  case "slider"
                     mygadget = guiClientCreateGadget("slider",myX#,myY#,myW#,myH#, myWindow, 0,0,guiid, 0,0,100,guislidervertical)
                     guigadgets(mygadget).gadgetidcontrols = guislidercontrols
                     guigadgets(mygadget).slidertype = guislidertype
                     guigadgets(mygadget).displayPercent = 1.0
                     guigadgets(mygadget).gadgettype = GUI_SLIDER
                  endcase

                  case "progressbar"
                     mygadget = guiClientCreateGadget(guitype, myX#, myY#, myW#, myH#, myWindow, 0, 0, guiid, guiprogresscolorid,0,0,0)                     
                     guigadgets(mygadget).gadgettype = GUI_PROGRESSBAR_HOLDER
                  endcase

                endselect


                if guitype <> "window"
                     guigadgets(mygadget).columns = guicolumns
                     guigadgets(mygadget).norebuildflag = guinorebuildflag
                     guigadgets(mygadget).rows = guirows
                     guigadgets(mygadget).columnpos = guicolumnpos
                     guigadgets(mygadget).rowpos = guirowpos
                     guigadgets(mygadget).topPadding = guitoppadding
                     guigadgets(mygadget).bottomPadding = guibottompadding
                     guigadgets(mygadget).leftPadding = guileftpadding
                     guigadgets(mygadget).rightPadding = guirightpadding
                     guigadgets(mygadget).password_field = guipasswordfield
                     guigadgets(mygadget).radioGroup = guiradiogroup
                     guigadgets(mygadget).alignTop = guialigntop
                     guigadgets(mygadget).toggletype = guitoggletype
                     guigadgets(mygadget).togglestate = 0
                endif

             endif
         endwhile
     close file SYSTEM_FILE_GUI
   endif

   if bitmap exist(guiWindowskin) then delete bitmap guiWindowskin
   if bitmap exist(guiDrawskin) then delete bitmap guiDrawskin
   if bitmap exist(guiCenterskin) then delete bitmap guiCenterskin
   if bitmap exist(guiBorderskin) then delete bitmap guiBorderskin

   set current bitmap 0

   mouseChange(MOUSE_CURSOR_DEFAULT)


endfunction

function guiClientCreateWindow(title as string,x as integer, y as integer, w as integer, h as integer, hastitle as boolean, hasclose as boolean, hasmin as boolean, skinid as integer, myguiid as string, hasstretch as boolean, savemetrics as boolean, haspanel as boolean, haspopup as boolean)

   local windowid
   local language$


   add to queue guiwindows()
   windowid = array count(guiwindows())
   guiwindows().windowid = windowid
   debugWrite(DEBUGINFO,"GUICREATEWINDOW " + str$(windowid))



   guiwindows().x = x
   if savemetrics = 1
      temp$ = guiClientGetGUIField("optionWindowMetricX"+myguiid,str$(x))
      if temp$ <> DATA_KEY_UNDEFINED then guiwindows().x = intval(temp$)
      guiClientSetGUIField("optionWindowMetricX"+myguiid, str$(guiwindows().x))
   endif

   guiwindows().y = y
   if savemetrics = 1
      temp$ = guiClientGetGUIField("optionWindowMetricY"+myguiid, str$(y))
      if temp$ <> DATA_KEY_UNDEFINED then guiwindows().y = intval(temp$)
      guiClientSetGUIField("optionWindowMetricY"+myguiid, str$(guiwindows().y))
   endif

   guiwindows().w = w
   if savemetrics = 1
      temp$ = guiClientGetGUIField("optionWindowMetricW"+myguiid, str$(w))
      if temp$ <> DATA_KEY_UNDEFINED then guiwindows().w = clamp(intval(temp$),100, screen width())
      guiClientSetGUIField("optionWindowMetricW"+myguiid, str$(guiwindows().w))
   endif

   guiwindows().h = h
   if savemetrics = 1
      temp$ = guiClientGetGUIField("optionWindowMetricH"+myguiid, str$(h))
      if temp$ <> DATA_KEY_UNDEFINED then guiwindows().h = clamp(intval(temp$),100,screen height())
      guiClientSetGUIField("optionWindowMetricH"+myguiid, str$(guiwindows().h))
   endif

   if (guiwindows().x + guiwindows().w) > screen width()
      guiwindows().x = screen width() - guiwindows().w
   endif

   if (guiwindows().y + guiwindows().h) > screen width()
      guiwindows().y = screen width() - guiwindows().h
   endif


   guiwindows().titleflag = hastitle
   guiwindows().closeflag = hasclose
   guiwindows().minflag = hasmin
   guiwindows().stretchflag = hasstretch
   guiwindows().panelflag = haspanel
   guiwindows().popupflag = haspopup
   guiwindows().guiid = myguiid

   language$ = guiClientGetLanguageField(title)
   if language$ = DATA_KEY_UNDEFINED
      guiwindows().title = title
   else
      guiwindows().title = language$
   endif


   guiwindows().skin = guiskins(skinid)
   guiwindows().alpha = 255

   if guiwindows().titleflag = 1

      add to queue guigadgets()
      guigadgets().parent = guiwindows(windowid)
      guigadgets().gadgettype = GUI_TITLEBAR
      guigadgets().dragflag = 1
      guigadgets().imageid = guiClientFindImage()
      guiClientFixImage(guiwindows().skin.titlebarimage, 0, (guiwindows().w * .9), image height(guiwindows().skin.titlebarimage), 0.0, 1,guigadgets().imageid,windowid,"",1.0)
      sprite guigadgets().imageid,guiwindows().x,guiwindows().y,guigadgets().imageid
      guigadgets().x = (guiwindows().w * .05)
      guigadgets().y = 0
      guigadgets().w = (guiwindows().w * .9)
      guigadgets().h = image height(guiwindows().skin.titlebarimage)
      guiwindows().skin.titleheight = sprite height(guigadgets().imageid)
      hide sprite guigadgets().imageid

   endif


   if guiwindows().minflag = 1

      add to queue guigadgets()
      guigadgets().parent = guiwindows(windowid)
      guigadgets().gadgettype = GUI_MINIMIZE
      guigadgets().imageid = guiClientFindImage()
      sprite guigadgets().imageid,guiwindows().x+guiwindows().w-guiwindows().skin.min_offsetx,guiwindows().y+guiwindows().skin.min_offsety,guiwindows().skin.minimizeimage
      guigadgets().x = guiwindows().w-guiwindows().skin.min_offsetx
      guigadgets().y = guiwindows().skin.min_offsety
      guigadgets().w = image width(guiwindows().skin.minimizeimage)
      guigadgets().h = image height(guiwindows().skin.minimizeimage)
      hide sprite guigadgets().imageid

   endif


   if guiwindows().closeflag = 1

      add to queue guigadgets()
      guigadgets().parent = guiwindows(windowid)
      guigadgets().gadgettype = GUI_CLOSE
      guigadgets().imageid = guiClientFindImage()
      sprite guigadgets().imageid,guiwindows().x+guiwindows().w-guiwindows().skin.close_offsetx,guiwindows().y+guiwindows().skin.close_offsety,guiwindows().skin.closeimage
      guigadgets().x = guiwindows().w-guiwindows().skin.close_offsetx
      guigadgets().y = guiwindows().skin.close_offsety
      guigadgets().w = image width(guiwindows().skin.closeimage)
      guigadgets().h = image height(guiwindows().skin.closeimage)
      hide sprite guigadgets().imageid

   endif


   if guiwindows().stretchflag = 1

      add to queue guigadgets()
      guigadgets().parent = guiwindows(windowid)
      guigadgets().gadgettype = GUI_STRETCH
      guigadgets().dragflag = 1
      guigadgets().imageid = guiClientFindImage()
      sprite guigadgets().imageid,guiwindows().x+guiwindows().w-guiwindows().skin.stretch_offsetx,guiwindows().y+guiwindows().h-guiwindows().skin.stretch_offsety,guiwindows().skin.stretchimage
      guigadgets().x = guiwindows().w-guiwindows().skin.stretch_offsetx
      guigadgets().y = guiwindows().h-guiwindows().skin.stretch_offsety
      guigadgets().w = image width(guiwindows().skin.stretchimage)
      guigadgets().h = image height(guiwindows().skin.stretchimage)
      hide sprite guigadgets().imageid

   endif

   if guiwindows().popupflag = 1

      add to queue guigadgets()
      guigadgets().parent = guiwindows(windowid)
      guigadgets().gadgettype = GUI_POPUP
      guigadgets().dragflag = 0
      guigadgets().multiline = 0
      guigadgets().centerme = 1
      guigadgets().imageid = guiClientFindImage()
      sprite guigadgets().imageid,guiwindows().x+1,guiwindows().y+1,guiwindows().skin.popupimage
      guigadgets().baseimageid = guiClientFindImage()
      guiClientCopyImage(guiwindows().skin.popupimage,guigadgets().baseimageid,100.0)
      guigadgets().x = 1
      guigadgets().y = 1
      guigadgets().w = 100
      guigadgets().h = guiwindows().skin.fontsize
      hide sprite guigadgets().imageid
      REM SAVE THE SPRITE ID OF THE POPUP IN THE WINDOW
      REM SO A SEARCH IS NOT NECESSARY
      guiwindows().popupimageid = guigadgets().imageid
      guiwindows().popupgadgetid = array count(guigadgets())
      guiwindows().popuptext = ""

   endif


   REM ALWAYS BUILD PANEL AFTER ALL OTHER SPECIAL GADGETS
   REM SO THAT SPECIAL ACTIONS WILL BE RECOGNIZED BEFORE
   REM DEFAULT DRAG ACTION ON PANELS

   if guiwindows().panelflag = 1
      temp = guiClientCreateGadget("panel",0,0,guiwindows().w,guiwindows().h,windowid,guiwindows().skin.windowimage,guiwindows().skin.centerimage,"",0,0,0,0)
   endif


   guiwindows().savemetrics = savemetrics


endfunction windowid

function guiClientCreateGadget(myGadgetType as string,x,y,w,h,windowid,myborderimage,mycenterimage,myguiid as string,myidxcolor,sliderbeginrange,sliderendrange,slidervertical)
   
   local gadgetid
   add to queue guigadgets()
   gadgetid = array count(guigadgets())
   guigadgets(gadgetid).parent = guiwindows(windowid)
   guigadgets(gadgetid).guiid = myguiid
   guigadgets(gadgetid).x = x
   guigadgets(gadgetid).y = y
   guigadgets(gadgetid).w = w
   guigadgets(gadgetid).h = h
   guigadgets(gadgetid).dragflag = 0
   guigadgets(gadgetid).imageid = guiClientFindImage()
   
   REM MAKE MODIFICATIONS FOR DIFFERENT
   REM GADGET TYPES
   
   select myGadgetType
      case "panel"
         guigadgets(gadgetid).x = 0
         guigadgets(gadgetid).y = 0
         guigadgets(gadgetid).dragflag = 1
         guiClientFixImage(myborderimage, mycenterimage, w, h, guiwindows(windowid).skin.borderratio,0,guigadgets(gadgetid).imageid,windowid,"",1.0)
      endcase
      case "progressbar"
         guigadgets(gadgetid).label = ""
         guigadgets(gadgetid).norebuildflag = 1
         guiClientFixImage(guiwindows(windowid).skin.progressbarholderimage, 0, w, h, guiwindows(windowid).skin.borderratio,0,guigadgets(gadgetid).imageid,windowid,"",1.0)
      endcase
      case "slider"
         guigadgets(gadgetid).dragflag = 1
         if slidervertical = 1
            guigadgets(gadgetid).rangey = h
            guigadgets(gadgetid).rangex = 0
            guiClientFixImage(guiwindows(windowid).skin.vsliderimage, 0, guigadgets(gadgetid).w,guigadgets(gadgetid).h, 0.0, 0,guigadgets(gadgetid).imageid,windowid,guigadgets(gadgetid).label,1.0)
         else
            guigadgets(gadgetid).rangey = 0
            guigadgets(gadgetid).rangex = w
            guiClientFixImage(guiwindows(windowid).skin.sliderimage, 0, guigadgets(gadgetid).w,guigadgets(gadgetid).h, 0.0, 1,guigadgets(gadgetid).imageid,windowid,guigadgets(gadgetid).label,1.0)
         endif
      endcase
   endselect

   REM MAKE THE SPRITE
   
   if guigadgets(gadgetid).imageid <> 0
      if image exist(guigadgets(gadgetid).imageid)
         sprite guigadgets(gadgetid).imageid,guiwindows(windowid).x,guiwindows(windowid).y,guigadgets(gadgetid).imageid
         hide sprite guigadgets(gadgetid).imageid
      endif
   endif
   
   REM MAKE ADDITIONAL SPRITES OR MAKE
   REM MORE MODIFICATIONS BASED ON TYPE
   
   select myGadgetType
   
      case "progressbar"
         set sprite priority guigadgets(gadgetid).imageid, 7
         add to queue guigadgets()
         guigadgets().gadgettype = GUI_PROGRESSBAR
         guigadgets().parent = guigadgets(gadgetid).parent
         guigadgets(gadgetid).progressbar = array count(guigadgets())
         guigadgets().x = guigadgets(gadgetid).x + 2 : guigadgets().y = guigadgets(gadgetid).y
         guigadgets().w = guigadgets(gadgetid).w - 4 : guigadgets().h = guigadgets(gadgetid).h
         guigadgets().norebuildflag = 1
         guigadgets().imageid = guiClientFindImage()
         guiClientFixImage(guiwindows(windowid).skin.progressbarimage, 0, guigadgets().w,guigadgets().h, 0.0, 0,guigadgets().imageid,windowid,"",1.0)
         sprite guigadgets().imageid, guiwindows(windowid).x+guigadgets().x, guiwindows(windowid).y+guigadgets().y,guigadgets().imageid
         if myidxcolor > 0 and myidxcolor <= array count(guicolors())
             set sprite diffuse guigadgets().imageid, rgbr(guicolors(myidxcolor).color),rgbg(guicolors(myidxcolor).color),rgbb(guicolors(myidxcolor).color)
         endif
         set sprite priority guigadgets().imageid, 6
         hide sprite guigadgets().imageid
      endcase
      
      case "slider"
         add to queue guigadgets()
         guigadgets().gadgettype = GUI_SLIDER_BUTTON
         guigadgets().parent = guigadgets(gadgetid).parent
         guigadgets(gadgetid).scrollbar = array count(guigadgets())
         guigadgets().imageid = guiClientFindImage()
         if slidervertical = 1
            guigadgets().x = guigadgets(gadgetid).x + guigadgets(gadgetid).w - 12
            guigadgets().y = guigadgets(gadgetid).y + guigadgets(gadgetid).h - (guigadgets(gadgetid).w / 3.0) - 12
            sprite guigadgets().imageid, guiwindows(windowid).x+guigadgets().x, guiwindows(windowid).y+guigadgets().y,guiwindows(windowid).skin.vsliderbuttonimage
         else
            guigadgets().x = guigadgets(gadgetid).x + guigadgets(gadgetid).h + 12
            guigadgets().y = guigadgets(gadgetid).y + guigadgets(gadgetid).h - 12
            sprite guigadgets().imageid, guiwindows(windowid).x+guigadgets().x, guiwindows(windowid).y+guigadgets().y,guiwindows(windowid).skin.sliderbuttonimage
         endif
         hide sprite guigadgets().imageid
      endcase
      
   endselect

endfunction gadgetid
    
function guiClientCreateButton(title as string,x,y,w,h,windowid,myguiid as string, mycommand as string, myimage as string, myborderimage as string, myidxcolor,imageOverrideID as integer, noborder as boolean, sizeratiooverride as float)

      local gadgetid
      add to queue guigadgets()
      gadgetid = array count(guigadgets())
      guigadgets().parent = guiwindows(windowid)
      guigadgets().guiid = myguiid
      guigadgets().command = mycommand


      language$ = guiClientGetLanguageField(title)
      if language$ = DATA_KEY_UNDEFINED
         guigadgets().label = title
      else
         guigadgets().label = language$
      endif

      guigadgets().x = x
      guigadgets().y = y
      guigadgets().w = w
      guigadgets().h = h



      guigadgets().imageid = guiClientFindImage()
      if myimage="" or (file exist(myimage + ".png") = 0)
         if imageOverrideID = 0
            if noborder = 1
               guiClientFixImage(guiwindows(windowid).skin.buttonnoborderimage, 0, guigadgets().w,guigadgets().h, 0.0, 1,guigadgets().imageid,windowid,guigadgets().label,sizeratiooverride)
            else
               guiClientFixImage(guiwindows(windowid).skin.buttonimage, 0, guigadgets().w,guigadgets().h, 0.0, 1,guigadgets().imageid,windowid,guigadgets().label,sizeratiooverride)
            endif
         else
            guigadgets().norebuildflag = 1
            guiClientCopyImage(imageOverrideID,guigadgets().imageid,100.0)
         endif
      else
         guigadgets().norebuildflag = 1
         load image myimage + ".png", guigadgets().imageid,1
         if myborderimage <> "" and file exist(myborderimage + ".png")
            if bitmap exist(guiDrawskin)
               delete bitmap guiDrawskin
            endif
            create bitmap guiDrawskin,  image height(guigadgets().imageid), image width(guigadgets().imageid)
            set current bitmap guiDrawskin
            set bitmap format guibmapformat
            paste image guigadgets().imageid, 0, 0, 1
            set current bitmap guiDrawskin
            get image guigadgets().imageid,0,0,image height(guigadgets().imageid), image width(guigadgets().imageid),3
            if mycolor <> 0
               if sprite exist(guiTempSprite)
                  delete sprite guiTempSprite
               endif
               sprite guiTempSprite,0,0,guigadgets().imageid
               if myidxcolor > 0 and myidxcolor <= array count(guicolors())
                  set sprite diffuse guiTempSprite, rgbr(guicolors(myidxcolor).color),rgbg(guicolors(myidxcolor).color),rgbb(guicolors(myidxcolor).color)
               endif
               paste sprite guiTempSprite, 0,0
            endif
            load image myborderimage + ".png", guigadgets().imageid,1
            paste image guigadgets().imageid, 0, 0, 1
            set current bitmap guiDrawskin
            get image guigadgets().imageid,0,0,image height(guigadgets().imageid), image width(guigadgets().imageid),3
            sprite guigadgets().imageid, 0,0, guigadgets().imageid
            delete bitmap guiDrawskin
            set current bitmap 0
         endif
      endif

      if guigadgets().imageid <> 0
         if image exist(guigadgets().imageid) = 1
            sprite guigadgets().imageid,guiwindows(windowid).x+guigadgets().x,guiwindows(windowid).y+guigadgets().y,guigadgets().imageid
            hide sprite guigadgets().imageid
         endif
      endif

      if guiTempSprite <> 0
         if sprite exist(guiTempSprite)
            hide sprite guiTempSprite
            delete sprite guiTempSprite
         endif
      endif


endfunction gadgetid

function guiClientCreateTextArea(title as string, x as integer, y as integer, w as integer, h as integer, centerme as boolean, windowid as integer, myguiid as string, multiline as boolean, label as boolean, alignTop as boolean, colorOverride as dword, sizeRatioOverride as float)

      local gadgetid
      add to queue guigadgets()
      gadgetid = array count(guigadgets())
      guigadgets().parent = guiwindows(windowid)

      guigadgets().gadgettype = GUI_TEXTFIELD
      language$ = guiClientGetLanguageField(title)
      if language$ = DATA_KEY_UNDEFINED
         guigadgets().label = title
      else
         guigadgets().label = language$
      endif

      guigadgets().x = x
      guigadgets().y = y
      guigadgets().w = w
      guigadgets().h = h
      guigadgets().centerme = centerme
      guigadgets().multiline = multiline
      guigadgets().guiid = myguiid
      guigadgets().alignTop = alignTop


      guigadgets().imageid = guiClientFindImage()
      guigadgets().baseimageid = guiClientFindImage()


      if label <> 1
         guiClientFixImage(guiwindows(windowid).skin.textbarimage, 0, guigadgets().w,guigadgets().h, 0.0, 1,guigadgets().baseimageid,windowid,"",1.0)
      endif

      if bitmap exist(guiDrawskin) = 1
         delete bitmap guiDrawskin
      endif

      set bitmap format guibmapformat
      CREATE BITMAP guiDrawskin,guigadgets().w,guigadgets().h
      set current bitmap guiDrawskin

      if label <> 1
         if guigadgets().baseimageid <> 0
            if image exist(guigadgets().baseimageid)
               paste image guigadgets().baseimageid,0,0
            endif
         endif
      endif

      set text font guiwindows(windowid).skin.fontname
      if colorOverride = 0
         ink guiwindows(windowid).skin.fontcoloroff,rgb(0,0,0)
      else
         ink colorOverride, rgb(0,0,0)
      endif
      if guigadgets().multiline = 1
         if sizeRatioOverride = 0
            set text size guiwindows(windowid).skin.fontsize
         else
            set text size (guiwindows(windowid).skin.fontsize * sizeRatioOverride)
         endif
         REM ALWAYS USE displayPercent OF 1.0 WHEN CREATING NEW TEXT AREAS
         guiClientCenterText(guigadgets().label,guigadgets().w,guigadgets().h,guigadgets().centerme,(w * 0.1),guigadgets().alignTop,1.0)
      else
         if sizeRatioOverride = 0
            set text size (guiwindows(windowid).skin.fontsize * 1.25)
         else
            set text size (guiwindows(windowid).skin.fontsize * sizeRatioOverride)
         endif
         if guigadgets().centerme = 1
            center text (guigadgets().w / 2.0), (guigadgets().h / 2.0) - (text height(guigadgets().label) / 2.0),guigadgets().label
         else
            text (w * 0.1), (guigadgets().h / 2.0) - (text height(guigadgets().label) / 2.0),guigadgets().label
         endif
      endif
      get image guigadgets().imageid,0,0,guigadgets().w,guigadgets().h,3
      delete bitmap guiDrawskin
      set current bitmap 0

      if guigadgets().imageid <> 0
         if image exist(guigadgets().imageid)
            sprite guigadgets().imageid,guiwindows(windowid).x+guigadgets().x,guiwindows(windowid).y+guigadgets().y,guigadgets().imageid
            hide sprite guigadgets().imageid
         endif
      endif

endfunction gadgetid

function guiClientSetTextArea(gadgetid as integer, title as string, colorOverride as dword, sizeRatioOverride as float)

   local windowid as integer

   if gadgetid < 1 then exitfunction
   if guigadgets(gadgetid).w = 0 or guigadgets(gadgetid).h = 0 then exitfunction

   windowid = guigadgets(gadgetid).parent.windowid

   language$ = guiClientGetLanguageField(title)
   if language$ = DATA_KEY_UNDEFINED
      guigadgets(gadgetid).label = title
   else
      guigadgets(gadgetid).label = language$
   endif

   guiClientSetInputField(guigadgets(gadgetid).guiid,guigadgets(gadgetid).label)

   if guigadgets(gadgetid).imageid <> 0
      if image exist(guigadgets(gadgetid).imageid)
         delete image guigadgets(gadgetid).imageid
      endif
   endif

   if bitmap exist(guiDrawskin) = 1
      delete bitmap guiDrawskin
   endif

   set bitmap format guibmapformat
   CREATE BITMAP guiDrawskin,guigadgets(gadgetid).w,guigadgets(gadgetid).h
   set current bitmap guiDrawskin

   if guigadgets(gadgetid).baseimageid <> 0
      if image exist(guigadgets(gadgetid).baseimageid)
         paste image guigadgets(gadgetid).baseimageid,0,0
         if guigadgets(gadgetid).gadgettype = GUI_POPUP
            if image width(guigadgets(gadgetid).baseimageid) <> guigadgets(gadgetid).w
               REM RESIZE THE BASE IMAGE AND REPASTE FOR POPUPS
               sprite guigadgets(gadgetid).baseimageid, 0, 0, guigadgets(gadgetid).baseimageid
               scale# = guigadgets(gadgetid).w / image width(guigadgets(gadgetid).baseimageid) * 100.0
               stretch sprite guigadgets(gadgetid).baseimageid, scale#, 100.0
               paste sprite guigadgets(gadgetid).baseimageid, 0, 0
            endif
         endif
      endif
   endif

   if colorOverride = 0
      ink guiwindows(windowid).skin.fontcoloroff,rgb(0,0,0)
   else
      ink colorOverride, rgb(0,0,0)
   endif

   if guigadgets(gadgetid).multiline = 1

      if sizeRatioOverride = 0
         set text size guiwindows(windowid).skin.fontsize * .75
      else
         set text size (guiwindows(windowid).skin.fontsize * sizeRatioOverride)
      endif

      temp$ = guigadgets(gadgetid).label
      if guigadgets(gadgetid).password_field = 1 then temp$ = padright$("","x",len(temp$))
      guiClientCenterText(temp$,guigadgets(gadgetid).w,guigadgets(gadgetid).h,guigadgets(gadgetid).centerme,(guigadgets(gadgetid).w * 0.1),guigadgets(gadgetid).aligntop,guigadgets(gadgetid).displayPercent)
   else

      if sizeRatioOverride = 0
         set text size (guiwindows(windowid).skin.fontsize * 1.25)
      else
         set text size (guiwindows(windowid).skin.fontsize * sizeRatioOverride)
      endif

      temp$ = guigadgets(gadgetid).label
      if guigadgets(gadgetid).password_field = 1 then temp$ = padright$("","x",len(temp$))
      if guigadgets(gadgetid).centerme = 1
         center text (guigadgets(gadgetid).w / 2.0), (guigadgets(gadgetid).h/2.0) - (text height(temp$) / 2.0),temp$
      else
         text (guigadgets(gadgetid).w * 0.1), (guigadgets(gadgetid).h / 2.0) - (text height(temp$) / 2.0),temp$
      endif
   endif

   if guigadgets(gadgetid).imageid <> 0
      get image guigadgets(gadgetid).imageid,0,0,guigadgets(gadgetid).w,guigadgets(gadgetid).h,3
   endif
   delete bitmap guiDrawskin
   set current bitmap 0

   if guigadgets(gadgetid).imageid <> 0
      if image exist(guigadgets(gadgetid).imageid)
         sprite guigadgets(gadgetid).imageid,guiwindows(windowid).x+guigadgets(gadgetid).x,guiwindows(windowid).y+guigadgets(gadgetid).y,guigadgets(gadgetid).imageid
      endif
   endif

   if guigadgets(gadgetid).baseimageid <> 0
      if sprite exist(guigadgets(gadgetid).baseimageid)
         hide sprite guigadgets(gadgetid).baseimageid
      endif
   endif


endfunction

function guiClientCenterText(text$ as string, width as integer, height as float, center as boolean, padding as float, alignTop as boolean, displayPercent as float)

   REM FITS TEXT INTO A PARTICULAR WIDTH AND HEIGHT
   REM BY INSERTING CARRIAGE RETURNS AND STARTS
   REM DISPLAY AT THE DISPLAYPERCENT (FOR SCROLLING TEXT)
   REM BOTTOM ALIGNS BY DEFAULT

   if len(text$) = 0
      exitfunction
   endif

   width = clamp(width,32,screen width()) - (padding * 2.0)
   height = clamp(height,32,screen height()) - (padding * 2.0)
   displayPercent = clamp(displayPercent,0.0,1.0)

   if text width(text$) < width and instr(text$, chr$(13)) = 0
      REM TEXT IS SMALLER THAN AVAILABLE WIDTH AND HAS
      REM NO CARRIAGE RETURNS, JUST PRINT IT
      if center = 1
         center text width/2.0 + padding, (height/2.0) - (text height(text$) / 2.0) + padding,text$
      else
         text padding, padding, text$
      endif

      exitfunction
   endif

   local textToProcess$ as string
   local nextLine$ as string
   local textHeight as integer
   local textWidth as integer

   local dim textLine() as string
   add to queue textLine()

   local dim textFixed() as string
   add to queue textFixed()



   textToProcess$ = text$

   REM IF THE STRING DOES NOT HAVE CARRIAGE RETURNS
   REM THEN ADD IT IN WHOLE TO THE TEXTLINE() ARRAY
   if instr(textToProcess$, chr$(13)) = 0
      add to queue textLine()
      textLine() = textToProcess$
   endif

   REM IF THE STRING ALREADY HAS CARRIAGE
   REM RETURNS, BREAK IT UP INTO LINES BY
   REM THOSE RETURNS
   while len(textToProcess$) > 0 and instr(textToProcess$, chr$(13)) <> 0
      temp = instr(textToProcess$, chr$(13))
      add to queue textLine()
      textLine() = left$(textToProcess$,temp)
      textToProcess$ = remove$(textToProcess$,textLine())
      if len(textToProcess$) > 0 and instr(textToProcess$, chr$(13)) = 0
         REM ADD THE LAST LINE TOO
         add to queue textLine()
         textLine() = textToProcess$
      endif
   endwhile


   REM NOW WE NEED TO ADD ADDITIONAL
   REM RETURNS TO BREAKUP LINES TO FIT
   REM THE SPACE PROVIDED

   i=0
   while i < array count(textLine())
      inc i
      nextLine$ = ""
      while width < text width(textLine(i))
         REM THIS LINE NEEDS ANOTHER BREAK
         REM FIGURE OUT WHERE TO PUT IT
         temp = LAST INSTR( textLine(i), " ")
         temp$ = textLine(i)
         if temp < 2
            REM NO SPACES OR SPACE IS FIRST AVATAR, JUST SPLIT IT IN HALF
            temp2$ = left$( textLine(i) , len(textLine(i))/2.0 )
            textLine(i) = trimright$(temp2$)
            nextLine$ = remove$(temp$,textLine(i)) + nextLine$
         else
            textLine(i) = trimright$(left$(textLine(i),temp))
            nextLine$ = remove$(temp$,textLine(i)) + nextLine$
         endif

      endwhile

      add to queue textFixed()
      textFixed() = textLine(i)

      if width < text width(nextLine$)
         textLine(i) = nextLine$
         dec i
      else
         add to queue textFixed()
         textFixed() = nextLine$
      endif
   endwhile


   k#=0.0
   for i = 1 to array count(textFixed())
      k# = k# + text height(textFixed(i)) + 1.0
   next i


   if k# > height
      percentShow# = height / k#
      linesShow = (array count(textFixed()) * percentShow#)
      startline = (array count(textFixed()) - linesShow)
      endline = (array count(textFixed()))
   else
      startline = 1
      endline = array count(textFixed())
   endif


   if displayPercent <> 1.0 and k# > height
      temp = (endline * displayPercent) + 1
      temp2 = (endline - temp)
      startline = startline - temp2
      endline = temp
      startline = clamp(startline, 1, endline)
      `debugWrite(DEBUGINFO,"guiClientCenterText endline set to " + str$(endline) + "(-" + str$(temp2) + ")")
   endif

   if alignTop = 1

      j = 0
      for i = startline to endline
         if i>0 and i<=array count(textFixed())
           if center = 1
              center text (width/2.0) + padding, j + padding, textFixed(i)
           else
              text padding, j+padding, textFixed(i)
           endif
           j = j + ( text height(textFixed(i)) + 1.0)
           endif
      next i

   else

      j = height - ( text height(textFixed(endline)) + 1.0)
      for i = endline to startline step -1
         if i>0 and i<=array count(textFixed())
            if center = 1
               center text (width/2.0) + padding, j + padding, textFixed(i)
            else
               text padding, j+padding, textFixed(i)
            endif
            j = j - ( text height(textFixed(i)) + 1.0)
         endif
      next i

   endif


   `debugWrite(DEBUGINFO,"Text Update TextFixedLines: " + str$(array count(textFixed())) + " of height " + str$(k#) + " into " + str$(height) + " %Show " + str$(percentShow#) + " next line at " + str$(j) + " sl " + str$(startline) + " el " + str$(endline))

   undim textLine()
   undim textFixed()

endfunction

function guiClientMinWindow(windowid as integer)

   if guiwindows(windowid).minimized = 1

      guiwindows(windowid).minimizing = 0
      guiwindows(windowid).restoring = 1

   else

      guiwindows(windowid).minimizing = 1
      guiwindows(windowid).restoring = 0


   endif

endfunction

function guiClientCloseWindow(windowid as integer)
   guiwindows(windowid).closing = 1
   guiwindows(windowid).closed = 0
endfunction

function guiClientActiveWindowObstructs(windowid as integer)
   local obstructs as boolean

   obstructs = 0

   REM ACTIVE WINDOW CANNOT OBSTRUCT ITSELF
   if windowid = GUI_ACTIVE_WIN then exitfunction obstructs

   REM SCREEN VIRTUAL WINDOW CANNOT OBSTRUCT ANYTHING ELSE
   if GUI_ACTIVE_WIN = guiScreenWindowID then exitfunction obstructs

   if guiwindows(GUI_ACTIVE_WIN).minimized = 0
      if mousex() >= guiwindows(GUI_ACTIVE_WIN).x and mousex() <= guiwindows(GUI_ACTIVE_WIN).x+guiwindows(GUI_ACTIVE_WIN).w and mousey() >= guiwindows(GUI_ACTIVE_WIN).y and mousey() <= guiwindows(GUI_ACTIVE_WIN).y+guiwindows(GUI_ACTIVE_WIN).h
         obstructs = 1
      endif
   else
      if mousex() >= guiwindows(GUI_ACTIVE_WIN).x and mousex() <= guiwindows(GUI_ACTIVE_WIN).x+guiwindows(GUI_ACTIVE_WIN).w and mousey() >= guiwindows(GUI_ACTIVE_WIN).y and mousey() <= guiwindows(GUI_ACTIVE_WIN).y+guiwindows(GUI_ACTIVE_WIN).skin.titleheight
         obstructs=1
      endif
   endif

endfunction obstructs

function guiClientFixImage(sourceimageid as integer, centerimageid as integer, targetWidth as float, targetHeight as float, borderRatio as float, hOnly as boolean,targetimageid as integer, windowid as integer, label as string, fontratiooverride as float)

   REM CUTS UP AN IMAGE INTO 9 PARTS AND TILES MIDDLE
   REM SECTIONS TO FIT TARGET SIZE WITHOUT STRETCHING
   REM OR IF HONLY IS SET TO 1 THEN IT SPLITS THE
   REM IMAGE INTO 3 PARTS AND TILES THE MIDDLE
   REM HORIZONTALLY ONLY

   local GUI_Drawskin as integer
   local GUI_Windowskin as integer
   local GUI_Centerskin as integer

   GUI_Drawskin = 1
   GUI_Windowskin = 2
   GUI_Centerskin = 3



   if sourceimageid = 0 then exitfunction

   if image exist(sourceimageid) = 0 then exitfunction

   if bitmap exist(GUI_Drawskin) = 1 then delete bitmap GUI_Drawskin
   if bitmap exist(GUI_Windowskin) = 1 then delete bitmap GUI_Windowskin
   if bitmap exist(GUI_Centerskin) = 1 then delete bitmap GUI_Centerskin

   set bitmap format guibmapformat
   CREATE BITMAP GUI_Windowskin,image width(sourceimageid),image height(sourceimageid)
   paste image sourceimageid, 0, 0, 1

   OneThirdW = (bitmap width(GUI_Windowskin)/3.0)
   OneThirdH = (bitmap height(GUI_Windowskin)/3.0)

   if targetWidth < image width(sourceimageid)
      REM DESTINATION WIDTH IS SMALLER THAN SOUCE
      OneThirdTargetW = ceil(ceil(targetWidth)/3.0)
   else
      OneThirdTargetW = OneThirdW
   endif

   if targetHeight < image height(sourceimageid)
      REM DESTINATION HEIGHT IS SMALLER THAN SOUCE
      OneThirdTargetH = ceil(ceil(targetHeight)/3.0)
   else
      OneThirdTargetH = OneThirdH
   endif

   OneThirdTargetW = min(OneThirdTargetW,OneThirdTargetH)
   OneThirdTargetH = min(OneThirdTargetW,OneThirdTargetH)


   ws1 = 0
   ws2 = OneThirdW
   ws3 = bitmap width(GUI_Windowskin) - OneThirdW
   ws4 = bitmap width(GUI_Windowskin)

   hs1 = 0
   hs2 = OneThirdH
   hs3 = bitmap height(GUI_Windowskin) - OneThirdH
   hs4 = bitmap height(GUI_Windowskin)

   wt1 = 0
   wt2 = OneThirdTargetW
   wt3 = targetWidth - OneThirdTargetW
   wt4 = targetWidth

   ht1 = 0
   ht2 = OneThirdTargetH
   ht3 = targetHeight - OneThirdTargetH
   ht4 = targetHeight


   REM --------------------
   REM MAKE CENTER OF IMAGE
   REM --------------------

   if bitmap exist(GUI_Drawskin) = 1 then delete bitmap GUI_Drawskin

   if bitmap exist(GUI_Centerskin) = 1 then delete bitmap GUI_Centerskin

   set bitmap format guibmapformat
   CREATE BITMAP GUI_Drawskin, screen width(), screen height()

   if centerimageid > 0

      if image exist(centerimageid)=1

         CREATE BITMAP GUI_Centerskin, image width(centerimageid), image height(centerimageid)

         if bitmap exist(GUI_Centerskin)

            set current bitmap GUI_Centerskin
            paste image centerimageid, 0, 0
         endif
      endif
   endif


   tmpImg1 = guiClientFindImage()

   if hOnly=0

      if centerimageid > 0

         if bitmap exist(GUI_Centerskin)
            ws# = bitmap width(GUI_Centerskin)
            hs# = bitmap height(GUI_Centerskin)
            for n = 0 to ceil(targetHeight/hs#) + 2
               for i = 0 to ceil(targetWidth/ws#) + 2

                  copy bitmap GUI_Centerskin,0,0,ws#,hs#,GUI_Drawskin,ws#*i,hs#*n,ws#*(i+1),hs#*(n+1)

               next i
            next n
         endif
      else
         ws# = OneThirdW
         hs# = OneThirdH

         copy bitmap GUI_Windowskin,ws2,hs2,ws3,hs3,GUI_Drawskin,wt2,ht2,wt3,ht3
      endif

      set current bitmap GUI_Drawskin
      `debugWrite(DEBUGINFO,"guiClientFixImage1 : tw: " + str$(targetWidth) + ", th: " + str$(targetHeight) + ", gwm: " + str$((image width(sourceimageid) * borderRatio * 2.0)) + ", ghm: " + str$( (image height(sourceimageid) * borderRatio * 2.0) ) )
      get image tmpImg1,0,0,targetWidth - (image width(sourceimageid) * borderRatio * 2.0), targetHeight - (image height(sourceimageid) * borderRatio * 2.0), 3

   else


      copy bitmap GUI_Windowskin,ws2,hs1,ws3,hs4,GUI_Drawskin,wt2,ht1,wt3,ht4
      set current bitmap GUI_Drawskin
      get image tmpImg1,0,0,targetWidth,targetHeight,3

   endif



   REM ------------------------------
   REM MAKE CORNERS OR SIDES OF IMAGE
   REM ------------------------------
   if bitmap exist(GUI_Drawskin) = 1 then delete bitmap GUI_Drawskin
   set bitmap format guibmapformat
   CREATE BITMAP GUI_Drawskin,targetWidth, targetHeight
   tmpImg2 = guiClientFindImage()

   if hOlnly = 0


         for i = wt2 to wt3 step OneThirdTargetW
            `top side
            copy bitmap GUI_Windowskin,ws2,hs1,ws3,hs2,GUI_Drawskin,i,ht1,i+OneThirdTargetW,ht2
            `bottomside
            copy bitmap GUI_Windowskin,ws2,hs3,ws3,hs4,GUI_Drawskin,i,ht3,i+OneThirdTargetW,ht4
         next

         for i = ht2 to ht3 step OneThirdTargetH
            `leftside
            copy bitmap GUI_Windowskin,ws1,hs2,ws2,hs3,GUI_Drawskin,wt1,i,wt2,i+OneThirdTargetH
            `rightside
            copy bitmap GUI_Windowskin,ws3,hs2,ws4,hs3,GUI_Drawskin,wt3,i,wt4,i+OneThirdTargetH
         next

         `top left corner
         copy bitmap GUI_Windowskin,ws1,hs1,ws2,hs2,GUI_Drawskin,wt1,ht1,wt2,ht2
         `top right corner
         copy bitmap GUI_Windowskin,ws3,hs1,ws4,hs2,GUI_Drawskin,wt3,ht1,wt4,ht2
         `bottom left corner
         copy bitmap GUI_Windowskin,ws1,hs3,ws2,hs4,GUI_Drawskin,wt1,ht3,wt2,ht4
         `bottom right corner
         copy bitmap GUI_Windowskin,ws3,hs3,ws4,hs4,GUI_Drawskin,wt3,ht3,wt4,ht4


         get image tmpImg2,0,0,targetWidth,targetHeight,3

   else


      copy bitmap GUI_Windowskin,ws1,hs1,ws2,hs4,GUI_Drawskin,wt1,ht1,wt2,ht4
      copy bitmap GUI_Windowskin,ws3,hs1,ws4,hs4,GUI_Drawskin,wt3,ht1,wt4,ht4

      get image tmpImg2,0,0,targetWidth,targetHeight,3

   endif

   if bitmap exist(GUI_Drawskin) = 1 then delete bitmap GUI_Drawskin
   set bitmap format guibmapformat
   CREATE BITMAP GUI_Drawskin,targetWidth, targetHeight

   if hOnly=0
      paste image tmpImg1, (image width(sourceimageid) * borderRatio), (image height(sourceimageid) * borderRatio), 1
   else
      paste image tmpImg1, 0, 0, 1
   endif

   paste image tmpImg2, 0, 0, 1

   if label <> ""

      set text font guiwindows(windowid).skin.fontname
      set text size guiwindows(windowid).skin.fontsize * fontratiooverride
      ink guiwindows(windowid).skin.fontcoloroff,rgb(0,0,0)
      center text (targetWidth/2.0),(targetHeight/2.0)  - (text height(label) / 2.0),label

   endif

   get image targetimageid,0,0,targetWidth,targetHeight,3

   delete image tmpImg1
   delete image tmpImg2

   if bitmap exist(GUI_Drawskin) = 1 then delete bitmap GUI_Drawskin
   if bitmap exist(GUI_Windowskin) = 1 then delete bitmap GUI_Windowskin
   if bitmap exist(GUI_Centerskin) = 1 then delete bitmap GUI_Centerskin

   set current bitmap 0

endfunction OneThirdTargetW

function guiClientMessageBoxShow(msg$,buttonFlag,btnText1$,btnText2$,btnText3$,command1$,command2$,command3$)

   guiClientShowWindow(GUI_WINDOW_MESSAGEBOX)

   local lblmsg as integer
   lblmsg = guiClientGetGadgetID("labelMessageBoxMessage")
   local lbl1 as integer
   lbl1 = guiClientGetGadgetID("labelMessageBox1")
   local lbl2 as integer
   lbl2 = guiClientGetGadgetID("labelMessageBox2")
   local lbl3 as integer
   lbl3 = guiClientGetGadgetID("labelMessageBox3")

   local btn1 as integer
   btn1 = guiClientGetGadgetID("buttonMessageBox1")
   local btn2 as integer
   btn2 = guiClientGetGadgetID("buttonMessageBox2")
   local btn3 as integer
   btn3 = guiClientGetGadgetID("buttonMessageBox3")


   guiClientSetTextArea(lblmsg,msg$,0,0)
   guiClientSetTextArea(lbl1,btnText1$,0,0)
   guiClientSetTextArea(lbl2,btnText2$,0,0)
   guiClientSetTextArea(lbl3,btnText3$,0,0)

   guigadgets(btn1).command = command1$
   guigadgets(btn2).command = command2$
   guigadgets(btn3).command = command3$


  if (buttonFlag && 4) = 0
      set sprite alpha guigadgets(lbl1).imageid, 0
      hide sprite guigadgets(lbl1).imageid
      guigadgets(lbl1).stayhiddenflag = 1
      set sprite alpha guigadgets(btn1).imageid, 0
      hide sprite guigadgets(btn1).imageid
      guigadgets(btn1).stayhiddenflag = 1
  else
      set sprite alpha guigadgets(lbl1).imageid, 255
      show sprite guigadgets(lbl1).imageid
      guigadgets(lbl1).stayhiddenflag = 0
      set sprite alpha guigadgets(btn1).imageid, 255
      show sprite guigadgets(btn1).imageid
      guigadgets(btn1).stayhiddenflag = 0
  endif

  if (buttonFlag && 2) = 0
      set sprite alpha guigadgets(lbl2).imageid, 0
      hide sprite guigadgets(lbl2).imageid
      guigadgets(lbl2).stayhiddenflag = 1
      set sprite alpha guigadgets(btn2).imageid, 0
      hide sprite guigadgets(btn2).imageid
      guigadgets(btn2).stayhiddenflag = 1
  else
      set sprite alpha guigadgets(lbl2).imageid, 255
      show sprite guigadgets(lbl2).imageid
      guigadgets(lbl2).stayhiddenflag = 0
      set sprite alpha guigadgets(btn2).imageid, 255
      show sprite guigadgets(btn2).imageid
      guigadgets(btn2).stayhiddenflag = 0
endif

  if (buttonFlag && 1) = 0
      set sprite alpha guigadgets(lbl3).imageid, 0
      hide sprite guigadgets(lbl3).imageid
      guigadgets(lbl3).stayhiddenflag = 1
      set sprite alpha guigadgets(btn3).imageid, 0
      hide sprite guigadgets(btn3).imageid
      guigadgets(btn3).stayhiddenflag = 1
  else
      set sprite alpha guigadgets(lbl3).imageid, 255
      show sprite guigadgets(lbl3).imageid
      guigadgets(lbl3).stayhiddenflag = 0
      set sprite alpha guigadgets(btn3).imageid, 255
      show sprite guigadgets(btn3).imageid
      guigadgets(btn3).stayhiddenflag = 0
  endif

endfunction

function guiUpdateFrontDrop()

    local fadeValue as integer

    if guiFadeState = GUI_FADE_NONE

       hide sprite guiPanelFrontDrop
       hide sprite guiProgressFrontDrop
       hide sprite guiProgressHolderFrontDrop

    else
       show sprite guiPanelFrontDrop
       set sprite priority guiPanelFrontDrop,98

       select guiFadeState
         case GUI_FADE_TO_BLACK
            guiFadePercent = guiFadePercent + systemSharedFrameMoved(100.0)
            hide sprite guiProgressFrontDrop
            hide sprite guiProgressHolderFrontDrop
            if guiFadePercent > 100.0
               guiFadePercent = 100.0
               guiFadeState = GUI_FADE_BLACK_OUT
               debugWrite(DEBUGINFO,"GUI Fade State set to GUI_FADE_BLACK_OUT")
            endif
         endcase
         case GUI_FADE_BLACK_OUT
            guiFadePercent = 100.0
            if areaLinesLoaded >= areaLoadLines
               guiFadeState = GUI_FADE_FROM_BLACK

               guiClientSwitchToWindow(GUI_WINDOW_MAIN)
               playerClientTeleport(tidPlayer)
               `playerClientShow(tidPlayer)
               cameraClientToPlayer(tidPlayer)
               dataSharedUpdateFieldFast(tidPlayer,"gravity","1")
               debugWrite(DEBUGINFO,"GUI Fade State set to GUI_FADE_FROM_BLACK")

            else
               `guiUpdateLoadProgress(areaLinesLoaded/areaLoadLines)

               show sprite guiProgressHolderFrontDrop
               set sprite alpha guiProgressHolderFrontDrop, 255
               set sprite priority guiProgressHolderFrontDrop, 100

               show sprite guiProgressFrontDrop
               set sprite alpha guiProgressFrontDrop, 255
               set sprite priority guiProgressFrontDrop, 99

            endif
         endcase
         case GUI_FADE_FROM_BLACK
            guiFadePercent = guiFadePercent - systemSharedFrameMoved(50.0)
            hide sprite guiProgressFrontDrop
            hide sprite guiProgressHolderFrontDrop
            if guiFadePercent < 0.0
               guiFadeState = GUI_FADE_NONE
               guiFadePercent = 0.0

               systemMode = systemModeAfterTeleport

               debugWrite(DEBUGINFO,"GUI Fade State set to GUI_FADE_NONE")

            endif
         endcase
       endselect

       if guiFadePercent => 0.0
         SET SPRITE ALPHA guiPanelFrontDrop, int(clamp((guiFadePercent * 2.55),0.0,255.0))
       endif

    endif

endfunction

function guiClientSetProgressBar(progressBarName$ as string, percentRequested as float)

   local stretchSize# as float

   REM percentRequested SHOULD BE A REAL VALUE
   REM BETWEEN 0.0 AND 100.0
   `debugWrite(DEBUGINFO,"guiUpdateProgressBar " + progressBarName$ + " called with value " + str$(percentRequested))

   percentRequested = clamp(percentRequested,0.1,100.0)

   gadgetid = guiClientGetGadgetID(progressBarName$)
   gadgetid = guigadgets(gadgetid).progressbar

   if gadgetid > 0 and gadgetid <= array count(guigadgets())
      if guigadgets(gadgetid).imageid <> 0
         if sprite exist(guigadgets(gadgetid).imageid)
            if sprite visible(guigadgets(gadgetid).imageid) = 0 then rehide = 1

            stretchSize# = clamp((percentRequested * 256.0),1.0,25600.0)

            stretch sprite guigadgets(gadgetid).imageid, percentRequested, 100.0
            `debugWrite(DEBUGINFO,"guiUpdateProgressBar stretch successful.")
            if rehide
               hide sprite guigadgets(gadgetid).imageid
            endif
         else
            `debugWrite(DEBUGINFO,"[SYSTEM] WARN : guiUpdateProgressBar sprite does not exit " + str$(guigadgets(gadgetid).imageid))
         endif
      else
         `debugWrite(DEBUGINFO,"[SYSTEM] WARN : guiUpdateProgressBar imageid is 0.")
      endif
   else
      `debugWrite(DEBUGINFO,"[SYSTEM] WARN : guiUpdateProgressBar bad gagetid " + str$(gadgetid))
   endif

endfunction

function guiClientUpdateGadgets()


   REM TAKE CARE OF DRAGGING GADGETS
   REM THIS HAPPENS EITHER WHEN THE MOUSE IS OR IS NOT
   REM INSIDE THE BOUNDS OF THE GADGET AND SO
   REM MUST BE TAKEN CARE OF OUTSIDE THE MAIN
   REM GADGET LOOP

   if mousePickGadget <> 0
      if mousePickGadget <= array count(guigadgets())
         temp = guigadgets(mousePickGadget).imageid
         windowid = guigadgets(mousePickGadget).parent.windowid
         if windowid = mousePickWindow and sprite exist(temp)

            `text 500, 84, "mousePickGadget " + str$(mousePickGadget) + " type " + str$(guigadgets(mousePickGadget).gadgettype)
            `text 500, 96, "mousePickWindow " + guiwindows(mousePickWindow).guiid
            if guigadgets(mousePickGadget).dragflag = 1

               systemGuiController = 1

               select guigadgets(mousePickGadget).gadgettype

                  case GUI_BUTTON
                     guigadgets(mousePickGadget).x = clamp((mousex()-guiDragOffsetX),0,screen width()-64)
                     guigadgets(mousePickGadget).y = clamp((mousey()-guiDragOffsetY),0,screen height()-64)
                  endcase

                  case GUI_TITLEBAR
                     guiwindows(windowid).x = clamp((mousex()-guiDragOffsetX),0,(screen width()-guiwindows(windowid).w))
                     guiwindows(windowid).y = clamp((mousey()-guiDragOffsetY),0,(screen height()-guiwindows(windowid).h))
                  endcase

                  case GUI_PANEL
                     guiwindows(windowid).x = clamp((mousex()-guiDragOffsetX),0,(screen width()-guiwindows(windowid).w))
                     guiwindows(windowid).y = clamp((mousey()-guiDragOffsetY),0,(screen height()-guiwindows(windowid).h))
                  endcase

                  case GUI_STRETCH
                     if abs(mouseMoveMax#) > 1.0
                        guiwindows(windowid).w = clamp((mousex()-guiDragOffsetX),200,screen width())
                        guiwindows(windowid).h = clamp((mousey()-guiDragOffsetY),100,screen height())
                        `guiClientRebuildWindow(windowid)
                     endif
                  endcase

                  case GUI_SLIDER
                     temp = guigadgets(mousePickGadget).scrollbar
                     if temp > 0 and temp <= array count(guigadgets())

                        if guigadgets(mousePickGadget).rangey <> 0
                           rem this is a vertical scrollbar
                           guigadgets(temp).x = guigadgets(mousePickGadget).x + guigadgets(mousePickGadget).w - 6
                           yMin = guigadgets(mousePickGadget).y  + (guigadgets(mousePickGadget).w * 0.33) - 6
                           yMax = guigadgets(mousePickGadget).y + guigadgets(mousePickGadget).h - (guigadgets(mousePickGadget).w * 0.33) - 6
                           guigadgets(temp).y = clamp((mousey()-guiwindows(windowid).y)-6,yMin,yMax)
                           guigadgets(mousePickGadget).displayPercent = (guigadgets(temp).y - yMin) / (yMax - yMin)
                           if guigadgets(mousePickGadget).gadgetidcontrols <> 0
                              temp2 = guigadgets(mousePickGadget).gadgetidcontrols
                              if temp2 > 0 and temp2 <= array count(guigadgets())
                                 if guigadgets(temp2).gadgettype = GUI_LABEL
                                    if abs(guigadgets(temp2).displayPercent - guigadgets(mousePickGadget).displayPercent) > 0.05
                                       guigadgets(temp2).displayPercent = guigadgets(mousePickGadget).displayPercent
                                       guiClientSetTextArea(temp2, guigadgets(temp2).label, 0, 0)
                                    endif
                                 endif
                              endif
                           endif
                        else
                           rem this is a horizontal scrollbar
                           guigadgets(temp).y = guigadgets(mousePickGadget).y + guigadgets(mousePickGadget).h - 6
                           xMin = guigadgets(mousePickGadget).x + (guigadgets(mousePickGadget).h * 0.33) - 6
                           xMax = guigadgets(mousePickGadget).x + guigadgets(mousePickGadget).w - (guigadgets(mousePickGadget).h * 0.33) - 6
                           guigadgets(temp).x = clamp((mousex()-guiwindows(windowid).x)-6,xMin,xMax)
                           guigadgets(temp).displayPercent = (guigadgets(temp).x - xMin) / (xMax - xMin)
                        endif

                     endif
                  endcase
               endselect
            endif
         endif
      endif
   endif

   REM FOR THE ACTIVE WINDOW, HIDE THE POPUP BY
   REM DEFAULT IF IT HAS A POPUP
   if GUI_ACTIVE_WIN <> 0
      if guiwindows(GUI_ACTIVE_WIN).popupflag = 1
         if guiwindows(GUI_ACTIVE_WIN).popupimageid <> 0
            if sprite exist(guiwindows(GUI_ACTIVE_WIN).popupimageid)
               hide sprite guiwindows(GUI_ACTIVE_WIN).popupimageid
            endif
         endif
      endif
   endif

   REM DO THE SAME FOR THE SCREEN VIRTUAL WINDOW
   if guiScreenWindowID <> 0
      if guiwindows(guiScreenWindowID).popupimageid <> 0
         if sprite exist(guiwindows(guiScreenWindowID).popupimageid)
            hide sprite guiwindows(guiScreenWindowID).popupimageid
         endif
      endif
   endif



local i
for i = 1 to array count(guigadgets())
   
if guigadgets(i).killed = 0 and guigadgets(i).imageid > 0

windowid = guigadgets(i).parent.windowid

if guiwindows(windowid).hiddenflag=0 and guiwindows(windowid).closed=0 and guiwindows(windowid).killed=0 and sprite exist(guigadgets(i).imageid)


   if sprite visible(guigadgets(i).imageid)


      inGadget = 0

      if mousex() >= (guigadgets(i).x + guiwindows(windowid).x)
         if mousex() <= (guigadgets(i).x + guiwindows(windowid).x + guigadgets(i).w)
            if mousey() >= (guigadgets(i).y + guiwindows(windowid).y)
               if mousey() <= (guigadgets(i).y + guiwindows(windowid).y + guigadgets(i).h)

                  inGadget = 1
                  systemGuiController = 1

               endif
            endif
         endif
      endif


      if inGadget = 1

         if mouseclick() = 1

            REM FIRST DEAL WITH WINDOW ACTIVE STATE MANAGMENT
            REM AND DRAG OBJECT STATE MANAGEMENT
            REM FOR ALL GADGETS PRESSED
            if guiwindows(windowid).active = 1 or guiwindows(windowid).virtualflag=1

               if mousePickGadget = 0

                  if guigadgets(i).gadgettype <> GUI_PANEL and guigadgets(i).gadgettype <> GUI_LABEL and guigadgets(i).gadgettype <> GUI_POPUP
                     mousePickGadget = i
                     mousePickWindow = windowid
                  else
                     TEMPmousePickGadget = i
                     TEMPmousePickWindow = windowid
                  endif

                  REM guiDragStart IS ALWAYS SET SO
                  REM THAT WE CAN TELL THE DIFFERENCE
                  REM BETWEEN CLICKING A BUTTON AND
                  REM DRAGGING IT
                  if guigadgets(i).gadgettype <> GUI_PANEL
                     guiDragStartX = mousex()
                     guiDragStartY = mousey()
                  else
                     TEMPguiDragStartX = mousex()
                     TEMPguiDragStartY = mousey()
                  endif


                  if guigadgets(i).dragflag = 1

                     select guigadgets(i).gadgettype
                        case GUI_TITLEBAR
                           guiDragOffsetX = mousex() - guiwindows(windowid).x
                           guiDragOffsetY = mousey() - guiwindows(windowid).y
                        endcase
                        case GUI_STRETCH
                           guiDragOffsetX = mousex() - guiwindows(windowid).w
                           guiDragOffsetY = mousey() - guiwindows(windowid).h
                        endcase
                        case GUI_SLIDER
                           REM WE WANT THE SLIDER BUTTON TO SNAP
                           REM TO WHEREVER WE CLICK ALONG THE SLIDER
                           guiDragOffsetX = 0
                           guiDragOffsetY = 0
                        endcase
                        case default
                           guiDragOffsetX = mousex() - sprite x(guigadgets(i).imageid)
                           guiDragOffsetY = mousey() - sprite y(guigadgets(i).imageid)
                        endcase
                     endselect

                  endif

               endif

            else `window not active

               if guiKeepActiveWindow = 0
                  if guiClientActiveWindowObstructs(guiwindows(windowid).windowid) = 0
                     if guiwindows(windowid).hiddenflag = 0
                        guiClientSetActiveWindow(guiwindows(windowid).windowid)
                     endif
                  endif
               endif

            endif `window active or virtual check


            select guigadgets(i).gadgettype
               case GUI_BUTTON
                  guiClientPressButtonNoCommand(i)
                  GUI_ACTIVE_GADGET = i
               endcase
               case GUI_CLOSE
                  guiClientPressButtonNoCommand(i)
                  GUI_ACTIVE_GADGET = i
               endcase
               case GUI_MINIMIZE
                  guiClientPressButtonNoCommand(i)
                  GUI_ACTIVE_GADGET = i
               endcase
               case GUI_SLIDER
                  guiClientPressButtonNoCommand(i)
                  guiClientPressButtonNoCommand(guigadgets(i).scrollbar)
                  GUI_ACTIVE_GADGET = i
               endcase
               case GUI_TEXTFIELD
                  clear entry buffer
                  guiClientPressButtonNoCommand(i)
                  GUI_ACTIVE_GADGET = i
               endcase

            endselect

         else

            rem mouse not clicked but is inside bounds of object

            if guiwindows(windowid).active = 1 or guiwindows(windowid).virtualflag=1

               REM FOR ALL GADGETS EXCEPT LABELS AND NAMETAGS, SWITCH TO THE HOVER COLOR

               if (guigadgets(i).imageid <> 0) and (guigadgets(i).gadgettype <> GUI_LABEL) and (guigadgets(i).gadgettype <> GUI_NAMETAG) and (guigadgets(i).norebuildflag=0)
                  if sprite exist(guigadgets(i).imageid)
                     if guigadgets(i).radiogroup = 0 and guigadgets(i).toggletype = 0
                        set sprite diffuse guigadgets(i).imageid, rgbr(guigadgets(i).parent.skin.colorhover),rgbg(guigadgets(i).parent.skin.colorhover),rgbb(guigadgets(i).parent.skin.colorhover)
                        guigadgets(i).state = GUI_STATE_HOVER
                     else
                        REM IF RADIO GROUP OR TOGGLE, ONLY HOVER WHEN OFF
                        if guigadgets(i).state = GUI_STATE_OFF
                           set sprite diffuse guigadgets(i).imageid, rgbr(guigadgets(i).parent.skin.colorhover),rgbg(guigadgets(i).parent.skin.colorhover),rgbb(guigadgets(i).parent.skin.colorhover)
                           guigadgets(i).state = GUI_STATE_HOVER
                        endif
                     endif
                  endif
               endif


               REM NOW DO SPECIAL THINGS FOR SPECIAL GADGETS
               select guigadgets(i).gadgettype
                  case GUI_BUTTON
                     if GUI_ACTIVE_GADGET = i
                        REM A BUTTON WAS PRESSED AND RELEASED
                        REM WHILE REMAINING INSIDE SAME BUTTON
                        
                        cmd$ = commandSharedUnmask(guigadgets(i).command)

                        if abs(mousex() - guiDragStartX) <= guiDragSensitivity
                           if abs(mousey() - guiDragStartY) <= guiDragSensitivity
                           
                              commandSharedParse(cmd$)

                           endif
                        endif
                        GUI_ACTIVE_GADGET = 0
                     endif

                     REM HOVERING MOUSEUP OVER A BUTTON
                     REM BUT NOT CLICKED - SHOW AND UPDATE POPUP
                     REM IF IT EXISTS
                     if guigadgets(i).popuptext <> ""
                        if guiwindows(windowid).popupflag = 1
                           if guiwindows(windowid).popupimageid <> 0
                              if sprite exist(guiwindows(windowid).popupimageid)

                                 guigadgets(guiwindows(windowid).popupgadgetid).x = (mousex() - guiwindows(windowid).x) - (text width(guigadgets(i).popuptext) * 0.5)
                                 guigadgets(guiwindows(windowid).popupgadgetid).y = (mousey() - guiwindows(windowid).y) - guiwindows(windowid).skin.fontsize
                                 if guiKeepActiveWindow = 0
                                    sprite guigadgets(guiwindows(windowid).popupgadgetid).imageid,guigadgets(guiwindows(windowid).popupgadgetid).x+guiwindows(windowid).x,guigadgets(guiwindows(windowid).popupgadgetid).y+guiwindows(windowid).y,sprite image(guiwindows(windowid).popupimageid)
                                    show sprite guiwindows(windowid).popupimageid
                                    set sprite priority guiwindows(windowid).popupimageid, 20
                                 endif

                                 if guiwindows(windowid).popuptext <> guigadgets(i).popuptext
                                    if ticker(guiTickerPopup,1) > 0
                                       guiwindows(windowid).popuptext = guigadgets(i).popuptext
                                       if guiwindows(windowid).popupgadgetid <> 0

                                          guigadgets(guiwindows(windowid).popupgadgetid).w = text width(guiwindows(windowid).popuptext) * 1.5
                                          guiClientSetTextArea(guiwindows(windowid).popupgadgetid,guigadgets(i).popuptext,0,0)

                                       endif
                                    endif
                                 endif
                              endif
                           endif
                        endif
                     endif ` popuptext
                 endcase

                 case GUI_CLOSE
                     if GUI_ACTIVE_GADGET = i
                        REM CLOSE BUTTON WAS PRESSED AND RELEASED
                        REM WHILE REMAINING INSIDE SAME BUTTON
                        guiClientCloseWindow(windowid)
                        GUI_ACTIVE_GADGET = 0
                     endif
                 endcase

                 case GUI_MINIMIZE
                     if GUI_ACTIVE_GADGET = i
                        REM CLOSE BUTTON WAS PRESSED AND RELEASED
                        REM WHILE REMAINING INSIDE SAME BUTTON
                        guiClientMinWindow(windowid)
                        GUI_ACTIVE_GADGET = 0
                     endif
                 endcase

                 case GUI_SLIDER
                     if GUI_ACTIVE_GADGET = i
                        GUI_ACTIVE_GADGET = 0
                     endif
                 endcase
              endselect

           else

           endif `second window active or virtual check

         endif `mouse clicked check (mouse was not clicked)

      else `mouse is not inside gadget bounds

         REM FOR ALL GADGETS EXCEPT LABELS, POPUPS AND NAMETAGS, SWITCH TO THE OFF COLOR
         if (guigadgets(i).imageid <> 0) and (guigadgets(i).gadgettype <> GUI_LABEL) and (guigadgets(i).gadgettype <> GUI_POPUP) and (guigadgets(i).gadgettype <> GUI_NAMETAG)

            if sprite exist(guigadgets(i).imageid) and guigadgets(i).norebuildflag=0
               if guigadgets(i).radiogroup = 0 and guigadgets(i).toggletype = 0
                  REM FOR NON-RADIO GROUP NON-TOGGLE, ONLY OFF IF NOT ALREADY OFF
                  if guigadgets(i).state <> GUI_STATE_OFF
                     set sprite diffuse guigadgets(i).imageid, rgbr(guigadgets(i).parent.skin.coloroff),rgbg(guigadgets(i).parent.skin.coloroff),rgbb(guigadgets(i).parent.skin.coloroff)
                     guigadgets(i).state = GUI_STATE_OFF
                  endif
               else
                  REM IF RADIO GROUP OR TOGGLE, ONLY OFF WHEN HOVER OR NOT SET
                  if guigadgets(i).state = GUI_STATE_HOVER or guigadgets(i).state = 0
                     set sprite diffuse guigadgets(i).imageid, rgbr(guigadgets(i).parent.skin.coloroff),rgbg(guigadgets(i).parent.skin.coloroff),rgbb(guigadgets(i).parent.skin.coloroff)
                     guigadgets(i).state = GUI_STATE_OFF
                  endif
               endif
            endif

         endif

      endif `mouse inside gadget bounds check


      REM AT THIS POINT IT IS POSSIBLE THAT THE WINDOW WAS
      REM DELETED, IF SO, JUST EXIT
      if array index valid(guiwindows(windowid)) = 0 then exitfunction

      REM IT IS ALSO POSSIBLE THAT JUST THE GADGET WAS
      REM DELETED, IF SO, JUST EXIT
      if guigadgets(i).imageid = 0 then exitfunction


      REM UPDATE POSITIONS OF ALL SPRITES EVEN WHEN MOUSE IS NOT HOVERING
      REM OVER THE SPRITE

      select guigadgets(i).gadgettype

         case GUI_PANEL
            rem special positioning required
            sprite guigadgets(i).imageid,guigadgets(i).x+guiwindows(windowid).x,guigadgets(i).y+guiwindows(windowid).y,sprite image(guigadgets(i).imageid)
         endcase
         case GUI_MINIMIZE
            rem special positioning required
            sprite guigadgets(i).imageid,guiwindows(windowid).x+guiwindows(windowid).w-guiwindows(windowid).skin.min_offsetx,guiwindows(windowid).y+guiwindows(windowid).skin.min_offsety,sprite image(guigadgets(i).imageid)
         endcase
         case GUI_CLOSE
            rem special positioning required
            sprite guigadgets(i).imageid,guiwindows(windowid).x+guiwindows(windowid).w-guiwindows(windowid).skin.close_offsetx,guiwindows(windowid).y+guiwindows(windowid).skin.close_offsety,sprite image(guigadgets(i).imageid)
         endcase
         case GUI_STRETCH
            rem special positioning required
            sprite guigadgets(i).imageid,guiwindows(windowid).x+guiwindows(windowid).w-guiwindows(windowid).skin.stretch_offsetx,guiwindows(windowid).y+guiwindows(windowid).h-guiwindows(windowid).skin.stretch_offsety,sprite image(guigadgets(i).imageid)
         endcase
         case GUI_NAMETAG
            rem special positioning required
            tid = guigadgets(i).objectAttachTID
            if tid >0
               mydbpid = intval(dataSharedGetFieldFast(tid, "dbpid"))
               if mydbpid > 0
                  if object exist(mydbpid)
                     if object in screen(mydbpid)
                        position object idxCrosshair, object position x(mydbpid), object position y(mydbpid) + (object size y(mydpbid,1) * 0.5), object position z(mydbpid)
                        guigadgets(i).x = object screen x(idxCrosshair) - (guiskins(guiSkinIDX).nametagwidth * 0.5)
                        guigadgets(i).y = object screen y(idxCrosshair) - (guiskins(guiSkinIDX).nametagheight + 8)
                        sprite guigadgets(i).imageid,guigadgets(i).x,guigadgets(i).y,sprite image(guigadgets(i).imageid)
                     else
                        REM HIDE NAMETAG
                        hide sprite guigadgets(i).imageid
                     endif
                  endif
               endif
            endif
         endcase

         case default
            rem position the gadget normally and set to normal image
            sprite guigadgets(i).imageid,guigadgets(i).x+guiwindows(windowid).x,guigadgets(i).y+guiwindows(windowid).y,sprite image(guigadgets(i).imageid)
         endcase

      endselect


      REM HANDLE INPUT TO TEXT FIELDS
      if guigadgets(i).gadgettype = GUI_TEXTFIELD

         if i = GUI_ACTIVE_GADGET and guiwindows(windowid).active = 1

            REM WE ARE EDITING A TEXT FIELD
            if (systemMode && SYSTEM_MODE_CHAT_ACTIVE) = 0
               systemSharedGameModeAdd(SYSTEM_MODE_CHAT_ACTIVE)
            endif

            if keyboardKeyDown = 0

               if (KEYSTATE(47)=1) and controlkey() = 1
                  `CNTRL-V
                  temp$ = get clipboard$()
                  if temp$ <> ""
                     temp$ = keyboardSharedSanitize(temp$)
                     guigadgets(i).label = temp$
                     guiClientSetTextArea(i,guigadgets(i).label,0,0)
                     clear entry buffer
                  endif
               endif

               if (scancode() = 1)
                  guigadgets(i).label = ""
                  guiClientSetTextArea(i,guigadgets(i).label,0,0)
                  clear entry buffer
               endif


               if (scancode() = 14 or scancode() = 211)
                  if len(guigadgets(i).label) > 1
                     guigadgets(i).label = left$(guigadgets(i).label,len(guigadgets(i).label)-1)
                     guiClientSetTextArea(i,guigadgets(i).label,0,0)
                  else
                     if len(guigadgets(i).label) = 1
                        guigadgets(i).label = ""
                        guiClientSetTextArea(i,guigadgets(i).label,0,0)
                     endif
                  endif
                  temp$=entry$(0)
                  clear entry buffer
               endif


               if scancode() = 28

                  if guigadgets(i).guiid = GUI_CHAT_ENTER
                     sendChat = 1

                     if fast left$(guigadgets(i).label,1) = "/"
                        commandSharedParse(guigadgets(i).label)
                        sendChat = 0
                     endif

                     if sendChat = 1
                        netClientSendChat(networkClientCurrentChannel$,guigadgets(i).label)
                     endif
                     guigadgets(i).label = ""
                     guiClientSetTextArea(i,guigadgets(i).label,0,0)
                  endif
                  clear entry buffer

               endif

            endif

            temp$ = entry$()
            if temp$ <> "" and scancode() <> 14 and scancode() <> 211
               if len(temp$) = 1
                  temp$ = keyboardSharedSanitizeCharacter(temp$)
               else
                  temp$ = keyboardSharedSanitize(temp$)
               endif
               if temp$ <> ""
                  guigadgets(i).label = guigadgets(i).label + temp$
                  guiClientSetTextArea(i,guigadgets(i).label,0,0)
               endif
               clear entry buffer
            endif

            if scancode() <> 0
               if keyboardKeyDown = 0
                  keyboardKeyDown = 1
                  keyboardNextKeyRepeat = timer() + keyboardRepeatDelay
               endif
            endif


         endif `gadget and window active check

      endif `sprite is text field check

   else `sprite is not visible

      REM FOR NAMETAGS WE MAY NEED TO MAKE THE SPRITE VISIBLE
      REM AGAIN IF IT IS NOT VISIBLE BUT ITS ATTACHED OBJECT IS
      REM ON SCREEN
      if guigadgets(i).gadgettype = GUI_NAMETAG
        tid = guigadgets(i).objectAttachTID
         if tid >0
            mydbpid = intval(dataSharedGetFieldFast(tid, "dbpid"))
            if mydbpid > 0
               if object exist(mydbpid)
                  if object in screen(mydpbid)
                     show sprite guigadgets(i).imageid
                  endif
               endif
            endif
         endif
      endif

   endif ` sprite visible check

endif ` gadget parent window not killed closed or hidden check

endif `gadget not killed and imageid > 0 check

next i

guiKeepActiveWindow = 0

REM IF NOTHING ELSE WAS FOUND
REM GO AHEAD AND PICK THE PANEL
REM THIS ALLOWS PANELS TO BE DRAGGED
REM BY CLICKING ON PANEL DIRECTLY
if mousePickGadget = 0 and TEMPmousePickGadget <> 0
   mousePickGadget = TEMPmousePickGadget
   guiDragStartX = TEMPguiDragStartX
   guiDragStartY = TEMPguiDragStartY
   mousePickWindow = TEMPmousePickWindow
endif

endfunction

function guiClientFadeWindow(windowid as integer)


      if guiwindows(windowid).minimizing = 1 and guiwindows(windowid).minimized = 0
         guiwindows(windowid).alpha = guiwindows(windowid).alpha - systemSharedFrameMoved(512.0)
         if guiwindows(windowid).alpha <= 0
            guiwindows(windowid).alpha = 0
            guiwindows(windowid).minimized = 1
            guiwindows(windowid).minimizing = 0
            guiwindows(windowid).restoring = 0
         endif
         guiClientSetGadgetsAlpha(windowid,guiwindows(windowid).alpha,0)
      endif

      if guiwindows(windowid).restoring = 1 and guiwindows(windowid).minimized = 1
         guiwindows(windowid).alpha = guiwindows(windowid).alpha + systemSharedFrameMoved(512.0)
         if guiwindows(windowid).alpha >= 255
            guiwindows(windowid).alpha = 255
            guiwindows(windowid).minimized = 0
            guiwindows(windowid).minimizing = 0
            guiwindows(windowid).restoring = 0
            guiwindows(windowid).hiddenflag = 0
         endif
         guiClientSetGadgetsAlpha(windowid,guiwindows(windowid).alpha,0)
      endif

      if guiwindows(windowid).closing = 1 and guiwindows(windowid).closed = 0
         guiwindows(windowid).alpha = guiwindows(windowid).alpha - systemSharedFrameMoved(512.0)
         if guiwindows(windowid).alpha <= 0
            guiwindows(windowid).alpha = 0
            guiwindows(windowid).hiddenflag = 1
            guiwindows(windowid).closed = 1
            guiwindows(windowid).closing = 0
         endif
         guiClientSetGadgetsAlpha(windowid,guiwindows(windowid).alpha,1)
      endif


endfunction

function guiClientToggleWindow(guiid$)

      windowid = guiClientGetWindowID(guiid$)
      if windowid = 0 or guiwindows(windowid).hiddenflag = 1 or guiwindows(windowid).minimized = 1 or guiwindows(windowid).closed = 1
         guiClientShowWindow(guiid$)
      else
         guiClientHideWindow(guiid$)
      endif

endfunction

function guiClientHideWindow(guiid$)

   windowid = guiClientGetWindowID(guiid$)
   if GUI_ACTIVE_WIN = windowid
      GUI_ACTIVE_WIN=0
   endif


   alphaValue = 0
   guiwindows(windowid).active = 0
   guiwindows(windowid).minimized = 1
   guiwindows(windowid).minimizing = 0
   guiwindows(windowid).restoring = 0
   guiwindows(windowid).hiddenflag = 1
   guiwindows(windowid).closed = 1
   guiClientSetWindowAlpha(windowid, alphaValue)


endfunction

function guiClientKillWindow(guiid$)

   windowid = guiClientGetWindowID(guiid$)
   gadgetsKilled = 0

   if windowid < 1 or windowid > array count(guiwindows()) then exitfunction

   if GUI_ACTIVE_WIN = windowid then GUI_ACTIVE_WIN=0

   REM FIRST KILL ALL ASSOCIATED GADGETS

      for i = 0 to array count(guigadgets())
         if guigadgets(i).parent.windowid = windowid
            if guigadgets(i).imageid <> 0
               if sprite exist(guigadgets(i).imageid)
                  delete sprite guigadgets(i).imageid
               endif
               if image exist(guigadgets(i).imageid)
                  delete image guigadgets(i).imageid
               endif
               guigadgets(i).imageid = 0
               guigadgets(i).guiid = ""
               guigadgets(i).killed = 1
               inc gadgetsKilled
            endif
         endif
      next i

   REM NOW MARK THE WINDOW AS INVALID

   if gadgetsKilled > 0
      debugWrite(DEBUGINFO,"guiKilled " + str$(gadgetsKilled) + " gadgets in window " + guiid$)
   endif

   guiwindows(windowid).guiid = ""
   guiwindows(windowid).killed = 1


endfunction

function guiClientShowWindow(guiid$)


   local windowid as integer

   windowid = guiClientGetWindowID(guiid$)
   if windowid = 0
      guiClientBuildWindow(guiSkinName,guiid$)
      windowid = guiClientGetWindowID(guiid$)
   endif

   if windowid <> 0

      alphaValue = 255
      GUI_ACTIVE_WIN = windowid
      guiwindows(windowid).active = 1
      guiwindows(windowid).minimized = 0
      guiwindows(windowid).minimizing = 0
      guiwindows(windowid).restoring = 0
      guiwindows(windowid).hiddenflag = 0
      guiwindows(windowid).closed = 0
      guiClientSetWindowAlpha(windowid, alphaValue)
      guiClientSetActiveWindow(windowid)

   endif

endfunction

function guiClientSwitchToWindow(guiid$)

   for i = 0 to array count(guiwindows())
      if guiwindows(i).guiid <> guiid$
         guiClientKillWindow(guiwindows(i).guiid)
      endif
   next i

   guiClientShowWindow(guiid$)

endfunction

function guiClientSetActiveWindow(windowid as integer)

   local i

   for i = 1 to array count(guiwindows())

      if guiwindows(i).closed = 0 and guiwindows(i).hiddenflag = 0 and guiwindows(i).killed = 0

         if guiwindows(i).windowid = windowid
            guiwindows(i).active = 1
            GUI_ACTIVE_WIN = i
            guiClientSetWindowAlpha(i, 255)
         else
            guiwindows(i).active = 0
            guiClientSetWindowAlpha(i, 100)
            REM FOR THE INACTIVE WINDOW, HIDE ITS POPUP
            if guiwindows(i).popupflag = 1
               if guiwindows(i).popupimageid <> 0
                  if sprite exist(guiwindows(i).popupimageid)
                     hide sprite guiwindows(i).popupimageid
                  endif
               endif
            endif
         endif
      endif

   next i

endfunction

function guiClientPressButtonNoCommand(gadgetid as integer)

REM SWITCHES TO THE PRESS IMAGE WITHOUT RUNNING THE BUTTON COMMAND
REM USED TO MAINTAIN BUTTON STATE FOR BUTTON LISTS

if gadgetid < 0 or gadgetid > array count(guigadgets()) then exitfunction

   if (guigadgets(gadgetid).imageid <> 0) and (guigadgets(gadgetid).norebuildflag=0) and guiButtonPressed = 0

         if sprite exist(guigadgets(gadgetid).imageid)

               if mouseclick() = 1
                  guiButtonPressed = 1
               endif

               if guigadgets(gadgetid).toggletype <> 0

                  REM IF THE BUTTON IS A TOGGLE, SWITCH IMAGE
                  REM OR DIFFUSE BASED ON STATE
                  if guigadgets(gadgetid).togglestate = 1
                     guigadgets(gadgetid).togglestate = 0
                     guigadgets(gadgetid).state = GUI_STATE_OFF
                     if guigadgets(gadgetid).toggletype = 1
                        guiClientCopyImage(guigadgets(gadgetid).parent.skin.toggleoffimage, guigadgets(gadgetid).imageid, 100.0)
                        sprite guigadgets(gadgetid).imageid,sprite x(guigadgets(gadgetid).imageid),sprite y(guigadgets(gadgetid).imageid),guigadgets(gadgetid).imageid
                     endif
                     if guigadgets(gadgetid).toggletype = 2
                        set sprite diffuse guigadgets(gadgetid).imageid, rgbr(guigadgets(gadgetid).parent.skin.coloroff),rgbg(guigadgets(gadgetid).parent.skin.coloroff),rgbb(guigadgets(gadgetid).parent.skin.coloroff)
                     endif
                  else
                     guigadgets(gadgetid).togglestate = 1
                     guigadgets(gadgetid).state = GUI_STATE_PRESS
                     if guigadgets(gadgetid).toggletype = 1
                        guiClientCopyImage(guigadgets(gadgetid).parent.skin.toggleonimage, guigadgets(gadgetid).imageid, 100.0)
                        sprite guigadgets(gadgetid).imageid,sprite x(guigadgets(gadgetid).imageid),sprite y(guigadgets(gadgetid).imageid),guigadgets(gadgetid).imageid
                     endif
                     if guigadgets(gadgetid).toggletype = 2
                        set sprite diffuse guigadgets(gadgetid).imageid, rgbr(guigadgets(gadgetid).parent.skin.colorpress),rgbg(guigadgets(gadgetid).parent.skin.colorpress),rgbb(guigadgets(gadgetid).parent.skin.colorpress)
                     endif
                  endif


               else

                  set sprite diffuse guigadgets(gadgetid).imageid, rgbr(guigadgets(gadgetid).parent.skin.colorpress),rgbg(guigadgets(gadgetid).parent.skin.colorpress),rgbb(guigadgets(gadgetid).parent.skin.colorpress)
                  guigadgets(gadgetid).state = GUI_STATE_PRESS

               endif

               if guigadgets(gadgetid).radiogroup <> 0
                  REM IF RADIO GROUP, TURN OFF ALL OTHERS IN GROUP
                  for j = 0 to array count(guigadgets())
                     if (guigadgets(j).radiogroup = guigadgets(gadgetid).radiogroup) and (j <> gadgetid) and (guigadgets(j).imageid <> 0)
                        if sprite exist(guigadgets(j).imageid)
                           if sprite visible(guigadgets(j).imageid)=0 then hideagain = 1
                           set sprite diffuse guigadgets(j).imageid, rgbr(guigadgets(j).parent.skin.coloroff),rgbg(guigadgets(j).parent.skin.coloroff),rgbb(guigadgets(j).parent.skin.coloroff)
                           guigadgets(j).state = GUI_STATE_OFF
                           if hideagain = 1 then hide sprite guigadgets(j).imageid
                        endif
                     endif
                  next
               endif

         endif

   endif

endfunction

function guiClientSetGadgetsAlpha(windowid as integer, level as integer, isclosing as boolean)

   REM WHEN ISCLOSING IS SET TO 1, ALSO FADE THE SPECIAL TYPES (MIN, CLOSE, TITLEBAR AND STRETCH)

   local i
   local priority as integer
   local myPriority as integer

   if level = 255
      priority = 10
   else
      priority = 2
   endif

   for i = 1 to array count(guigadgets())
   if guigadgets(i).parent.windowid = windowid

      doFade = 1
      myPriority = priority

      select guigadgets(i).gadgettype

         case GUI_PANEL
            if guiwindows(windowid).virtualflag=1
               myPriority = priority + 0
               if level <> 0 and level <> 255
                  REM THE TARGETING RETICULE CANNOT HAVE ITS ALPHA
                  REM CHANGED BY CLICKING ON THE SCREEN
                  doFade=0
               endif
            endif
         endcase

         case GUI_BUTTON
            if guigadgets(i).dragflag = 1
               myPriority = priority + 4
               if level <> 0 and level <> 255
                  REM DRAGGABLE BUTTONS CANNOT BE PARTIALLY TRANSPARENT
                  level = 255
               endif
            else
            myPriority = priority + 1
            if (level = 255 or level = 100) and guiwindows(windowid).minimized = 1
               doFade=0
            endif
            endif
         endcase

         case GUI_LABEL
            myPriority = priority + 2
            if (level = 255 or level = 100) and guiwindows(windowid).minimized = 1
               doFade=0
            endif
         endcase
         
         case GUI_TEXTFIELD
            myPriority = priority + 2
            if (level = 255 or level = 100) and guiwindows(windowid).minimized = 1
               doFade=0
            endif
         endcase

         case GUI_SLIDER
            myPriority = priority + 2
         endcase
         
         case GUI_PROGRESSBAR
            myPriority = priority + 2
         endcase
         
         case GUI_TITLEBAR
            myPriority = priority + 2
            if isclosing <> 1
               doFade = 0
            endif
         endcase
         
         case GUI_SLIDER_BUTTON
            myPriority = priority + 3
         endcase
         
         case GUI_PROGRESSBAR_HOLDER
            myPriority = priority + 3
         endcase
         case GUI_STRETCH
            myPriority = priority + 3
         endcase
         
         case GUI_MINIMIZE
            myPriority = priority + 3
            if isclosing <> 1
               doFade = 0
            endif
         endcase
         
         case GUI_CLOSE
            myPriority = priority + 3
            if isclosing <> 1
               doFade = 0
            endif
         endcase

         case GUI_POPUP
            myPriority = priority + 5
            if (level = 255 or level = 100) and guiwindows(windowid).minimized = 1
               doFade=0
            endif
         endcase

         case GUI_NAMETAG
            REM NAMETAGS CANNOT BE FADED OR MADE INVISIBLE
            level = 255
         endcase

         case default
            myPriority = priority + 0
            if (level = 255 or level = 100) and guiwindows(windowid).minimized = 1
               doFade=0
            endif
         endcase
      endselect


      if doFade = 1

         if level = 0
            if guigadgets(i).imageid > 0
               if sprite exist(guigadgets(i).imageid)
                  hide sprite guigadgets(i).imageid
                  if guigadgets(i).gadgettype = GUI_SLIDER
                     hide sprite guigadgets(guigadgets(i).scrollbar).imageid
                     set sprite alpha guigadgets(guigadgets(i).scrollbar).imageid, level
                     set sprite priority guigadgets(guigadgets(i).scrollbar).imageid, myPriority + 1
                  endif
               else
                  debugWrite(DEBUGINFO,"[SYSTEM] WARN : Set Alpha called for invalid sprite 1 :" + guigadgets(i).guiid + ":" + str$(i))
               endif
            endif

         else
            if guigadgets(i).stayhiddenflag <> 1
               if guigadgets(i).imageid > 0
                  if sprite exist(guigadgets(i).imageid)
                     show sprite guigadgets(i).imageid
                     set sprite alpha guigadgets(i).imageid, level
                     set sprite priority guigadgets(i).imageid, myPriority

                     if guigadgets(i).gadgettype = GUI_SLIDER
                        show sprite guigadgets(guigadgets(i).scrollbar).imageid
                        set sprite alpha guigadgets(guigadgets(i).scrollbar).imageid, level
                        set sprite priority guigadgets(guigadgets(i).scrollbar).imageid, myPriority + 1
                     endif
                  else
                     debugWrite(DEBUGINFO,"[SYSTEM] WARN : Set Alpha called for invalid sprite 2 :" + guigadgets(i).guiid + ":" + str$(i))
                  endif
               endif
            endif
         endif

      endif

   endif
   next i

endfunction

function guiClientSetWindowAlpha(windowid as integer, alphaValue as integer)

   local priority as integer
   if alphaValue = 255
      priority = 4
   else
      priority = 1
   endif

   guiwindows(windowid).minimizing = 0
   guiwindows(windowid).restoring = 0
   guiwindows(windowid).closing = 0

   if guiwindows(windowid).minimized = 1
      guiwindows(windowid).alpha = 0
   else
      guiwindows(windowid).alpha = alphaValue
   endif

   guiClientSetGadgetsAlpha(windowid,alphaValue,1)

endfunction

function guiClientUpdateChatRcv(msg$ as string)

   local gadgetid as integer
   gadgetid = guiClientGetGadgetID(GUI_CHAT_RECEIVE)
   guiChatReceived = guiChatReceived + chr$(13) + msg$
   guiClientSetTextArea(gadgetid, guiChatReceived,0,0)

endfunction

function guiClientUpdateGUI()

   local i as integer

   systemGuiController = 0

   for i = 1 to array count(guiwindows())

      if guiwindows(i).hiddenflag = 0 and guiwindows(i).closed = 0 and guiwindows(i).killed = 0
         if guiwindows(i).virtualflag = 0
            guiClientFadeWindow(i)
         endif
      endif

   next i

   guiClientUpdateGadgets()

endfunction
