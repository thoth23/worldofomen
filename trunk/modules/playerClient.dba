REM *** Include File: modules\playerShared.dba ***
REM Created: 7/4/2010 11:07:28 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

playerClientSetup:

   global tidPlayer as integer
   REM THIS IS THE TABLE ID
   REM FOR THE LOCAL PLAYER OBJECT

   global idxTarget as integer
   REM THIS IS THE DATAOBJECT ARRAY INDEX
   REM FOR THE LOCAL PLAYER'S TARGET

   global playerMoveX as float
   global playerMoveZ as float
   global playerJumping as boolean

   global PLAYER_MOVE_PRECISION as float
   PLAYER_MOVE_PRECISION = val(dataSharedGetField("playerClient", "playerMovePrecision", "0.25", DATA_CREATE))

   global PLAYER_CURVE_SPEED as float
   PLAYER_CURVE_SPEED = val(dataSharedGetField("playerClient", "playerCurveSpeed", "1.0", DATA_CREATE))

   global PLAYER_JUMP_VELOCITY as float
   PLAYER_JUMP_VELOCITY = val(dataSharedGetField("playerClient", "playerJumpVelocity", "40.0", DATA_CREATE))

   REM INERTIA MUST ALWAYS BE LESS THAN MOVEMENT PRECISION
   global PLAYER_MAX_INERTIA as float
   PLAYER_MAX_INERTIA = val(dataSharedGetField("playerClient", "playerMaxInertia", "0.10", DATA_CREATE))

   #constant PLAYER_MEDIA_PATH "media/avatar"
   #constant PLAYER_FUNCTION_FAIL 0
   #constant PLAYER_FUNCTION_OK 1
   
return


function playerClientCreate(rpgid as integer, meshid as integer)

   tid = dataSharedUpdateField(str$(rpgid),"rpgid",str$(rpgid))
   dataSharedUpdateFieldFast(tid,"meshid",str$(meshid))
   dataSharedUpdateFieldFast(DATA_CLIENT_RTABLEID,str$(rpgid),str$(tid))
   meshClientCreate(tid)   
   
endfunction tid

function playerClientDestroy(tid as integer)

   local rpgid$ as string
   rpgid$ = dataSharedGetFieldFast(tid, "rpgid")
      
   REM REMOVE THE REVERSE LOOKUP
   dataSharedDeleteRecord(DATA_CLIENT_RTABLEID,rpgid$)
   
   REM BECAUSE PLAYER IS CURRENTLY THE HIGHEST
   REM LEVEL OF ABSTRACTION, WE DELETE THE 
   REM TABLE AT THIS LEVEL - RESET TABLE TAKES
   REM CARE OF REMOVING ANY INSTATIATED ASSETS
   dataSharedResetTable(tid)
   
   if tid = tidPlayer then tidPlayer = 0

endfunction retval

function playerClientControl()

   local mytableid as integer
   local myidx as integer
   local mydbpid as integer
   local dist# as float
   local x# as float
   local y# as float
   local z# as float
   local myvelxz as float
   local myvely as float
   local myveljump as float

   REM NOW WE'RE GOING TO GO THROUGH THE LIST OF
   REM PLAYERS WE ARE AWARE OF AND UPDATE EACH ONE

   mytableid = DATA_CLIENT_RTABLEID
   if mytableid > 0
      FIRST LOOKUP mytableid
      while lookup is valid(mytableid)
         if LOOKUP CURRENT KEY$(mytableid) <> "" AND LOOKUP CURRENT KEY$(mytableid) <> DATA_KEY_DIRTY AND LOOKUP CURRENT KEY$(mytableid) <> DATA_KEY_UNDEFINED
            myrpgid = intval(LOOKUP CURRENT KEY$(mytableid))
            mytid = intval(LOOKUP CURRENT VALUE$(mytableid))
            mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
            
            if mydbpid <> 0 
               
               if object exist(mydbpid)
               
                  mygravity = intval(dataSharedGetFieldFast(mytid,"gravity"))
                  myvelxz = val(dataSharedGetFieldFast(mytid,"velxz"))
                  myvely = val(dataSharedGetFieldFast(mytid,"vely"))
                  myveljump = val(dataSharedGetFieldFast(mytid,"veljump"))
                  
                  REM IF PLAYER IS NOT MOVING, AND GRAVITY IS ON FOR PLAYER
                  REM THEN APPLY SIMPLE GRAVITY
                  if mygravity <> 0 AND myvelxz <= 0.0
                     x# = object position x(mydbpid)
                     y# = object position y(mydbpid)
                     z# = object position z(mydbpid)
                     myground = collisionClientFall(mydbpid,COLLISION_GROUP_WORLD,x#,y#,z#,x#,y#,z#,1)
                     dataSharedUpdateFieldFast(mytid,"ground",str$(myground))                     
                  endif
   
                  REM IF PLAYER HAS POSITIVE Y VELOCITY
                  REM THEN REGULATE JUMPING
                  if myvely > 0.0
                     move object up mydbpid, systemSharedFrameMoved(myvely)
                     myvely = myvely - systemSharedFrameMoved((myveljump * 0.5))
                     myvely = max(0.0, myvely)
                     dataSharedUpdateFieldFast(mytid,"vely",str$(myvely))                     
                  endif
   
                  if mytid = tidPlayer
                     REM REGULATE LOCAL PLAYER
                     playerClientControlLocal(mytid)
                  else
                     REM REGULATE REMOTE PLAYERS
                     playerClientControlRemote(mytid)
                  endif
   
                 REM MAINTAIN PITCH AND ROLL AT 0 WHEN NOT FLYING
                  if mygravity <> 0
                     rotate object mydbpid, 0.0, object angle y(mydbpid), 0.0
                  endif
                  
               endif

            endif

         endif

         NEXT LOOKUP mytableid

      endwhile
   endif

endfunction

function playerClientControlLocal(mytid as integer)

   local mydbpid as integer
   local myvelxz as float
   
   mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
   if mydbpid = 0 then exitfunction
   if object exist(mydbpid) = 0 then exitfunction

   if playerMoveX = 0 AND playerMoveZ = 0

      REM PLAYER DID NOT MOVE
      dataSharedUpdateFieldFast(mytid, "velxz","0")
      meshClientAnimate(mytid, "idle1", MESH_ANIM_PLAY)
      meshClientRegulate(mytid)

   else

      REM PLAYER DID MOVE

      myvelxz = systemSharedFrameMoved(val(dataSharedGetFieldFast(mytid,"speed")))

      netUpdateMode = 1

      oldx# = object position x(mydbpid)
      oldy# = object position y(mydbpid)
      oldz# = object position z(mydbpid)

      move object mydbpid, (myvelxz * playerMoveZ)
      move object left mydbpid, (myvelxz * playerMoveX)

      x# = object position x(mydbpid)
      y# = object position y(mydbpid)
      z# = object position z(mydbpid)

      REM APPLY GRAVITY AND SLIDING COLLISION
      myground = collisionClientSlide(mydbpid,COLLISION_GROUP_WORLD,oldx#,oldy#,oldz#,x#,y#,z#,1)
      dataSharedUpdateFieldFast(mytid,"ground",str$(myground))

      meshClientAnimate(mytid, "run", MESH_ANIM_LOOP)
      meshClientRegulate(mytid)

   endif

   REM NOW LETS SEE IF THE PLAYER IS TRYING TO
   REM JUMP AND IF SO, SEE IF JUMP IS VALID
   REM AND IF SO, THEN START JUMP
   if playerJumping = 1
      if intval(dataSharedGetFieldFast(mytid,"ground")) = 1
         myveljump = intval(dataSharedGetFieldFast(mytid,"veljump"))
         dataSharedUpdateFieldFast(mytid,"vely",str$(myveljump))
         REM IMMEDIATELY SEND A JUMP PACKET
         `netClientJump()
         rem not yet
      endif
   endif


endfunction


function playerClientControlRemote(mytid as integer)

   local mydbpid as integer
   local distCategory as integer
   local deltaVelocity as float
   local tempy as float

   mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
   if mydbpid = 0 then exitfunction
   if object exist(mydbpid) = 0 then exitfunction

   posx# = val(dataSharedGetFieldFast(mytid,"posx"))
   posy# = val(dataSharedGetFieldFast(mytid,"posy"))
   posz# = val(dataSharedGetFieldFast(mytid,"posz"))
   myspeed# = val(dataSharedGetFieldFast(mytid,"speed"))
   myvelxz# = val(dataSharedGetFieldFast(mytid,"velxz"))
   oldx# = object position x(mydbpid)
   oldy# = object position y(mydbpid)
   oldz# = object position z(mydbpid)

   
   REM REGULATE MOVEMENT
   dist# = systemSharedGetDistance3D(posx#,posy#,posz#,oldx#,oldy#,oldz#)
   distCategory = int(dist#/PLAYER_MOVE_PRECISION)
   deltaVelocity# = systemSharedFrameMoved(myspeed#)

   REM MOVE

   select distCategory
      case 0
         REM LESS THAN MOVE PRECISION
         dataSharedUpdateFieldFast(mytid,"velxz","0")
      endcase
      
      case 1
         REM BETWEEN 1x AND 2x MOVE PRECISION

         REM START SLOWING DOWN OVER 1 SECOND
         if myvelxz# > 0.0
            myvelxz# = max(myvelxz# - deltaVelocity#,0)
            dataSharedUpdateFieldFast(mytid,"velxz",str$(myvelxz#))
         endif

         point object mydbpid, posx#,posy#,posz#
         move object mydbpid, systemSharedFrameMoved(myvelxz#)

      endcase
      
      case default
         REM GREATER THAN 3x MOVE PRECISION

         if myvelxz# < myspeed#
            REM START SPEEDING UP OVER 1 SECOND
            myvelxz# = min(myvelxz# + deltaVelocity#,myspeed#)
         endif

         REM THE LARGER THE CURVEANGLE SPEED VALUE, THE MORE PRECISION, THE SMALLER THE CHANGE PER FRAME
         starty = object angle y(mydbpid)
         point object mydbpid, posx#, posy#, posz#
         endy = object angle y(mydbpid)
         rotate object mydbpid, object angle x(mydbpid),curveangle(starty, endy, (systemGameFPS * PLAYER_CURVE_SPEED)),object angle z(mydbpid)

         move object mydbpid, systemSharedFrameMoved(myvelxz#)
         dataSharedUpdateFieldFast(mytid,"velxz",str$(myvelxz#))

      endcase
   endselect

   REM HANDLE COLLISION
   x# = object position x(mydbpid)
   y# = object position y(mydbpid)
   z# = object position z(mydbpid)

   if distCategory < 1
      REM APPLY GRAVITY COLLISION ONLY
      myground = collisionClientFall(mydbpid,COLLISION_GROUP_WORLD,x#,y#,z#,x#,y#,z#,1)
      dataSharedUpdateFieldFast(mytid,"ground",str$(myground)) 
   else  
      REM APPLY GRAVITY AND SLIDING COLLISION
      myground = collisionClientSlide(mydbpid,COLLISION_GROUP_WORLD,oldx#,oldy#,oldz#,x#,y#,z#,1)
      dataSharedUpdateFieldFast(mytid,"ground",str$(myground))
   endif
   
   REM REGULATE ANIMATION IF NECESSARY
   if object playing(mydbpid)
      meshClientRegulate(mytid)
   endif
  

endfunction


function playerClientRotateY(mydbpid as integer, angle# as float)

   if mydbpid > 0
      if object exist(mydbpid)
         rotate object mydbpid, 0.0, angle#, 0.0
      endif
   endif

endfunction

function playerClientTeleport(idx as integer)
   REM WLL TELEPORT A PLAYER TO THEIR
   REM PRE-ESTABLISHED TEL COORDINATES

endfunction
