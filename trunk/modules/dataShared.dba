REM *** Include File: modules\dataShared.dba ***
REM Created: 7/4/2010 10:46:45 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

dataSharedSetup:

   
   #constant DATA_NO_CREATE   0
   #constant DATA_CREATE      1

   #constant DATA_SEARCH_FAST    1
   #constant DATA_SEARCH_REUSE   2

   #constant DATA_KEY_UNDEFINED     "\\\undefined\\\"
   #constant DATA_KEY_HIDDEN        "\\\hidden\\\"
   #constant DATA_KEY_NOSAVE        "\\\nosave\\\"
   #constant DATA_TABLE_INPUT       "input"
   #constant DATA_ARGSEP            ";"
   #constant DATA_NAMEVALSEP        "="
   #constant DATA_FILE_EXT          ".ini"
   #constant DATA_TEMPLATE_KEY      "inherit"

   global DATA_NOSAVE_TABLES as string

   REM BASE TABLE MUST BE BUILT MANUALLY
   REM AND SET IT TO NOSAVE
   #constant DATA_TABLES            99
   #constant DATA_TNAME_TABLES      "tables"
   make lookup DATA_TABLES
   set lookup DATA_TABLES, DATA_TNAME_TABLES, str$(DATA_TABLES)
   systemSharedPushFree(SYSTEM_TYPE_LOOKUP,99)
   debugWrite(DEBUGINFO,"dataSharedSetup: root table set to name " + DATA_TNAME_TABLES + " with tableid: " + str$(DATA_TABLES))
   DATA_NOSAVE_TABLES = systemSharedFieldAdd(DATA_NOSAVE_TABLES,DATA_TNAME_TABLES,DATA_ARGSEP)

   REM PRE-BUILD THE INPUT TABLE
   REM AND SET IT TO NOSAVE
   dataSharedUpdateField(DATA_TABLE_INPUT, DATA_KEY_UNDEFINED, DATA_KEY_UNDEFINED)
   DATA_NOSAVE_TABLES = systemSharedFieldAdd(DATA_NOSAVE_TABLES,DATA_TABLE_INPUT,DATA_ARGSEP)

   REM NOW LET'S SET THE LOCALIZATION
   REM AND SET IT TO NOSAVE
   #constant DATA_TABLE_GUI "gui"
   #constant DATA_TABLE_GUIDATA "guidata"
   global DATA_LANGUAGE as string
   DATA_LANGUAGE = dataSharedGetField(DATA_TABLE_GUI, "language", "language/english",DATA_CREATE)
   DATA_NOSAVE_TABLES = systemSharedFieldAdd(DATA_NOSAVE_TABLES,DATA_LANGUAGE,DATA_ARGSEP)


   REM ...AND A TABLE TO KEEP TRACK OF ALL
   REM RPGIDS FOR ALL ASSETS, PROVIDES LOOKUP
   REM OF PATH BY RPGID
   #constant DATA_TABLE_LIBRARY "library"
   dataSharedUpdateField(DATA_TABLE_LIBRARY, DATA_KEY_UNDEFINED, DATA_KEY_UNDEFINED)

   REM ...AND A TABLE TO KEEP TRACK OF
   REM CURRENTLY-LOADED ASSETS, PROVIDES LOOKUP
   REM OF ASSETID (DBPID FOR MESHES FOR EXAMPLE)
   REM BY RPGID
   #constant DATA_TABLE_ASSETS "assets"
   dataSharedUpdateField(DATA_TABLE_ASSETS, DATA_KEY_UNDEFINED, DATA_KEY_UNDEFINED)
   DATA_NOSAVE_TABLES = systemSharedFieldAdd(DATA_NOSAVE_TABLES,DATA_TABLE_ASSETS,DATA_ARGSEP)

   #constant DATA_FUNCTION_FAIL -1
   #constant DATA_FUNCTION_OK 1
   #constant DATA_KEY_DIRTY "dirty"
   #constant DATA_DIRTY 1
   #constant DATA_CLEAN 0

return

function dataSharedGetLibraryPath(rpgid as integer)

   local retval$ as string

   retval$ = dataSharedGetField(DATA_TABLE_LIBRARY, str$(rpgid), DATA_KEY_UNDEFINED, DATA_NO_CREATE)
   if retval$ = DATA_KEY_UNDEFINED
      debugWrite(DEBUGWARN,"dataSharedGetLibraryPath: AssetID Not Found " + str$(rpgidAsset))
   endif

endfunction retval$

function dataSharedGetAssetID(rpgid as integer)

   local retval$ as string
   local retval as integer

   retval$ = dataSharedGetField(DATA_TABLE_ASSETS,str$(rpgid), DATA_KEY_UNDEFINED, DATA_NO_CREATE)
   if retval$ = DATA_KEY_UNDEFINED

      REM ASSET HAS NOT ALREADY BEEN LOADED
      REM CALL THE APPROPRIATE FUNCTION TO
      REM DO LOADING BY ASSET EXTENSION

      REM FIRST GET PATH WHERE ASSET
      REM IS SUPPOSED TO BE
      myPath$ = dataSharedGetLibraryPath(rpgid)

      REM IF ASSET IS WHERE IT IS SUPPOSED
      REM TO BE THEN LOAD IT
      if file exist(myPath$)
         ext$ = fast right$(myPath$,3)
         select ext$
            case "dbo"
               mydbpid = systemSharedGetFree(SYSTEM_TYPE_OBJECT, SYSTEM_SEARCH_REUSE)
               meshClientLoad(myPath$,mydbpid)
               dataSharedUpdateField(DATA_TABLE_ASSETS, str$(rpgid), str$(mydbpid))
               retval = mydbpid
            endcase
         endselect
      else
         debugWrite(DEBUGWARN,"dataSharedGetAssetID: Invalid Asset Path " + myPath$)
      endif
   else
      retval = intval(retval$)
   endif

endfunction retval

function dataSharedParse(tablename$ as string, attributes$ as string)

      REM PARSE A SPACE-DELIMITED ATTRIBUTE LIST
      REM AND APPY IT TO A TABLE

      split string attributes$, " "
      local dim dat$(split count())
      for i = 1 to split count()
         dat$(i) = get split word$(i)
      next
      for i = 1 to array count(dat$())
         split string dat$(i), "="
         key$ = get split word$(1)
         value$ = get split word$(2)
         dataSharedUpdateField(tablename$, key$, value$)
      next
      
      dataSharedUpdateField(tablename$, DATA_KEY_DIRTY, str$(DATA_DIRTY))
      
      undim dat$()

endfunction


function dataSharedCopyTable(sourceTableid as integer, targetTableid as integer)

   REM COPY ALL THE ATTRIBUTES
   REM FOR ONE TABLE INTO ANOTHER
   REM TABLE

   local retval as integer
   retval = DATA_FUNCTION_OK

   if sourceTableid = DATA_FUNCTION_FAIL then exitfunction DATA_FUNCTION_FAIL
   if targetTableid = DATA_FUNCTION_FAIL then exitfunction DATA_FUNCTION_FAIL
   
   first lookup sourceTableid
   while lookup is valid(sourceTableid)
      key$ = fast lower$(lookup current key$(sourceTableid))
      value$ = lookup current value$(sourceTableid)

      dataSharedUpdateFieldFast(targetTableid, key$, value$)

      next lookup sourceTableid
   endwhile

   set lookup targetTableid, DATA_KEY_DIRTY, str$(DATA_DIRTY)
   
endfunction retval

function dataSharedResetTable(tableid as integer)
   
      delete lookup tableid
   
endfunction

function dataSharedDeleteRecord(tableid as integer, key$ as string)

      delete lookup tableid, key$
      
endfunction


function dataSharedGetField(tableName$, key$, default$,createFlag as boolean)

   local retval$ as string
   retval$ = DATA_KEY_UNDEFINED

   rem first find the tableID
   if search lookup (DATA_TABLES, tableName$) = 1
      if lookup is valid(DATA_TABLES)
         tableid = intval(lookup current value$(DATA_TABLES))
         rem now find the key/value pair in the right table
         if search lookup(tableid, key$) = 1
            if lookup is valid(tableid)
               retval$ = lookup current value$(tableid)
            else
               debugWrite(DEBUGWARN,"dataSharedGetField lookup invalid for table: " + str$(tableid))
            endif
         else
            `debugWrite(DEBUGINFO,"dataSharedGetField lookup not found for table: " + str$(tableid) + " and key: " + key$ + ", using default: " + default$)
            if createFlag = 1
               dataSharedUpdateField(tableName$,key$,default$)
            endif
            retval$ = default$
         endif
      else
         debugWrite(DEBUGWARN,"dataSharedGetField table lookup invalid for table: " + tableName$)
      endif
   else
      `debugWrite(DEBUGWARN,"dataSharedGetField table lookup not found for table,key,value: " + tablename$ + "," + key$ + "," + default$)
      if createFlag = 1
         tableid = systemSharedGetFree(SYSTEM_TYPE_LOOKUP,SYSTEM_SEARCH_FAST)
         make lookup tableid
         set lookup DATA_TABLES, tableName$, str$(tableid)
         set lookup tableid, key$, default$

         set lookup tableid, DATA_KEY_DIRTY, str$(DATA_DIRTY)

         debugWrite(DEBUGINFO,"dataSharedGetField created table    " + str$(tableid) + ". " + tableName$)
      endif
      retval$ = default$
   endif

endfunction retval$

function dataSharedGetFieldFast(tableid, key$)
   
   local retval$ as string
   retval$ = DATA_KEY_UNDEFINED
   
   if search lookup(tableid, key$) = 1
         if lookup is valid(tableid)
            retval$ = lookup current value$(tableid)
         endif      
   endif
   
endfunction retval$

function dataSharedUpdateFieldFast(tableid as integer, key$, value$)

   if lookup exist(tableid) = 0
      make lookup tableid
   endif
   
   set lookup tableid, key$, value$
   set lookup tableid, DATA_KEY_DIRTY, str$(DATA_DIRTY)
      
endfunction



function dataSharedUpdateField(tableName$, key$, value$)
   local tableid as integer

   if tableName$ = "" then exitfunction DATA_FUNCTION_FAIL
   rem first find the tableID
   if search lookup (DATA_TABLES, tableName$) = 1
      if lookup is valid(DATA_TABLES)
         tableid = intval(LOOKUP CURRENT VALUE$(DATA_TABLES))
      endif
   else
      tableid = systemSharedGetFree(SYSTEM_TYPE_LOOKUP,SYSTEM_SEARCH_FAST)
      make lookup tableid
      set lookup DATA_TABLES, tableName$, str$(tableid)
      debugWrite(DEBUGINFO,"dataSharedUpdateField created table " + str$(tableid) + ". " + tableName$)
   endif

   rem now set the key/value pair in the table
   set lookup tableid, key$, value$

   set lookup tableid, DATA_KEY_DIRTY, str$(DATA_DIRTY)

   `debugWrite(DEBUGINFO,"dataSharedUpdateField updated key " + key$ + " to " + value$ + " in table " + str$(tableID) + ". " + tableName$)

endfunction tableid

function dataSharedLoadAllTables()

   filename$ = DATA_PATH + DATA_TNAME_TABLES + DATA_FILE_EXT
   if file exist(filename$)
      open to read SYSTEM_FILE_TABLE, filename$
         while not file end(SYSTEM_FILE_TABLE)
            read string SYSTEM_FILE_TABLE, table$
            filename$ = DATA_PATH + table$ + DATA_FILE_EXT
            dataSharedLoadTable(filename$, table$)
         endwhile
      close file SYSTEM_FILE_TABLE
   endif

   REM LOCALIZATION
   filename$ = DATA_PATH + DATA_LANGUAGE + DATA_FILE_EXT
   if file exist(filename$)
      open to read SYSTEM_FILE_DATA, filename$
      while not file end(SYSTEM_FILE_DATA)
         read string SYSTEM_FILE_DATA, dat$
         split string dat$,DATA_NAMEVALSEP
         dataSharedUpdateField(DATA_LANGUAGE, get split word$(1), get split word$(2))
      endwhile
      close file SYSTEM_FILE_DATA
   endif

endfunction

function dataSharedLoadTable(filename$, table$)

   if file exist(filename$)

      REM LOAD BASE

      open to read SYSTEM_FILE_DATA, filename$
      while not file end(SYSTEM_FILE_DATA)
         read string SYSTEM_FILE_DATA, dat$
         split string dat$,DATA_NAMEVALSEP
         dataSharedUpdateField(table$, get split word$(1), get split word$(2))
      endwhile
      close file SYSTEM_FILE_DATA


      REM LOAD TEMPLATE CHAIN IF
      REM TEMPLATE KEY IS PRESENT

      alreadyChecked$ = ""
      originalTable$ = table$
      originalFileName$ = filename$

      templateLoaded = 0
      while (dataSharedGetField(table$, DATA_TEMPLATE_KEY, DATA_KEY_UNDEFINED,DATA_NO_CREATE) <> DATA_KEY_UNDEFINED) AND (instr(alreadyChecked$,table$) = 0)
         template$ = dataSharedGetField(table$, DATA_TEMPLATE_KEY, DATA_KEY_UNDEFINED,DATA_NO_CREATE)
         debugWrite(DEBUGINFO, "dataSharedLoadTable: applying template " + template$)
         alreadyChecked$ = systemSharedFieldAdd(alreadyChecked$,template$,DATA_ARGSEP)
         filename$ = DATA_PATH + template$ + DATA_FILE_EXT
         if file exist(filename$)
            open to read SYSTEM_FILE_DATA, filename$
               while not file end(SYSTEM_FILE_DATA)
                  read string SYSTEM_FILE_DATA, dat$
                  split string dat$, DATA_NAMEVALSEP
                  dataSharedUpdateField(originalTable$, get split word$(1), get split word$(2))
                  `debugWrite(DEBUGINFO,"dataSharedLoad template: " + get split word$(1) + " from table " + filename$ + " added to table " + originalTable$)
                  templateLoaded = 1
               endwhile
            close file SYSTEM_FILE_DATA
         endif
         table$ = template$
      endwhile

      REM RELOAD BASE IF ANY TEMPLATES WERE LOADED
      REM THIS ALLOWS LOCAL VALUES TO OVERRIDE
      REM INHERITED VALUES

      if TemplateLoaded = 1
         open to read SYSTEM_FILE_DATA, originalFileName$
         while not file end(SYSTEM_FILE_DATA)
            read string SYSTEM_FILE_DATA, dat$
            split string dat$,DATA_NAMEVALSEP
            dataSharedUpdateField(originalTable$, get split word$(1), get split word$(2))
         endwhile
         close file SYSTEM_FILE_DATA
      endif


   endif

endfunction


function dataSharedSaveAllTables()

   local myTable as integer
   myTable = 1

   if lookup exist(DATA_TABLES)
      FIRST LOOKUP DATA_TABLES
      while lookup is valid(DATA_TABLES)
         myKey$ = LOOKUP CURRENT KEY$(DATA_TABLES)
        if instr(DATA_NOSAVE_TABLES,myKey$) = 0
            filename$ = DATA_PATH + myKey$ + DATA_FILE_EXT
            myTable = intval(LOOKUP CURRENT VALUE$(DATA_TABLES))
            if lookup exist(myTable)
               dataSharedSaveTable(myTable, filename$)
            endif
         endif
         next lookup DATA_TABLES
      endwhile
   endif
   
endfunction

function dataSharedSaveTable(myTable as integer, filename$ as string)
   
   if file exist(filename$)
      delete file filename$
   endif
   
   open to write SYSTEM_FILE_DATA, filename$
   FIRST LOOKUP myTable
   while lookup is valid(myTable)
      if LOOKUP CURRENT KEY$(myTable) <> "" AND LOOKUP CURRENT KEY$(myTable) <> DATA_KEY_DIRTY  AND LOOKUP CURRENT KEY$(myTable) <> DATA_KEY_UNDEFINED
         dat$ = LOOKUP CURRENT KEY$(myTable) + DATA_NAMEVALSEP + LOOKUP CURRENT VALUE$(myTable)
         write string SYSTEM_FILE_DATA, dat$
      endif
      next lookup myTable
   endwhile
   close file SYSTEM_FILE_DATA
   
endfunction

function dataSharedTableExist(tableName$ as string)
   local retval as integer
   retval = DATA_FUNCTION_FAIL
   if search lookup (DATA_TABLES, tableName$) = 1
      if lookup is valid(DATA_TABLES)
         retval = intval(LOOKUP CURRENT VALUE$(DATA_TABLES))
      endif
   endif
endfunction retval

