REM *** Include File: modules\meshClient.dba ***
REM Created: 7/4/2010 11:02:33 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

meshClientSetup:

   #constant MESH_FUNCTION_FAIL -1
   #constant MESH_FUNCTION_OK 1

   #constant MESH_ANIMDATA_PREFIX "anim_"
   #constant MESH_ANIMDATA_START "_start"
   #constant MESH_ANIMDATA_STOP "_stop"
   #constant MESH_ANIMDATA_SPEED "_speed"
   #constant MESH_ANIMDATA_SWITCH "_switch"
   #constant MESH_ANIM_LOOP 0
   #constant MESH_ANIM_PLAY 1

   global MESH_DEFAULT_FPS as float
   MESH_DEFAULT_FPS = val(dataSharedGetField("meshClient", "meshDefaultFPS", "24.0", DATA_CREATE))
   
   mediaClientRegisterPath(MESH_AVATAR_PATH)
   
return

function meshClientLoad(myPath$, mydbpid)

   REM LOADS AN ASSET FOR LATER INSTANTIATION

   if file exist(myPath$) = 0 then exitfunction MESH_FUNCTION_FAIL
   load object myPath$, mydbpid, 1
   hide object mydbpid
   exclude object on mydbpid

endfunction MESH_FUNCTION_OK

function meshClientLoadMorph(myPath$,mybnkid)

   REM LOADS A MORPH TARGET INTO A BANK FOR LATER APPLICATION
   
   if file exist(myPath$) = 0 then exitfunction MESH_FUNCTION_FAIL
   if bank exist(mybnkid)
      delete bank mybnkid
   endif
   make bank from file mybnkid, myPath$
   
endfunction MESH_FUNCTION_OK

function meshClientDestroy(mytid as integer)

   mydbpid = intval(dataSharedGetFieldFast(mytid, "dbpid"))
   if mydbpid = 0 then exitfunction
   if object exist(mydbpid) = 0 then exitfunction
   
   delete object mydbpid
   
   dataSharedUpdateFieldFast(mytid, "dbpid", DATA_KEY_UNDEFINED)

endfunction

function meshClientCreate(mytid as integer)

   REM INSTANTIATE A MESH INTO THE WORLD
   REM ASSUMES THE TABLE HAS BEEN
   REM PRE-POPULATED WITH dbpid, meshid, effectid,
   REM transforms, and collision data.  ALL MESHES GET
   REM TRANSFORMS, A SHADER, AND COLLISION
   REM SO WE PERFORM ALL THESE APPLICATIONS
   REM AS PART OF MESH CREATION INSTEAD OF
   REM AS SEPARATE FUNCTIONS

   mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
   mymeshid = intval(dataSharedGetFieldFast(mytid,"meshid"))
   if mydbpid = 0
      mydbpid = systemSharedGetFree(SYSTEM_TYPE_OBJECT, SYSTEM_SEARCH_REUSE)
      dataSharedUpdateFieldFast(mytid, "dbpid", str$(mydbpid))
   else
      if object exist(mydbpid)
         delete object mydbpid
      endif
   endif

   make object cylinder mydbpid, 10
   scale object mydbpid, 100, 5000, 100
   color object mydbpid, rgb(255,0,128)

   myPath$ = dataSharedGetLibraryPath(mymeshid)
   mysourcedbpid = dataSharedGetAssetID(mymeshid)
   debugWrite(DEBUGINFO,"meshClientCreate: target dbpid found for cloning " + str$(mydbpid))
   debugWrite(DEBUGINFO,"meshClientCreate: source dbpid found for cloning " + str$(mysourcedbpid))

   if mysourcedbpid < 1 then exitfunction MESH_FUNCTION_FAIL
   if object exist(mysourcedbpid) = 0 then exitfunction MESH_FUNCTION_FAIL

   REM A MESH SOURCE ERROR PRIOR TO THIS POINT WOULD LEAVE
   REM THE HOLDER OJBECT IN PLACE
   if object exist(mydbpid) then delete object mydbpid
   clone object mydbpid, mysourcedbpid, 1

   REM IF A DATA FILE EXISTS FOR THE MESH BEING USED THEN
   REM APPLY IT TO THE TABLE OF THE OBJECT
   meshSharedApplyDataFile(mytid)
      
   REM APPLY TRANSFORMS
   posx# = val(dataSharedGetFieldFast(mytid,"posx"))
   posy# = val(dataSharedGetFieldFast(mytid,"posy"))
   posz# = val(dataSharedGetFieldFast(mytid,"posz"))

   rotx# = val(dataSharedGetFieldFast(mytid,"rotx"))
   roty# = val(dataSharedGetFieldFast(mytid,"roty"))
   rotz# = val(dataSharedGetFieldFast(mytid,"rotz"))
   
   sclx# = val(dataSharedGetFieldFast(mytid,"sclx"))
   scly# = val(dataSharedGetFieldFast(mytid,"scly"))
   sclz# = val(dataSharedGetFieldFast(mytid,"sclz"))
   
   REM APPLY COLLISION
   colType = intval(dataSharedGetFieldFast(mytid,"collisiontype"))
   colGroup = intval(dataSharedGetFieldFast(mytid,"collisiongroup"))
   debugWrite(DEBUGINFO,"collisionType found to be " + str$(colType))
   debugWrite(DEBUGINFO,"collisionGroup found to be " + str$(colGroup))
   position object mydbpid, posx#,posy#,posz#
   if sclx# <> 1 or scly# <> 1 or sclz# <> 1
      if sclx# > 0 and scly# > 0 and sclz# > 0
         scale object mydbpid, (sclx# * 100.0),(scly# * 100.0),(sclz# * 100.0)
      endif
   endif
   myval = collisionClientSet(mydbpid,colType,colGroup)
   debugWrite(DEBUGINFO,"collision Setup Result: " + str$(myval))
   
   REM DEFAULT MATERIALS MAY COME FROM A MESH DATA FILE, SO
   REM WE POSTPONE MATERIAL INTERROGATION UNTIL NOW
   REM HERE WE ARE JUST APPLYING ANY PREDEFINED 
   REM MATERIALS FOR THE MESH
   mymatid = intval(dataSharedGetFieldFast(mytid,"materialid"))
   debugWrite(DEBUGINFO,"default materialid found to be " + str$(mymatid))
   materialClientApply(mytid,mymatid)
   
endfunction MESH_FUNCTION_OK

function meshClientApplyMorphTarget(mytid as integer, morphid as integer, operation as integer)

      mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
      mymeshlimb = intval(dataSharedGetFieldFast(mytid,"meshlimb"))
      mybankid = dataSharedGetAssetID(morphid)
      
      debugWrite(DEBUGINFO, "meshClientApplyMorphTarget applying " + str$(mybankid) + " to " + str$(mydbpid))
      
      lock vertexdata for limb mydbpid, mymeshlimb, 2
      
      bpos = 0
      bSize = get bank size(mybankid)
      while bpos < bSize
         v=bank integer(mybankid,bpos) : inc bpos, 4
         posx# = bank float(mybankid,bpos) : inc bpos, 4
         posy# = bank float(mybankid,bpos) : inc bpos, 4
         posz# = bank float(mybankid,bpos) : inc bpos, 4
         norx# = bank float(mybankid,bpos) : inc bpos, 4
         nory# = bank float(mybankid,bpos) : inc bpos, 4
         norz# = bank float(mybankid,bpos) : inc bpos, 4
         x#=get vertexdata position x(v)
         y#=get vertexdata position y(v)
         z#=get vertexdata position z(v)
         nx#=get vertexdata normals x(v)
         ny#=get vertexdata normals y(v)
         nz#=get vertexdata normals z(v)
         set vertexdata position v, x# + (posx# * operation), y# + (posy# * operation), z# + (posz# * operation)
         set vertexdata normals v, nx# + (norx# * operation), ny# + (nory# * operation), nz# + (norz# * operation)
      endwhile
      unlock vertexdata

endfunction MESH_FUNCTION_OK

function meshClientApplyTexture(mytid as integer, textureid as integer, stage as integer)

      mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
      mytextureid = dataSharedGetAssetID(textureid)
      
      if mytextureid > 0
         if image exist(mytextureid)
            texture object mydbpid, stage, mytextureid
            debugWrite(DEBUGINFO, "meshClientApplyTexture: Applied texture " + str$(mytextureid) + " to dbpid " + str$(mydbpid) + " on stage " + str$(stage))
         endif
      endif

endfunction


function meshClientAnimate(mytid as integer, animName as string, loopPlay as boolean)

   local retval as integer
   local mydbpid as integer
   local frameStart as integer
   local frameEnd as integer
   local mymeshdata as string
   local caseAnimName as string

   retval = MESH_FUNCTION_FAIL
   if animName = "" then exitfunction retval
   mymeshdata = dataSharedGetFieldFast(mytid,"meshdata")
   if mymeshdata = "" or mymeshdata = DATA_KEY_UNDEFINED then exitfunction retval
   
   mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
   if mydbpid = 0 then exitfunction retval
   if object exist(mydbpid) = 0 then exitfunction retval
   
   myAnimSwitchCase = intval(dataSharedGetFieldFast(mytid,"animSwitchCase"))
   myAnimSwitchTime = intval(dataSharedGetFieldFast(mytid,"animSwitchTime"))

   REM IF REQUESTING AN ANIMATION GROUP, CHECK IF TIME TO SWITCH
   if fast right$(animName,1)="1"
      caseAnimName = replace$(animName,"1",str$(myAnimSwitchCase))
      if systemGameTimeMilliseconds > myAnimSwitchTime
         myAnimSwitchTime = systemGameTimeMilliseconds + intval(dataSharedGetField(mymeshdata, MESH_ANIMDATA_PREFIX + caseAnimName + MESH_ANIMDATA_SWITCH, DATA_KEY_UNDEFINED, DATA_NO_CREATE))
         inc myAnimSwitchCase
         caseAnimName = replace$(animName,"1",str$(myAnimSwitchCase))
         dataSharedUpdateFieldFast(mytid, "animSwitchCase", str$(myAnimSwitchCase))
         dataSharedUpdateFieldFast(mytid, "animSwitchTime", str$(myAnimSwitchTime))
      endif
     if dataSharedGetField(mymeshdata, MESH_ANIMDATA_PREFIX + caseAnimName + MESH_ANIMDATA_START, DATA_KEY_UNDEFINED, DATA_NO_CREATE) = DATA_KEY_UNDEFINED
        dataSharedUpdateFieldFast(mytid, "animSwitchCase", "1")
     else
        animName = caseAnimName
     endif
   else
      dataSharedUpdateFieldFast(mytid, "animSwitchCase", "1")
   endif

   temp$ = dataSharedGetField(mymeshdata, MESH_ANIMDATA_PREFIX + animName + MESH_ANIMDATA_START, DATA_KEY_UNDEFINED, DATA_NO_CREATE)
   if temp$ <> DATA_KEY_UNDEFINED
      frameStart = intval(temp$)
      temp$ = dataSharedGetField(mymeshdata, MESH_ANIMDATA_PREFIX + animName + MESH_ANIMDATA_STOP, DATA_KEY_UNDEFINED, DATA_NO_CREATE)
      if temp$ <> DATA_KEY_UNDEFINED
         frameEnd = intval(temp$)
         retval = MESH_FUNCTION_OK
         temp$ = dataSharedGetField(mymeshdata, MESH_ANIMDATA_PREFIX + animName + MESH_ANIMDATA_SPEED, DATA_KEY_UNDEFINED, DATA_NO_CREATE)

         REM ONLY LOOP OR PLAY IF NOT ALREADY
         REM PLAYING REQUESTED ANIMATION
         temp = object frame(mydbpid)
         if temp < frameStart or temp > frameEnd

            REM SET SPEED IF AVAILABLE
            if temp$ = DATA_KEY_UNDEFINED
               dataSharedUpdateFieldFast(mytid, "animspeed", "1.0")
            else
               dataSharedUpdateFieldFast(mytid, "animspeed", temp$)
            endif

            if loopPlay = MESH_ANIM_LOOP
               loop object mydbpid, frameStart, frameEnd
            else
               play object mydbpid, frameStart, frameEnd
            endif

         endif
      endif
   endif

endfunction retval

function meshClientStopAnimation(idx)
   
   local mydbpid as integer
  
   mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
   if mydbpid = 0 then exitfunction MESH_FUNCTION_FAIL
   if object exist(mydbpid) = 0 then exitfunction MESH_FUNCTION_FAIL
   stop object mydbpid
   set object frame mydbpid, 1

endfunction MESH_FUNCTION_OK

function meshClientRegulate(mytid as integer)

   REM REGULATE THE ANIMATION SPEED
   local mydbpid as integer
   local myanimspeed as float
  
   mydbpid = intval(dataSharedGetFieldFast(mytid,"dbpid"))
   if mydbpid = 0 then exitfunction MESH_FUNCTION_FAIL
   if object exist(mydbpid) = 0 then exitfunction MESH_FUNCTION_FAIL
   myanimspeed = val(dataSharedGetFieldFast(mytid,"animspeed"))
   
   REM MESHES ARE SAVED WITH MESH_DEFAULT_FPS ANIMATION SPEED
   speed# = (MESH_DEFAULT_FPS / systemGameFPS) * myanimspeed * 100.0
   speed# = clamp(speed#, 1.0, 100.0)
   set object speed mydbpid, speed#

endfunction MESH_FUNCTION_OK


