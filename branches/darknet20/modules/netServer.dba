REM *** Include File: modules\netServer.dba ***
REM Created: 7/4/2010 10:55:29 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

netServerSetup:


   REM ALL OF THE HARD-CODED VALUES YOU SEE HERE
   REM WILL BE REPLACED BY SERVER NETWORK OPTIONS
   REM ONCE WE HAVE THE DATA SYSTEM MODULES
   REM IN PLACE - HARD CODING ALL THESE
   REM VALUES FOR NOW TO KEEP THINGS AS CLEAR
   REM AS POSSIBLE

   global netServerPlayerCount as integer

   global NET_CLIENTS_PER_INSTANCE as integer
   NET_CLIENTS_PER_INSTANCE = 50

   global dim netSession(NET_CLIENTS_PER_INSTANCE) as dataObjectType

   REM NET_MAX_OPERATIONS IS THE TOTAL DIFFERENT KINDS OF UDP
   REM MESSAGES TO PROCESS.  SINCE WE'RE ONLY DOING
   REM MOVEMENT AND JUMPING VIA UDP FOR NOW, 2 IS ENOUGH
   global NET_MAX_OPERATIONS as integer
   NET_MAX_OPERATIONS = 2

   REM WE WILL PUT IN A SYSTEM LATER TO DYNAMICALLY
   REM GET THIS VALUE OR GET IT FROM AN ASSIGNED
   REM OPTION, BUT AGAIN, HARD CODING FOR CLARITY
   NET_SERVER_NAME = "192.168.1.6"

   REM TURN OF DARKNET DEBUG ON SERVER SO WE DON'T
   REM SEE POPUP WINDOWS FOR WARNINGS
   mn Toggle Error Mode 1


return

function netServerCreateProfile()

   REM DARKNET 2.0
   myProfile = mn create instance profile()
   mn Set Profile Local myProfile, NET_SERVER_NAME, NET_SERVER_PORT, NET_SERVER_NAME, NET_SERVER_PORT
   mn Set Profile Mode UDP myProfile, NET_UDP_MODE
   mn Set Profile Num Operations UDP myProfile, NET_MAX_OPERATIONS

endfunction myProfile

function netServerStart()


   mn start NET_INSTANCES, NET_THREADS
   NET_PROFILE_STANDARD = netServerCreateProfile()
   for i = 0 to (NET_INSTANCES - 1 )
   
      retval = mn Start Server(i, NET_CLIENTS_PER_INSTANCE, NET_PROFILE_STANDARD)
      if retval = 0
         debugWrite(DEBUGINFO,NET_SERVER_NAME + " listening on port " + str$(NET_SERVER_PORT) + " with profile " + str$(NET_PROFILE_STANDARD) + " as instance " + str$(i))
         debugWrite(DEBUGINFO,"Clients/Instance set to " + str$(NET_CLIENTS_PER_INSTANCE))
         debugWrite(DEBUGINFO,"UDP Max Operations set to " + str$(NET_MAX_OPERATIONS))
         debugWrite(DEBUGINFO,"UDP Mode set to " + str$(NET_UDP_MODE))
         debugWrite(DEBUGINFO,"Press spacebar to quit.")
      else
         debugWrite(DEBUGERROR,"Server network start error " + str$(retval))
         `systemGameModeAdd(SYSTEM_MODE_QUITTING)
         rem not yet
      endif
   next i

endfunction

function netServerStop()

   mn Finish -1

endfunction

function netServerSessionReset(client as integer)

   if client < 1 or client > NET_CLIENTS_PER_INSTANCE
      debugWrite(DEBUGWARN,"Attempted to reset session out of range " + str$(client))
      exitfunction
   endif

   REM SETTING THE SESSION KEY TO THE INVALID VALUE
   REM GUARANTEES THAT NO MORE DATA CAN BE RECEIVED
   REM ON THIS CIRCUIT UNTIL IT IS REBUILT
   netSession(client).key=""

endfunction


function netServerMaintain()

   local instance as integer
   local client as integer
   local joinID as integer
   local leftID as integer
   local temp$ as string
   local temp as integer
   local TCPPackets as integer
   local UDPPackets as integer
   local operationID as integer

   for instance = 0 to (NET_INSTANCES - 1 )


      REM TAKE CARE OF CLIENT JOINS

      joinID = mn Client Joined(instance)
      if joinID > 0

         temp$ = mn Get Client IP TCP(instance, joinID)
         temp = mn Get Client Port TCP(instance, joinID)

         REM INITIAL CONNECTS ARE "INFORMATIONLESS" AND SO WE
         REM DO NOT YET HAVE ANY INFORMATION TO SHARE WITH OTHERS
         REM UNTIL LOGON IS COMPLETED - AT WHICH POINT, A PLAYER
         REM JOIN ANNOUNCEMENT WILL BE SENT

         debugWrite(DEBUGINFO,"Connection detected from " + temp$ + " on port " + str$(temp))

         netServerSessionReset(joinID)

      endif

      REM TAKE CARE OF CLIENT DISCONNECTS

     leftID = mn Client Left(instance)
     if leftID > 0

        if leftID <= NET_CLIENTS_PER_INSTANCE
           `netServerDropObject(instance, leftID, leftID)
           `netServerChatBroadcast(instance, "SYSTEM", dataObject(leftID).avatarname + " has left.", leftID)
           rem not yet
        endif

      netServerSessionReset(leftID)

     endif

     REM TAKE CARE OF UDP AND TCP MESSAGES
     for client = 1 to NET_CLIENTS_PER_INSTANCE
         TCPPackets = mn Recv TCP(instance,RecvPacket,client)
         if TCPPackets > 0
            netServerParseTCP(instance, client)
         endif
         for operationID = 0 to (NET_MAX_OPERATIONS - 1)
            UDPPackets = mn Recv UDP(instance,RecvPacket,client,operationID)
            if UDPPackets > 0
               `netServerParseUDP(instance, client, operationID)
               rem not yet
            endif
         next operationID
     next client
   next instance

endfunction

function netServerParseTCP(instance, client)

   local result as integer
   result = 0
   local temp$ as string
   local temp as integer

   if client < 1 or client > NET_CLIENTS_PER_INSTANCE then exitfunction

   msgDeclaredLen = mn Get Int(RecvPacket)
   msgTstmp = mn Get Int(RecvPacket)
   msgID = mn Get Int(RecvPacket)
   msgActualLen = mn Get Used Size(RecvPacket)

   REM HERE WE NEED TO DO SOME SANITY CHECKS, WE'LL COME
   REM BACK TO THESE SOON ENOUGH

   select msgID

     case NETC_TEST_MESSAGE
         x# = mn Get Float(RecvPacket)
         z# = mn Get Float(RecvPacket)
         debugWrite(DEBUGINFO,"Message " + str$(msgID) + " recevied from client " + str$(client) + ": loc: " + str$(x#)+","+str$(z#))
     endcase

   endselect

endfunction

