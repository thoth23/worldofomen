REM *** Include File: modules\netClient.dba ***
REM Created: 7/4/2010 10:55:22 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

netClientSetup:

   NET_SERVER_NAME = dataSharedGetField("netClient", "netServerName", NET_SERVER_NAME_DEFAULT, DATA_CREATE)

   global netClientCurrentChannel as string
   netClientCurrentChannel = dataSharedGetField("netClient", "netClientCurrentChannel", "BROADCAST", DATA_CREATE)

   global netTickerUpdate as integer
   netTickerUpdate = systemSharedGetFree(SYSTEM_TYPE_TICKER, SYSTEM_SEARCH_FAST)
   MAKE TICKER netTickerUpdate, NET_UDP_UPDATE_INTERVAL

   global netTickerHeartbeat as integer
   netTickerHeartbeat = systemSharedGetFree(SYSTEM_TYPE_TICKER, SYSTEM_SEARCH_FAST)
   MAKE TICKER netTickerHeartbeat,  NET_UDP_HEARTBEAT_INTERVAL

   global netTickerReconnect as integer
   netTickerReconnect = systemSharedGetFree(SYSTEM_TYPE_TICKER, SYSTEM_SEARCH_FAST)
   MAKE TICKER netTickerReconnect, NET_TCP_RECONNECT_INTERVAL

   global netTickSendNow as boolean
   global netTickConnectNow as boolean
   global netMaxUDPClients as integer
   global netMaxUDPOperations as integer
   global netSessionKey$ as string
   global netUpdateMode as integer

   global netClientUsername$ as string
   global netClientPassword$ as string
   global netClientAvatarname$ as string
   `encryptSetKey(systemGameTitle$)
   rem not yet


return


function netClientStart()

   mn start 1, 0
   mn Disable Message Boxes

   if NET_SERVER_NAME = NET_SERVER_NAME_DEFAULT
      debugWrite(DEBUGWARN,"Server name not set, attempting search...")
      REM NAME WAS NOT SET, SEARCH AND UPDATE
      i = intval(dataSharedGetField("netClient", "netSearchMode", "1",1))
      select i
         case 0:
            REM DO NOT SEARCH
            debugWrite(DEBUGWARN,"Search mode set to 0, default server name will be used.")
         endcase
         case 1:
            REM SEARCH LAN
            debugWrite(DEBUGINFO,"Search mode set to 1, searching on LAN...")
            i$ = netSharedGetLANIP()
            if i$ = ""
               debugWrite(DEBUGERROR,"NO VALID LAN INTERFACES FOUND.  FORCING QUIT.")
               systemSharedGameModeAdd(SYSTEM_MODE_QUITTING)
            else
               NET_SERVER_NAME = i$
               dataSharedUpdateField("netClient","netServerName",NET_SERVER_NAME)
            endif
         endcase
         case 2:
            REM SEARCH WAN
            debugWrite(DEBUGINFO,"Search mode set to 2, searching on WAN...")
            i$ = netSharedGetWANIP()
            if i$ = ""
               debugWrite(DEBUGERROR,"NO VALID WAN INTERFACES FOUND.  FORCING QUIT.")
               systemSharedGameModeAdd(SYSTEM_MODE_QUITTING)
            else
               NET_SERVER_NAME = i$
               dataSharedUpdateField("netClient","netServerName",NET_SERVER_NAME)
            endif

         endcase
      endselect
   endif


endfunction

function netClientStop()

   mn Finish -1

endfunction

function netClientConnectStart()

   mn Connect 0,NET_SERVER_NAME,NET_SERVER_PORT,NET_SERVER_NAME,NET_SERVER_PORT,NET_TIMEOUT_SECONDS,0

endfunction

function netClientConnectStop()

   mn Stop Connect 0
   if (systemMode && SYSTEM_MODE_NET_TCP)
      debugWrite(DEBUGERROR,"Net Connect timeout or error connecting to server.")
   endif
   systemSharedGameModeRemove(SYSTEM_MODE_NET_TCP)

endfunction

function netClientMaintain()

   local i as integer
   local j as integer
   local pollStatus as integer

   if (systemMode && SYSTEM_MODE_NET_TCP) = 0
      REM WE HAVE NEVER CONNNECTED BEFORE
      pollStatus = mn poll connect(0)
      select pollStatus
         case -1:
            REM ERROR
            netClientConnectStop()
            netClientConnectStart()
            debugWrite(DEBUGERROR,"Net Connect Error: " + NET_SERVER_NAME + ":" + str$(NET_SERVER_PORT) + ":" + str$(NET_TIMEOUT_SECONDS))
         endcase
         case 0:
            REM TIMEOUT
            netClientConnectStop()
            netClientConnectStart()
            debugWrite(DEBUGERROR,"Net Connect Timeout.")
         endcase
         case 1:
            REM SUCCESSFUL
            systemSharedGameModeAdd(SYSTEM_MODE_NET_TCP)
            debugWrite(DEBUGINFO,"Net Connect Successful.  Mode TCP Added.")

            `guiHideWindow("windowMessageBox")

            netMaxUDPClients = mn Get Max Clients(0)
            debugWrite(DEBUGINFO,"Net Max UDP Clients set to " + str$(netMaxUDPClients))
            netMaxUDPOperations = mn Get Max Operations(0)
            debugWrite(DEBUGINFO,"Net Max UDP Operations set to " + str$(netMaxUDPOperations))

         endcase

         case 2:
            REM CONNECT IS STILL IN PROGRESS
            REM LET IT KEEP TRYING UNTIL ITS
            REM TIMEOUT VALUE
            if TICKER(netTickerReconnect,1) = 1 or netTickConnectNow = 1
               debugWrite(DEBUGINFO,"Attempting to connect to server...")
            endif
         endcase

      endselect
   endif

   if (systemMode && SYSTEM_MODE_NET_TCP)
      REM WE HAVE CONNECTED AT LEAST ONCE
      if TICKER(netTickerReconnect,1) = 1 or netTickConnectNow = 1
         netTickConnectNow = 0
         if mn Client Connected(0,0) < 1
            debugWrite(DEBUGINFO,"Net Disconnected.")

            `areaUnload()
            `playerUnload(idxPlayer)

            systemSharedGameModeRemove(SYSTEM_MODE_NET_TCP)
            netClientStop()
            netClientStart()
            netClientConnectStart()

            `guiSwitchToWindow("windowLogon")
            `msg$ = "Lost connection to server... attempting to reconnect.  Press Cancel to stop."
            `guiMessageBoxShow(msg$,2,"","Cancel","","","/exit","")

         endif
      endif
   endif

   REM SEND UPDATES

   if (systemMode && SYSTEM_MODE_NET_TCP) <> 0 AND (systemMode && SYSTEM_MODE_LOGON_COMPLETE) <> 0
      if ( (TICKER(netTickerUpdate,1)=1 and netUpdateMode>0) or netTickSendNow=1 or TICKER(netTickerHeartbeat,1)=1 )
        netTickSendNow = 0
        netUpdateMode = 0
        netClientMove()
      endif
   endif

   REM RECEIVE UPDATES

   if (systemMode && SYSTEM_MODE_NET_TCP)
      TcpPackets = mn Recv TCP(0,RecvPacket,0)
      if TcpPackets > 0
         netClientParseTCP()
      endif

      REM ONLY PARSE UDP DATA WHEN THE PLAYER IS IN-WORLD
      REM HERE WE MUST LOOP THROUGH ALL CLIENT PORTS BECAUSE
      REM DATA COULD BE WAITING ON ANY PORT

      if (systemMode && SYSTEM_MODE_LOGON_COMPLETE)
       for i = 0 to (netMaxUDPOperations - 1)
         for j = 0 to netMaxUDPClients
            REM A ZERO CLIENT IS THE SERVER
             UdpPackets = mn Recv UDP(0,RecvPacket,j,i)
             if UdpPackets > 0
               netClientParseUDP(j,i)
               `debugWrite(DEBUGINFO,"UDP message " + str$(i) + " received on channel " + str$(j))
             endif
          next j
       next i
      endif

   endif

endfunction

function netClientSendChat(myChannel$,message$)

   message$ = keyboardSharedSanitize(message$)

   bytes = NET_HEADER_BYTES
   inc bytes, len(myChannel$)
   inc bytes, len(message$)

   REM CHAT WILL NEED TO BE ENCRYPTED ON
   REM CHANNELS THAT ARE MARKED PRIVATE

   netSharedAddHeader(NETC_CHAT,bytes)
   mn Add string SendPacket, myChannel$, 0, 1
   mn Add String SendPacket, message$, 0, 1
   mn Send TCP 0,SendPacket,0,0,1

endfunction

function netClientSendCommand(cmd$)

   cmd$ = keyboardSharedSanitize(cmd$)

   bytes = NET_HEADER_BYTES
   inc bytes, len(cmd$)

   netSharedAddHeader(NETC_COMMAND,bytes)

   REM COMMAND MESSAGES WILL ALWAYS
   REM BE ENCRYPTED.  THIS WILL BE
   REM DONE VERY SOON.
   mn Add String SendPacket, cmd$, 0, 1

   mn Send TCP 0,SendPacket,0,0,1

endfunction

function netClientChangeChannels(operationID as integer, channel$ as string)

   channel$ = keyboardSharedSanitize(channel$)

   bytes = NET_HEADER_BYTES
   inc bytes, len(channel$)

   netSharedAddHeader(operationID,bytes)
   mn Add String SendPacket, channel$, 0, 1
   mn Send TCP 0,SendPacket,0,0,1

endfunction

function netClientRequestDetails(myrpgid as integer)
endfunction

function netClientParseTCP()

    length = mn Get Int(RecvPacket)
    time = mn Get Int(RecvPacket)
    msgID = mn Get Int(RecvPacket)

    REM SKIPPING THE SANITY CHECKS FOR NOW

    select msgID

       case NETS_CHAT
          channel$ = mn Get String(RecvPacket,0,1)
          message$ = mn Get String(RecvPacket,0,1)
          message$ = "[" + channel$ + "] " + message$
          message$ = keyboardSharedSanitize(message$)

          REM TURN ON CHAT WHEN WE RECEIVE A MESSAGE
          REM ON A CHANNEL WE ARE LISTENING TO
          systemSharedGameModeAdd(SYSTEM_MODE_CHAT_ACTIVE)
          guiClientUpdateChatRcv(message$)
       endcase

       case NETS_RPGID
         temp = mn Get Int(RecvPacket)
         debugWrite(DEBUGINFO,"Local Player RPGID received: " + str$(temp))

         idxPlayer = playerClientCreate(temp,0,1)
         guiClientShowWindow(GUI_WINDOW_MAIN)
         REM WE ARE TEMPORARILY CHEATING HERE - THE SERVER
         REM WILL NEED TO SEND THE BASE MESH RPGID BY THIS
         REM POINT AS WELL - WE'LL USE A WELL-KNOWN VALUE
         REM FOR NOW (1 for the player_base.dbo)

         systemSharedGameModeAdd(SYSTEM_MODE_LOGON_COMPLETE)
         systemSharedGameModeAdd(SYSTEM_MODE_GUI)
         
       endcase

    endselect

endfunction

function netClientParseUDP(clientID as integer,OperationID as integer)

   REM GET UDP MESSAGES

   RPGIDRemotePlayer = mn Get Int(RecvPacket)
   idRemotePlayer = playerSharedGetIndex(RPGIDRemotePlayer)

   if idRemotePlayer = SYSTEM_INVALID_ID and RPGIDRemotePlayer <> 0

      REM THIS PLAYER IS NEW TO THIS CLIENT

      idRemotePlayer = playerClientCreate(RPGIDRemotePlayer, 0,1)
      REM TEMPORARILY CHEATING HERE AS WELL
      dataObject(idRemotePlayer).rpgid = RPGIDRemotePlayer

      REM CLIENTS DO NOT NEED TO KNOW THE CLIENTID OF OTHER PLAYERS
      dataObject(idRemotePlayer).clientID = 0

   endif

   select OperationID

      case NETS_MOVE

        dataObject(idRemotePlayer).posx = mn Get Float(RecvPacket)
        dataObject(idRemotePlayer).posy = mn Get Float(RecvPacket)
        dataObject(idRemotePlayer).posz = mn Get Float(RecvPacket)
        dataObject(idRemotePlayer).roty = mn Get Float(RecvPacket)
        dataObject(idRemotePlayer).atTarget = 0

      endcase

      case NETS_JUMP

        dataObject(idRemotePlayer).jumpx = mn Get Float(RecvPacket)
        dataObject(idRemotePlayer).jumpy = mn Get Float(RecvPacket)
        dataObject(idRemotePlayer).jumpz = mn Get Float(RecvPacket)
        dataObject(idRemotePlayer).jumpry = mn Get Float(RecvPacket)
        dataObject(idRemotePlayer).jumpReady = 1
        dataObject(idRemotePlayer).atTarget = 0

      endcase


   endselect

endfunction

function netClientMove()

   mn Clear Packet SendPacket
   mn Add Int SendPacket, NETC_MOVE
   mn Add Int SendPacket, dataObject(idxPlayer).rpgid
   mn Add Float SendPacket, object position x(idxPlayer)
   mn Add Float SendPacket, object position y(idxPlayer)
   mn Add Float SendPacket, object position z(idxPlayer)
   mn Add Float SendPacket, object angle y(idxPlayer)
   mn Send UDP 0, SendPacket, NULL, 0, 1
   `debugWrite(DEBUGINFO,"Sent Movement Update")

endfunction
