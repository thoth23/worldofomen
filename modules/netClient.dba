REM *** Include File: modules\netClient.dba ***
REM Created: 7/4/2010 10:55:22 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

netClientSetup:

   global netClientConnected as boolean
   NET_SERVER_NAME = "192.168.1.6"
   global netClientCurrentChannel as string
   netClientCurrentChannel = "BROADCAST"

   global NET_LISTEN_CHANNELS as string
   NET_LISTEN_CHANNELS = NET_LISTEN_CHANNELS_DEFAULT

return

function netClientCreateProfile()

   REM DARKNET 2.0
   myProfile = mn create instance profile()

endfunction myProfile

function netClientStart()

   mn start 1, 0
   mn Toggle Error Mode 1
   NET_PROFILE_STANDARD = netClientCreateProfile()

endfunction

function netClientStop()

   mn Finish -1

endfunction

function netClientConnectStart()

   debugWrite(DEBUGINFO,"CONNECT START: " + NET_SERVER_NAME + ":" + str$(NET_SERVER_PORT) + ", Profile: " + str$(NET_PROFILE_STANDARD))
   myConnect = mn Connect(0,NET_SERVER_NAME,NET_SERVER_PORT,NET_SERVER_NAME,NET_SERVER_PORT,(NET_TIMEOUT_SECONDS * 1000),0,NET_PROFILE_STANDARD)

endfunction

function netClientConnectStop()

   mn Stop Connect 0
   if (systemMode && SYSTEM_MODE_NET_TCP)
      debugWrite(DEBUGERROR,"Net Connect timeout or error connecting to server.")
   endif
   `systemGameModeRemove(SYSTEM_MODE_NET_TCP)
   rem not yet

   msg$ = "Lost connection to server... attempting to reconnect.  Press Cancel to stop."

endfunction

function netClientMaintain()

   if (systemMode && SYSTEM_MODE_NET_TCP) = 0

      REM NOT CONNECTED YET

      pollStatus = mn poll connect(0)
      if pollStatus = 1
         REM SUCCESSFUL
         systemSharedGameModeAdd(SYSTEM_MODE_NET_TCP)
         debugWrite(DEBUGINFO,"Net Connect Successful.  Mode TCP Added.")
         netMaxUDPClients = mn Get Max Clients(0)
         debugWrite(DEBUGINFO,"Net Max UDP Clients set to " + str$(netMaxUDPClients))
         netMaxUDPOperations = mn Get Max Operations(0)
         debugWrite(DEBUGINFO,"Net Max UDP Operations set to " + str$(netMaxUDPOperations))
      endif
   else

      REM CONNECTED

       TcpPackets = mn Recv TCP(0,RecvPacket,0)
       if TcpPackets > 0
         netClientParseTCP()
       endif

   endif

endfunction


function netClientSendTestMessage()

   REM FOR THE TEST MESSAGE, WE WILL SEND
   REM THE CLIENT LOCATION AS TWO FLOATS
   netSharedAddHeader(NETC_TEST_MESSAGE,20)
   x# = object position x(5)
   z# = object position z(5)
   mn Add Float SendPacket, x#
   mn Add Float SendPacket, z#
   mn Send TCP 0,SendPacket,0,0,1
   debugWrite(DEBUGINFO,"Sent NETC_TEST_MESSAGE with data " + str$(x#) + "," + str$(z#))

endfunction
function netClientSendChat(myChannel$,message$)

   message$ = keyboardSharedSanitize(message$)

   bytes = NET_HEADER_BYTES
   inc bytes, len(myChannel$)
   inc bytes, len(message$)

   netSharedAddHeader(NETC_CHAT,bytes)
   mn Add string SendPacket, myChannel$, 0, 1
   mn Add String SendPacket, message$, 0, 1
   mn Send TCP 0,SendPacket,0,0,1
   debugWrite(DEBUGINFO,"Sent NETC_CHAT")

endfunction

function netClientParseTCP()

    length = mn Get Int(RecvPacket)
    time = mn Get Int(RecvPacket)
    msgID = mn Get Int(RecvPacket)

    REM SKIPPING THE SANITY CHECKS FOR NOW

    select msgID

       case NETS_CHAT
          channel$ = mn Get String(RecvPacket,0,1)
          message$ = mn Get String(RecvPacket,0,1)
          if instr(NET_LISTEN_CHANNELS,channel$) <> 0
             message$ = "[" + channel$ + "]" + message$
             message$ = keyboardSharedSanitize(message$)
             debugWrite(DEBUGINFO,message$)
             keyboardUpdateChatReceive(message$)
             `guiUpdateChatReceive(message$)
             rem not yet
          endif
       endcase

    endselect

endfunction
