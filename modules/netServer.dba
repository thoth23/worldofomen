REM *** Include File: modules\netServer.dba ***
REM Created: 7/4/2010 10:55:29 AM
REM
REM Included in Project: C:\Program Files\The Game Creators\Dark Basic Professional\Projects\worldofomen\worldofomen.dbpro
REM

netServerSetup:

   NET_SERVER_NAME = dataSharedGetField("netServer", "netServerName", NET_SERVER_NAME_DEFAULT, DATA_CREATE)

   global netServerPlayerCount as integer

   global NET_CLIENTS_PER_INSTANCE as integer
   NET_CLIENTS_PER_INSTANCE = intval(dataSharedGetField("netServer", "netClientsPerInstance", "50", DATA_CREATE))

   global NET_MAX_OPERATIONS as integer
   NET_MAX_OPERATIONS = intval(dataSharedGetField("netServer", "netMaxOperations", "2", DATA_CREATE))

   global NET_VISIBILITY_MOVE as float
   NET_VISIBILITY_MOVE = intval(dataSharedGetField("netServer", "netVisibilityMove", "10000.0",1))

   global NET_VISIBILITY_LOCAL_CHAT as float
   NET_VISIBILITY_LOCAL_CHAT = intval(dataSharedGetField("netServer", "netVisibilityLocalChat", "10000.0",1))
   
   REM TURN OFF DARKNET DEBUG ON SERVER SO WE DON'T
   REM SEE POPUP WINDOWS FOR WARNINGS
   mn Disable Debug
   mn Disable Message Boxes

   if NET_SERVER_NAME = NET_SERVER_NAME_DEFAULT
      debugWrite(DEBUGWARN,"Server name not set, attempting search...")
      REM NAME WAS NOT SET, SEARCH AND UPDATE
      i = intval(dataSharedGetField("netServer", "netSearchMode", "1",1))
      select i
         case 0:
            REM DO NOT SEARCH
            debugWrite(DEBUGWARN,"Search mode set to 0, default server name will be used.")
         endcase
         case 1:
            REM SEARCH LAN
            debugWrite(DEBUGINFO,"Search mode set to 1, searching on LAN...")
            i$ = netSharedGetLANIP()
            if i$ = ""
               debugWrite(DEBUGERROR,"NO VALID LAN INTERFACES FOUND.  FORCING QUIT.")
               systemSharedGameModeAdd(SYSTEM_MODE_QUITTING)
            else
               NET_SERVER_NAME = i$
               dataSharedUpdateField("netServer","netServerName",NET_SERVER_NAME)
            endif
         endcase
         case 2:
            REM SEARCH WAN
            debugWrite(DEBUGINFO,"Search mode set to 2, searching on WAN...")
            i$ = netSharedGetWANIP()
            if i$ = ""
               debugWrite(DEBUGERROR,"NO VALID WAN INTERFACES FOUND.  FORCING QUIT.")
               systemSharedGameModeAdd(SYSTEM_MODE_QUITTING)
            else
               NET_SERVER_NAME = i$
               dataSharedUpdateField("netServer","netServerName",NET_SERVER_NAME)
            endif

         endcase
      endselect
   endif
   
   REM THE CLIENT TABLE IS USED TO LOOKUP THE
   REM CLIENT CONNECTION ID USING THE AVATARID
   REM ALSO CREATE REVERSE LOOKUP OF AVATARID
   REM USING THE CLIENT CONNECTION ID
   #constant DATA_TABLE_CLIENT "client"
   global tidClient as integer
   tidClient = dataSharedMakeTable(DATA_TABLE_CLIENT,0,DATA_REVERSE)
   dataSharedRegisterNoSaveTable(DATA_TABLE_CLIENT)
   
   global rTidClient as integer
   rTidClient = dataSharedTableExist(DATA_TABLE_CLIENT + DATA_REVERSE_SUFFIX)
   
return

function netServerStart()


   mn start NET_INSTANCES, NET_THREADS

   for i = 0 to (NET_INSTANCES - 1 )
      mn Set Local i, NET_SERVER_NAME,NET_SERVER_PORT,NET_SERVER_NAME,NET_SERVER_PORT
      retval = mn Start Server(i, NET_CLIENTS_PER_INSTANCE,NET_MAX_OPERATIONS,NET_UDP_MODE)
      if retval = 0
         debugWrite(DEBUGINFO,NET_SERVER_NAME + " listening on port " + str$(NET_SERVER_PORT) + " as instance " + str$(i))
         debugWrite(DEBUGINFO,"Clients/Instance set to " + str$(NET_CLIENTS_PER_INSTANCE))
         debugWrite(DEBUGINFO,"UDP Max Operations set to " + str$(NET_MAX_OPERATIONS))
         debugWrite(DEBUGINFO,"UDP Mode set to " + str$(NET_UDP_MODE))
         debugWrite(DEBUGINFO,"Press spacebar to quit.")
      else
         debugWrite(DEBUGERROR,"Server network start error " + str$(retval))
         systemSharedGameModeAdd(SYSTEM_MODE_QUITTING)
      endif
   next i

endfunction

function netServerStop()

   mn Finish -1

endfunction


function netServerMaintain()

   local instance as integer
   local client as integer
   local joinID as integer
   local leftID as integer
   local temp$ as string
   local temp as integer
   local TCPPackets as integer
   local UDPPackets as integer
   local operationID as integer

   for instance = 0 to (NET_INSTANCES - 1 )


      REM TAKE CARE OF CLIENT JOINS

      joinID = mn Client Joined(instance)
      if joinID > 0 and joinID <= NET_CLIENTS_PER_INSTANCE

         temp$ = mn Get Client IP TCP(instance, joinID)
         temp = mn Get Client Port TCP(instance, joinID)
         
         REM GIVE NEW CONNECTIONS AN INVALID AVATARID
         REM BUT STILL PUT THEM IN THE CLIENT TABLE
         dataSharedUpdateFieldFast(tidClient, str$(-joinID), str$(joinID))
         
         REM SET ALL THE CONNECTION VALUES TO INVALID
         dataSharedUpdateFieldFast(joinID, "accounttableid", DATA_KEY_UNDEFINED)
         dataSharedUpdateFieldFast(joinID, "avatartableid", DATA_KEY_UNDEFINED)
         dataSharedUpdateFieldFast(joinID, "key", DATA_KEY_UNDEFINED)
         
         dataSharedRegisterNoSaveTable(str$(joinID))
         debugWrite(DEBUGINFO,"Connect from " + temp$ + ", port:" + str$(temp) + ", clientID:" + str$(joinID))
         
         REM TELL THE CLIENT TO UPDATE THEIR MANIFEST
         netServerSendOpCode(instance, joinID, NETS_MANIFEST)
         debugWrite(DEBUGINFO, "NETS_MANIFEST sent to clientID " + str$(joinID))

      endif

      REM TAKE CARE OF CLIENT DISCONNECTS

      leftID = mn Client Left(instance)
      if leftID > 0 and leftID <= NET_CLIENTS_PER_INSTANCE

         debugWrite(DEBUGINFO,"Connection dropped from clientID " + str$(leftID))
         
         REM SAVE AND DROP ACCOUNT TABLE
         temp = intval(dataSharedGetFieldFast(leftID, "accounttableid"))
         if temp > 0
               myaccountname$ = dataSharedGetFieldFast(temp,"accountname")
               dataSharedSaveTable(temp,DATA_ACCOUNT_PATH + myaccountname$)
               dataSharedResetTable(temp)
         endif
         
         REM SAVE AND DROP AVATAR TABLE
         temp = intval(dataSharedGetFieldFast(leftID, "avatartableid"))
         if temp > 0
               myavatarname$ = dataSharedGetFieldFast(temp,"avatarname")
               dataSharedSaveTable(temp,DATA_AVATAR_PATH + myavatarname$)
               myavatarid$ = dataSharedGetFieldFast(temp,"avatarid")
               if myavatarid$ <> DATA_KEY_UNDEFINED
                  dataSharedDeleteRecord(tidClient, myavatarid$)
               endif         
               dataSharedResetTable(temp)
         endif
         
         REM ANY OTHER CHILD TABLES DROP HERE
         
         REM ALWAYS DROP THE PARENT TABLE LAST
         dataSharedResetTable(leftID)
         
      endif

      REM TAKE CARE OF TCP AND UDP MESSAGES
      if tidClient > 0
         FIRST LOOKUP tidClient
         while lookup is valid(tidClient)
            rpgid = intval(LOOKUP CURRENT KEY$(tidClient))
            client = intval(LOOKUP CURRENT VALUE$(tidClient))
               if client > 0
                  if mn Recv TCP(instance,RecvPacket,client) > 0
                     netServerParseTCP(instance, client)
                  endif
                  for operationID = 0 to (NET_MAX_OPERATIONS - 1)
                     if mn Recv UDP(instance,RecvPacket,client,operationID) > 0
                        `debugWrite(DEBUGINFO,"UDP operation " + str$(operationID) + " received from clientID " + str$(client))
                        netServerParseUDP(instance, client, operationID)
                     endif
                  next operationID
               endif
           
            next lookup tidClient
         endwhile
      endif

   next instance

endfunction



function netServerChatBroadcast(instance as integer, channel$ as string, message$ as string)

   local tableid as integer
   local listenChannels$ as string

   netSharedAddHeader(NETS_CHAT, NET_HEADER_BYTES + len(channel$) + len(message$))
   mn Add string SendPacket, channel$, 0, 1
   mn Add String SendPacket, message$, 0, 1

   tableid = tidClient
   if tableid > 0
      FIRST LOOKUP tableid
      while lookup is valid(tableid)
         rpgid = intval(LOOKUP CURRENT KEY$(tidClient))
         client = intval(LOOKUP CURRENT VALUE$(tidClient))
         listenChannels$ = dataSharedGetField(str$(client), "listenChannels", NET_LISTEN_CHANNELS_DEFAULT,DATA_CREATE)
            if instr(listenChannels$,channel$) <> 0
               mn Send TCP instance, SendPacket, client, 1, 1
            endif
         next lookup tableid
      endwhile
   endif

   mn Clear Packet SendPacket

endfunction

function netServerChatSend(instance as integer, channel$ as string, message$ as string, client as integer)

   netSharedAddHeader(NETS_CHAT, NET_HEADER_BYTES + len(channel$) + len(message$))
   mn Add string SendPacket, channel$, 0, 1
   mn Add String SendPacket, message$, 0, 1
   mn Send TCP instance, SendPacket, client, 0, 1

endfunction

function netServerRpgidSend(instance as integer, client as integer, rpgid as integer)

   netSharedAddHeader(NETS_RPGID, NET_HEADER_BYTES + 4)
   mn Add int SendPacket, rpgid
   mn Send TCP instance, SendPacket, client, 0, 1

endfunction

function netServerSendSwitchWindow(instance as integer, client as integer, windowName$ as string)

   netSharedAddHeader(NETS_SWITCH_WINDOW, NET_HEADER_BYTES + len(windowName$))
   mn Add string SendPacket, windowName$, 0, 1
   mn Send TCP instance, SendPacket, client, 0, 1
   
endfunction

function netServerSendOpCode(instance as integer, client as integer, code as integer)

   REM SEND JUST THE OPERATION CODE
   REM THIS IS USED FOR CONFIRMATIONS
   REM AND ERRORS
   netSharedAddHeader(code, NET_HEADER_BYTES)
   mn Send TCP instance, SendPacket, client, 0, 1
   
endfunction
   


function netServerParseUDP(instance as integer, client as integer, operationID as integer)

   local remoteRPGID as integer
   local rpgid as integer
   local posx as float
   local posy as float
   local posz as float
   local roty as float
  
   REM SANITY CHECK
   REM UDP SENDS MUST ALWAYS START
   REM WITH THE RPGID OF THE PLAYER

   remoteRPGID = mn Get Int(RecvPacket)
   rpgid = intval(dataSharedGetFieldFast(client, "rpgid"))
   
   if client > 0 AND remoteRPGID = rpgid
   
      posx = mn Get Float(RecvPacket)
      posy = mn Get Float(RecvPacket)
      posz = mn Get Float(RecvPacket)
      roty = mn Get Float(RecvPacket)
      
      dataSharedUpdateFieldFast(client, "posx", str$(posx))
      dataSharedUpdateFieldFast(client, "posy", str$(posy))
      dataSharedUpdateFieldFast(client, "posz", str$(posz))
      dataSharedUpdateFieldFast(client, "roty", str$(roty))
      
      if operationID = NETC_JUMP
      
         dataSharedUpdateFieldFast(client, "jumpx", str$(posx))
         dataSharedUpdateFieldFast(client, "jumpy", str$(posy))
         dataSharedUpdateFieldFast(client, "jumpzz", str$(posz))
         dataSharedUpdateFieldFast(client, "jumpry", str$(roty))
         
      endif
      
      mn Clear Packet SendPacket
      mn Add Int SendPacket, client
      mn Add Int SendPacket, operationID
      mn Add Int SendPacket, rpgid
      mn Add Float SendPacket, posx
      mn Add Float SendPacket, posy
      mn Add Float SendPacket, posz
      mn Add Float SendPacket, roty
      
      netServerUDPBroadcast(instance, client)
      
      `if timer() > dataObject(idx).nextSaveTime
      `  dbSaveObject(idx,0)
      `endif
      rem not yet
      
      else
         debugWrite(DEBUGHACK, "Attempt to position unowned object by account name: " + dataSharedGetFieldFast(client, "accountname"))
      endif
   
endfunction

function netServerUDPBroadcast(instance as integer, clientExclude as integer)

   local tableid as integer
   local posx1 as integer
   local posy1 as integer
   local posz1 as integer
   local posx2 as integer
   local posy2 as integer
   local posz2 as integer
   
   if clientExclude < 1 or clientExclude > NET_CLIENTS_PER_INSTANCE then exitfunction

   posx1 = intval(dataSharedGetFieldFast(clientExclude,"posx"))
   posy1 = intval(dataSharedGetFieldFast(clientExclude,"posy"))
   posz1 = intval(dataSharedGetFieldFast(clientExclude,"posz"))

   tableid = tidClient
   if tableid > 0
      FIRST LOOKUP tableid
      while lookup is valid(tableid)
         client = intval(LOOKUP CURRENT VALUE$(tableid))
            if client <> clientExclude and client > 0 and client <= NET_CLIENTS_PER_INSTANCE
               if mn client connected(instance,client)
               
                  posx2 = intval(dataSharedGetFieldFast(client,"posx"))
                  posy2 = intval(dataSharedGetFieldFast(client,"posy"))
                  posz2 = intval(dataSharedGetFieldFast(client,"posz"))

                  if systemSharedGetDistance3D(posx1,posy1,posz1,posx2,posy2,posz2) < NET_VISIBILITY_MOVE
                     mn Send UDP instance, SendPacket, client, 1, 1
                     `debugWrite(DEBUGINFO, "Sent UDP update for player " + str$(clientExclude) + " to player " + str$(client))
                  endif
               endif
            endif
         next lookup tableid
      endwhile
   endif

   mn Clear Packet SendPacket

endfunction


function netServerParseTCP(instance as integer, client as integer)

   local result as integer
   result = 0
   local temp$ as string
   local temp as integer

   if client < 1 or client > NET_CLIENTS_PER_INSTANCE then exitfunction

   msgDeclaredLen = mn Get Int(RecvPacket)
   msgTstmp = mn Get Int(RecvPacket)
   msgID = mn Get Int(RecvPacket)
   msgActualLen = mn Get Used Size(RecvPacket)

   REM HERE WE NEED TO DO SOME SANITY CHECKS

   select msgID

     case NETC_CHAT
         channel$ = mn Get String(RecvPacket,0,1)
         message$ = mn Get String(RecvPacket,0,1)
         debugWrite(DEBUGINFO,channel$+":"+message$)
         channel$ = keyboardSharedSanitize(channel$)
         message$ = keyboardSharedSanitize(message$)
         REM WHEN A CLIENT SENDS ON A CHANNEL,AUTOMATICALLY
         rem SET THAT CLIENT TO LISTEN ON THAT CHANNEL
         temp$ = dataSharedGetFieldFast(client,"listenChannels")
         temp$ = systemSharedFieldAdd(temp$,channel$,COMMAND_CHAR_CMDSEP)
         dataSharedUpdateFieldFast(client,"listenChannels",temp$)
         netServerChatBroadcast(instance, channel$, message$)
     endcase

     case NETC_COMMAND
         cmd$ = mn Get String(RecvPacket,0,1)
         cmd$ = keyboardSharedSanitize(cmd$)
         REM DO NOT ALLOW ANY GM COMMANDS
         REM USING A STANDARD COMMAND MESSAGE
         REM ONLY 1 COMMAND PER MESSAGE
         REM SO USE TRANSPOSE, NOT PARSE
         if fast left$(cmd$,3) <> "/gm"
            commandSharedTranspose(cmd$)
         else
            REM WE REPORT BOTH CLIENT ID AND ACCOUNTNAME
            REM IN CASE AN ATTEMPT IS MADE PRIOR TO LOGIN
            accountName$ = dataSharedGetFieldFast(client,"accountname")
            debugWrite(DEBUGHACK,"GM SKILL ATTEMPTED ON NETC_COMMAND, client: " + str$(client) + ", accountname: " + accountName$)
         endif
     endcase

     case NETC_LISTEN
         channel$ = upper$(mn Get String(RecvPacket,0,1))
         temp$ = dataSharedGetFieldFast(client,"listenChannels")
         temp$ = systemSharedFieldAdd(temp$,channel$,COMMAND_CHAR_CMDSEP)
         dataSharedUpdateFieldFast(client,"listenChannels",temp$)
         netServerChatSend(instance, "SYSTEM", "Listening on channels: " + temp$, client)
     endcase

     case NETC_MUTE
         channel$ = upper$(mn Get String(RecvPacket,0,1))
         temp$ = dataSharedGetFieldFast(client,"listenChannels")
         temp$ = systemSharedFieldRemove(temp$,channel$,COMMAND_CHAR_CMDSEP)
         dataSharedUpdateFieldFast(client,"listenChannels",temp$)
         netServerChatSend(instance, "SYSTEM", "Listening on channels: " + temp$, client)
     endcase
     
     case NETC_CREATE_ACCOUNT
         REM PASSWORD COMES OVER THE WIRE
         REM ENCRYPTED, SO WE LEAVE IT AS IS
         accountName$ = mn Get String(RecvPacket,0,1)
         password$ = mn Get String(RecvPacket,0,1)
         retval = dataServerCreateAccount(client, accountName$, password$)
         if retval = DATA_FUNCTION_FAIL
            netServerSendOpCode(instance, client, NETS_CREATE_ACCOUNT_ERROR)
            debugWrite(DEBUGWARN,"Account Creation failed: " + accountName$)
         else
            netServerSendOpCode(instance, client, NETS_CREATE_ACCOUNT)
            debugWrite(DEBUGINFO,"Account Creation success: " + accountName$)
         endif
     endcase
     
     case NETC_LOGON_ALPHA
     
         debugWrite(DEBUGINFO,"NETC_LOGON_ALPHA received from client " + str$(client))
         REM CLIENT IS SENDING ACCOUNT NAME FOR LOGON
         encryptSetKey(systemGameTitle$)
         accountName$ = DecryptString(mn Get String(RecvPacket,0,1))
    
         if dataSharedTableExist(DATA_ACCOUNT_PATH + accountName$) = DATA_FUNCTION_FAIL
            REM PASSED TEST 1 - ACCOUNT IS NOT ALREADY IN USE
            if file exist(DATA_ACCOUNT_PATH + accountName$)
               REM PASSED TEST 2 - ACCOUNT EXISTS
               if dataSharedLoadTable(DATA_ACCOUNT_PATH + accountName$,DATA_ACCOUNT_PATH + accountName$) <> DATA_FUNCTION_FAIL
                  REM PASSED TEST 3 - ACCOUNT LOADED SUCCESSFULLY, LINK TO CLIENT
                  myaccounttableid = dataSharedTableExist(DATA_ACCOUNT_PATH + accountName$)
                  dataSharedUpdateFieldFast(client,"accounttableid",str$(myaccounttableid))
                  
                  temp$ = dataSharedGetFieldFast(myaccounttableid,"password")
                  temp$ = DecryptString(temp$)
                  encryptSetKey(temp$ + systemGameTitle$) : temp$ = ""
                  temp$ = encryptCreateKey() : dataSharedUpdateFieldFast(client,"key", temp$) : temp$ = EncryptString(temp$)
                  netSharedAddHeader(NETS_LOGON_ALPHA, NET_HEADER_BYTES + len(temp$))
                  mn Add String SendPacket, temp$, 0, 1
                  mn Send TCP instance,SendPacket,client,0,1
                  temp$ = ""
                  debugWrite(DEBUGINFO,"Sent NETS_LOGON_ALPHA to client " + str$(client))
                  
               else
                  netServerSendOpCode(instance, client, NETS_LOGON_ALPHA_ERROR)
                  debugWrite(DEBUGWARN,"Account failed to load: " + accountName$)         
               endif
            else
               netServerSendOpCode(instance, client, NETS_LOGON_ALPHA_ERROR)
               debugWrite(DEBUGWARN,"Invalid logon account name: " + accountName$)         
            endif
         else
            netServerSendOpCode(instance, client, NETS_LOGON_ALPHA_ERROR)
            debugWrite(DEBUGHACK,"Duplicate logon attempted: " + accountName$)         
         endif
         
      endcase
      
      case NETC_LOGON_BETA
  
         debugWrite(DEBUGINFO,"NETC_LOGON_BETA received from client " + str$(client))
         temp$ = dataSharedGetFieldFast(client,"key")
         encryptSetKey(temp$)
         temp$ = DecryptString(mn Get String(RecvPacket,0,1)) 
         myaccounttableid = intval(dataSharedGetFieldFast(client,"accounttableid"))
         accountName$ = dataSharedGetFieldFast(myaccounttableid,"accountname")
         
         REM IF THE CLIENT WAS ABLE TO SUCCESSFULLY
         REM DECRYPT THE KEY TO USE IT TO ENCRYPT
         REM THE MESSAGE SENT BACK, THEN WE KNOW
         REM THAT THE CLIENT KNEW THE ACCOUNT PASSWORD
         if fast lower$(accountName$) = fast lower$(temp$)
            temp$ = encryptCreateKey() : dataSharedUpdateFieldFast(client,"key",temp$)
            temp$ = EncryptString(temp$)
            netSharedAddHeader(NETS_LOGON_BETA, NET_HEADER_BYTES + len(temp$))
            mn Add String SendPacket, temp$, 0, 1
            mn Send TCP instance,SendPacket,client,0,1
            temp$ = "" : debugWrite(DEBUGINFO,"Login SUCCESS for " + accountName$)
         else
            netServerSendOpCode(instance, client, NETS_LOGON_BETA_ERROR)
            temp$ = "" : debugWrite(DEBUGINFO,"Login FAILED  for " + accountName$)
         endif
   
      endcase
      
      case NETC_AVATAR_LIST
      
         REM CLIENT IS REQUESTING THEIR AVATAR LIST
         
         encryptSetKey(dataSharedGetFieldFast(client,"key"))
         temp$ = DecryptString(mn Get String(RecvPacket,0,1)) 
         myaccounttableid = intval(dataSharedGetFieldFast(client,"accounttableid"))
         accountName$ = dataSharedGetFieldFast(myaccounttableid,"accountname")
         
         if temp$ = accountName$
            REM THIS CLIENT OWNS THIS ACCOUNT
            REM GET OR SET THE AVATARLIMIT
            accountAvatarLimit = intval(dataSharedGetField(DATA_ACCOUNT_PATH + accountName$, "accountavatarlimit", str$(PLAYER_AVATARS_PER_ACCOUNT_DEFAULT), DATA_CREATE))
            mylimit = accountAvatarLimit
            ctr = 0
            while ctr < mylimit
               inc ctr
               myavatarname$ = dataSharedGetFieldFast(myaccounttableid,"avatar"+str$(ctr))
               if myavatarname$ <> DATA_KEY_UNDEFINED
                  myavatarlist$ = systemSharedFieldAdd(myavatarlist$,myavatarname$,DATA_ARGSEP)
               endif
            endwhile
            netSharedAddHeader(NETS_AVATAR_LIST, NET_HEADER_BYTES + len(myavatarlist$))
            mn Add String SendPacket, myavatarlist$, 0, 1
            mn Send TCP instance,SendPacket,client,0,1
            debugWrite(DEBUGINFO,"Sent avatar list for client " + str$(client) + ": " + myavatarlist$)
         else
            REM THIS CLIENT DOES NOT OWN THIS ACCOUNT
            netServerSendOpCode(instance, client, NETS_AVATAR_LIST_ERROR)
            debugWrite(DEBUGHACK,"Attempt to get avatars on unowned account, attacker: " + accountName$)
         endif
         
      endcase
      
      case NETC_MANIFEST
      
            REM CLIENT IS TELLING US THAT THEY ARE DONE
            REM UPDATING THEIR LOCAL LIBRARY - TELL CLIENT
            REM TO SWITCH TO THEIR LOGIN WINDOW
            debugWrite(DEBUGINFO,"Client " + str$(client) + " completed manifest update")
            netServerSendSwitchWindow(instance, client, "windowLogon")
            debugWrite(DEBUGINFO,"NETS_SWITCH_WINDOW sent to client " + str$(client))
            
      endcase
      
      case NETC_ASSETID
      
         REM FOR NOW WE ASSUME THAT ANYONE CAN
         REM REGISTER A NEW ASSET (USING DATA_CREATE)
         
         path$ = mn Get String(RecvPacket,0,1)
         debugWrite(DEBUGINFO,"Received NETC_ASSETID request from client " + str$(client) + " for " + path$)
         propID = dataServerGetLibraryRPGID(path$, DATA_CREATE)    
         netSharedAddHeader(NETS_ASSETID, NET_HEADER_BYTES + 4 + len(path$))
         mn Add Int SendPacket, propID
         mn Add String SendPacket, path$, 0, 1
         mn Send TCP instance,SendPacket,client,0,1
         debugWrite(DEBUGINFO,"Sent NETS_ASSETID to " + str$(client) + " with rpgid " + str$(propID))
         
     endcase
     
     case NETC_CREATE_AVATAR
         myaccounttableid = intval(dataSharedGetFieldFast(client,"accounttableid"))
         accountName$ = dataSharedGetFieldFast(myaccounttableid,"accountname")
         myclass = mn Get Int(RecvPacket)
         mysource = mn Get Int(RecvPacket)
         myname$ = mn Get String(RecvPacket,0,1)
         mymorphcount = mn Get Int(RecvPacket)
         for i = 1 to mymorphcount
            morphid = mn Get Int(RecvPacket)
            mymorphlist$ = systemSharedFieldAdd(mymorphlist$,str$(morphid),DATA_ARGSEP)
         next i
         
         myretval = dataServerCreateAvatar(client, accountName$, myname$, myclass, mysource, mymorphlist$)
         if myretval = DATA_FUNCTION_FAIL
            debugWrite(DEBUGWARN,"Avatar Creation failed: " + myname$ + " for " + accountName$)
            netServerSendOpCode(instance, client, NETS_CREATE_AVATAR_ERROR)    
         else
            debugWrite(DEBUGINFO,"Avatar Creation success: " + myname$ + " for " + accountName$)
            netServerSendOpCode(instance, client, NETS_CREATE_AVATAR)    
         endif
     endcase
     
     case NETC_AVATAR_DETAILS_SELF
     
         REM CLIENT IS REQUESTING OWN 
         REM AVATAR DETAILS - USED FOR
         REM AVATAR SELECTION AND ZONING
         myaccounttableid = intval(dataSharedGetFieldFast(client,"accounttableid"))
         accountName$ = dataSharedGetFieldFast(myaccounttableid,"accountname")

         avatarName$ = mn Get String(RecvPacket,0,1)

         if dataServerAccountOwnsAvatar(DATA_ACCOUNT_PATH + accountName$, avatarName$) <> DATA_FUNCTION_FAIL 
            REM PASSED TEST 1 - ACCOUNT OWNS AVATAR
            if file exist(DATA_AVATAR_PATH + avatarName$)
               REM PASSED TEST 2 - AVATAR EXISTS
               if dataSharedLoadTable(DATA_AVATAR_PATH + avatarName$,DATA_AVATAR_PATH + avatarName$) <> DATA_FUNCTION_FAIL
                  REM PASSED TEST 3 - AVATAR LOADED SUCCESSFULLY, LINK TO CLIENT
                  
                  REM FOR NOW WE WONT UNLOAD PREVIOUS AVATAR SELECTIONS
                  REM AUTOMATICALLY, THIS WILL SPEED THINGS UP IF PLAYERS
                  REM GO BACK AND FORTH BETWEEN THEIR AVATARS A LOT
                  REM THIS CAN BE UNCOMMENTED TO CONSERVE MEMORY AT THE
                  REM EXPENSE OF SPEED
                  `temp$ = dataSharedGetFieldFast(client,"avatartableid")
                  `if temp$ <> DATA_KEY_UNDEFINED
                   `  dataSharedResetTable(intval(temp$))
                  `endif
                  
                  myavatartableid = dataSharedTableExist(DATA_AVATAR_PATH + avatarName$)
                  dataSharedUpdateFieldFast(client,"avatartableid",str$(myavatartableid))
                  avatarName$ = dataSharedGetFieldFast(myavatartableid,"avatarname")
                  
                  REM APPLY DATA RELATED TO THE MESH
                  meshSharedApplyDataFile(myavatartableid)
                  
                  REM MORE DATA CHECKS WILL GO HERE
                  
                  netSharedAddHeader(NETS_AVATAR_DETAILS_SELF, NET_HEADER_BYTES + len(avatarName$) + 16)
                  temp = intval(dataSharedGetFieldFast(myavatartableid,"avatarid"))
                  mn Add Int SendPacket, temp
                  mn Add String SendPacket, avatarName$, 0, 1
                  temp = intval(dataSharedGetFieldFast(myavatartableid,"class"))
                  mn Add Int SendPacket, temp
                  temp = intval(dataSharedGetFieldFast(myavatartableid,"powersource"))
                  mn Add Int SendPacket, temp
                  temp = intval(dataSharedGetFieldFast(myavatartableid,"meshid"))
                  mn Add Int SendPacket, temp
                  
                  mymorphcount = intval(dataSharedGetFieldFast(myavatartableid,"morphcount"))
                  mn Add Int SendPacket, mymorphcount
                  for i = 1 to mymorphcount
                     temp = intval(dataSharedGetFieldFast(myavatartableid,"morph"+str$(i)))
                     mn Add Int SendPacket, temp
                  next
                  
                  REM WILL SEND MORE MODS HERE

                  mn Send TCP instance,SendPacket,client,0,1
                  debugWrite(DEBUGINFO,"Sent NETS_AVATAR_DETAILS for client/avatar: " + str$(client) + "/" + avatarName$)

               else
                  debugWrite(DEBUGWARN,"Received NETC_AVATAR_DETAILS_SELF but avatar load failed: " + DATA_AVATAR_PATH + avatarName$)
               endif
            else
               debugWrite(DEBUGWARN,"Received NETC_AVATAR_DETAILS_SELF on non-existant avatar: " + DATA_AVATAR_PATH + avatarName$)
            endif
         else
            debugWrite(DEBUGHACK,"Received NETC_AVATAR_DETAILS_SELF on unowned avatar: " + accountName$ + " for avatar " + avatarName$)
         endif
     endcase
     
  endselect

endfunction


